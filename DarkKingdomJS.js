/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2019
 * @compiler Bridge.NET 17.10.1
 */
Bridge.assembly("DarkKingdomJS", function ($asm, globals) {
    "use strict";

    Bridge.define("DarkKingdomCore.Ability", {
        fields: {
            name: null,
            value: 0,
            condition: null,
            condnum: 0,
            condCompleted: false,
            typ: 0,
            hidden: false,
            used: false,
            longTime: false
        },
        ctors: {
            ctor: function (nme, nm, con, cn, t, h) {
                this.$initialize();
                this.name = nme;
                this.value = nm;
                this.typ = t;
                this.condition = con;
                this.condnum = cn;
                this.hidden = h;
                if (!Bridge.referenceEquals(this.condition, "")) {
                    this.condCompleted = false;
                } else {
                    this.condCompleted = true;
                }
                this.used = false;
                this.longTime = System.Array.indexOfT(DarkKingdomCore.MyGame.longTimeConds, this.condition) > -1;
            }
        }
    });

    Bridge.define("DarkKingdomCore.Achievement", {
        fields: {
            name: null,
            uIcon: null,
            booty: null
        },
        ctors: {
            init: function () {
                this.uIcon = new MonoInterface.Appearance();
            },
            ctor: function (nam, ui, boty) {
                this.$initialize();
                this.name = nam;
                this.uIcon = ui.$clone();
                this.booty = boty;
            }
        }
    });

    Bridge.define("DarkKingdomCore.Ammo", {
        fields: {
            x: 0,
            y: 0,
            vx: 0,
            vy: 0,
            ay: 0,
            type: 0,
            target: null,
            dmg: 0,
            ignoreArmor: false,
            agil: false,
            lifetime: 0,
            stock: false,
            plr: 0,
            owner: null,
            img: 0,
            explosive: false
        },
        ctors: {
            init: function () {
                this.stock = false;
            },
            $ctor1: function (pl, t, xx, yy, vxx, vyy, ayy, ownabils, trg, d, ia, ag, ltime, exp) {
                if (exp === void 0) { exp = false; }

                this.$initialize();
                this.x = xx;
                this.y = yy;
                this.vx = vxx;
                this.vy = vyy;
                this.ay = ayy;
                this.target = trg;
                this.type = t;
                this.dmg = d;
                this.ignoreArmor = ia;
                this.agil = ag;
                this.lifetime = ltime;
                this.plr = pl;
                this.explosive = exp;
            },
            ctor: function (pl, t, xx, yy, own, trg, d, ia, ag, ltime, exp) {
                if (exp === void 0) { exp = false; }

                this.$initialize();
                var tt;
                var a = 0.1;
                this.plr = pl;
                switch (t) {
                    case DarkKingdomCore.Ammo.AmmoType.Arrow: 
                        {
                            this.vx = 4;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.BigArrow: 
                        {
                            this.vx = 2;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.Bomb: 
                        {
                            this.vx = 1.5;
                            this.img = 1;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.BlueBall: 
                        {
                            this.vx = 3;
                            a = 0.03;
                            this.img = 2;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.RedBall: 
                        {
                            this.vx = 3;
                            a = 0.03;
                            this.img = 0;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.VioletBall: 
                        {
                            this.vx = 3;
                            a = 0.03;
                            this.img = 3;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.GreenBall: 
                        {
                            this.vx = 3;
                            a = 0.03;
                            this.img = 5;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.FastArrow: 
                        {
                            this.vx = 4;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.Bullet: 
                        {
                            a = 0;
                            this.vx = 6;
                            this.img = 6;
                            break;
                        }
                    case DarkKingdomCore.Ammo.AmmoType.Hammer: 
                        {
                            this.vx = 1.5;
                            this.img = 4;
                            break;
                        }
                }
                this.explosive = exp;
                this.x = xx;
                this.y = yy;
                this.vx *= Bridge.Int.sign(trg.x - xx);
                this.owner = own;
                this.target = trg;
                this.type = t;
                this.dmg = d;
                this.ignoreArmor = ia;
                this.agil = ag;
                this.lifetime = ltime;
                if (trg.x !== xx) {
                    tt = (trg.x - xx) / this.vx;
                    this.vy = (((((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0) + 15) | 0) - yy) / tt - a * tt / 2;
                } else {
                    this.vy = -1;
                }
                this.ay = a;
            }
        }
    });

    Bridge.define("DarkKingdomCore.Ammo.AmmoType", {
        $kind: "nested enum",
        statics: {
            fields: {
                None: 0,
                Arrow: 1,
                BigArrow: 2,
                Bomb: 3,
                BlueBall: 4,
                RedBall: 5,
                VioletBall: 6,
                GreenBall: 7,
                Bullet: 8,
                FastArrow: 9,
                Hammer: 10
            }
        }
    });

    Bridge.define("DarkKingdomCore.Attack", {
        $kind: "struct",
        statics: {
            methods: {
                op_Addition$1: function (atk, val) {
                    return new DarkKingdomCore.Attack.$ctor1(((atk.MinDamage + val) | 0), ((atk.MaxDamage + val) | 0), atk.Range, atk.Speed);
                },
                op_Addition: function (atk1, atk2) {
                    return new DarkKingdomCore.Attack.$ctor1(((atk1.MinDamage + atk2.MinDamage) | 0), ((atk1.MaxDamage + atk2.MaxDamage) | 0), ((atk1.Range + atk2.Range) | 0), atk1.Speed);
                },
                op_Subtraction$1: function (atk, val) {
                    return new DarkKingdomCore.Attack.$ctor1(((atk.MinDamage - val) | 0), ((atk.MaxDamage - val) | 0), atk.Range, atk.Speed);
                },
                op_Subtraction: function (atk1, atk2) {
                    return new DarkKingdomCore.Attack.$ctor1(((atk1.MinDamage - atk2.MinDamage) | 0), ((atk1.MaxDamage - atk2.MaxDamage) | 0), ((atk1.Range - atk2.Range) | 0), atk1.Speed);
                },
                op_Multiply: function (atk, val) {
                    return new DarkKingdomCore.Attack.$ctor1(Bridge.Int.mul(atk.MinDamage, val), Bridge.Int.mul(atk.MaxDamage, val), atk.Range, atk.Speed);
                },
                getDefaultValue: function () { return new DarkKingdomCore.Attack(); }
            }
        },
        fields: {
            MinDamage: 0,
            MaxDamage: 0,
            Range: 0,
            Speed: 0
        },
        ctors: {
            $ctor1: function (mnd, mxd, range, speed) {
                this.$initialize();
                this.MinDamage = mnd;
                this.MaxDamage = mxd;
                this.Range = range;
                this.Speed = speed;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1635049380, this.MinDamage, this.MaxDamage, this.Range, this.Speed]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, DarkKingdomCore.Attack)) {
                    return false;
                }
                return Bridge.equals(this.MinDamage, o.MinDamage) && Bridge.equals(this.MaxDamage, o.MaxDamage) && Bridge.equals(this.Range, o.Range) && Bridge.equals(this.Speed, o.Speed);
            },
            $clone: function (to) {
                var s = to || new DarkKingdomCore.Attack();
                s.MinDamage = this.MinDamage;
                s.MaxDamage = this.MaxDamage;
                s.Range = this.Range;
                s.Speed = this.Speed;
                return s;
            }
        }
    });

    Bridge.define("DarkKingdomCore.EffectType", {
        $kind: "enum",
        statics: {
            fields: {
                Normal: 0,
                Bad: 1,
                Poison: 2,
                Good: 3
            }
        }
    });

    Bridge.define("DarkKingdomCore.GameState", {
        $kind: "enum",
        statics: {
            fields: {
                MainMenu: 0,
                PrePlay: 1,
                InGame: 2,
                Win: 3,
                Lose: 4
            }
        }
    });

    Bridge.define("DarkKingdomCore.GameType", {
        $kind: "enum",
        statics: {
            fields: {
                RandomGT: 0,
                StandartGT: 1,
                OffenceGT: 2,
                DefenceGT: 3,
                FirstHeroGT: 4
            }
        }
    });

    Bridge.define("DarkKingdomCore.Particle", {
        fields: {
            x: 0,
            y: 0,
            dx: 0,
            dy: 0,
            ltime: 0,
            pType: 0,
            a: 0,
            ast: 0,
            ay: 0
        }
    });

    Bridge.define("DarkKingdomCore.LandscapeType", {
        $kind: "enum",
        statics: {
            fields: {
                PlainLS: 0,
                DesertLS: 1,
                SwampLS: 2,
                DeathlandLS: 3,
                MechanicsLS: 4,
                ForestLS: 5,
                InfernoLS: 6
            }
        }
    });

    Bridge.define("DarkKingdomCore.MatchCondition", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new DarkKingdomCore.MatchCondition(); }
            }
        },
        fields: {
            name: null,
            res1: null,
            res2: null,
            income: 0,
            ipt: 0
        },
        ctors: {
            init: function () {
                this.res1 = new DarkKingdomCore.TimeCost();
                this.res2 = new DarkKingdomCore.TimeCost();
            },
            $ctor1: function (nme, r1, r2, inc, ip) {
                this.$initialize();
                this.name = nme;
                this.res1 = r1.$clone();
                this.res2 = r2.$clone();
                this.income = inc;
                this.ipt = ip;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5290622088, this.name, this.res1, this.res2, this.income, this.ipt]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, DarkKingdomCore.MatchCondition)) {
                    return false;
                }
                return Bridge.equals(this.name, o.name) && Bridge.equals(this.res1, o.res1) && Bridge.equals(this.res2, o.res2) && Bridge.equals(this.income, o.income) && Bridge.equals(this.ipt, o.ipt);
            },
            $clone: function (to) {
                var s = to || new DarkKingdomCore.MatchCondition();
                s.name = this.name;
                s.res1 = this.res1.$clone();
                s.res2 = this.res2.$clone();
                s.income = this.income;
                s.ipt = this.ipt;
                return s;
            }
        }
    });

    Bridge.define("DarkKingdomCore.MyGame", {
        statics: {
            fields: {
                elapse_Periodically: 0,
                goodAbilClr: null,
                badAbilClr: null,
                poiAbilClr: null,
                loc: null,
                rnd: null,
                gameWidth: 0,
                gameHeight: 0,
                hor: 0,
                unitPrms: null,
                sprites: null,
                allAbils: null,
                allConds: null,
                plrs: null,
                units: null,
                gState: 0,
                pars: null,
                uipars: null,
                cloudpars: null,
                backpars: null,
                bushpars: null,
                longTimeConds: null,
                frmFillTex: null,
                btnFillTex: null,
                btnSelectTex: null,
                btnHlTex: null,
                btnPressedTex: null,
                btnDisabledTex: null,
                prgFillTex: null,
                prgBarTex: null,
                hlbtncolor: null,
                disbtnbrush: null
            },
            ctors: {
                init: function () {
                    this.goodAbilClr = new Microsoft.Xna.Framework.Color();
                    this.badAbilClr = new Microsoft.Xna.Framework.Color();
                    this.poiAbilClr = new Microsoft.Xna.Framework.Color();
                    this.hlbtncolor = new Microsoft.Xna.Framework.Color();
                    this.disbtnbrush = new Microsoft.Xna.Framework.Color();
                    this.elapse_Periodically = 1;
                    this.badAbilClr = Microsoft.Xna.Framework.Color.DarkViolet.$clone();
                    this.poiAbilClr = Microsoft.Xna.Framework.Color.DarkViolet.$clone();
                    this.loc = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                    this.rnd = new System.Random.ctor();
                    this.gameWidth = 800;
                    this.gameHeight = 480;
                    this.unitPrms = new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.UnitParameters)).ctor();
                    this.sprites = new (System.Collections.Generic.Dictionary$2(System.String,MonoInterface.Sprite)).ctor();
                    this.allAbils = new (System.Collections.Generic.List$1(System.String)).ctor();
                    this.allConds = new (System.Collections.Generic.List$1(System.String)).ctor();
                    this.plrs = System.Array.init(2, null, DarkKingdomCore.Player);
                    this.units = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                    this.pars = new (System.Collections.Generic.List$1(DarkKingdomCore.Particle)).ctor();
                    this.uipars = new (System.Collections.Generic.List$1(DarkKingdomCore.Particle)).ctor();
                    this.cloudpars = new (System.Collections.Generic.List$1(DarkKingdomCore.ImageParticle)).ctor();
                    this.backpars = new (System.Collections.Generic.List$1(DarkKingdomCore.ImageParticle)).ctor();
                    this.bushpars = new (System.Collections.Generic.List$1(DarkKingdomCore.ImageParticle)).ctor();
                    this.longTimeConds = System.Array.init(["Tier", "Machine army"], System.String);
                    this.hlbtncolor = Microsoft.Xna.Framework.Color.WhiteSmoke.$clone();
                    this.disbtnbrush = new Microsoft.Xna.Framework.Color.$ctor7(120, 75, 75, 75);
                }
            },
            methods: {
                SelectPlayingRace: function (uList) {
                    var $t;
                    var tmpdic = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32)).ctor();
                    var maxrace = "";
                    var maxcnt = 0;
                    $t = Bridge.getEnumerator(uList);
                    try {
                        while ($t.moveNext()) {
                            var u = $t.Current;
                            if (tmpdic.containsKey(DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Race)) {
                                tmpdic.setItem(DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Race, (tmpdic.getItem(DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Race) + 1) | 0);
                            } else {
                                tmpdic.add(DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Race, 1);
                            }
                            if (tmpdic.getItem(DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Race) > maxcnt) {
                                maxcnt = tmpdic.getItem(DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Race);
                                maxrace = DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Race;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return maxrace;
                },
                FillRectangle$1: function (sb, tex, x, y, w, h) {
                    sb.Draw(tex, new Microsoft.Xna.Framework.Rectangle.$ctor2(x, y, w, h), Microsoft.Xna.Framework.Color.White.$clone());
                },
                FillRectangle: function (sb, tex, rect) {
                    sb.Draw(tex, new Microsoft.Xna.Framework.Rectangle.$ctor2(rect.X, rect.Y, rect.Width, rect.Height), Microsoft.Xna.Framework.Color.White.$clone());
                }
            }
        },
        fields: {
            AppFolder: null,
            DataFolder: null,
            graphics: null,
            spriteBatch: null,
            Fonts: null,
            localize: null,
            oldMouseState: null,
            Platform: null,
            isLoaded: false,
            landBmp: null,
            curProfile: 0,
            sunAng: 0,
            dAng: 0,
            gType: 0,
            gamelandscape: 0,
            landsTypesCount: 0,
            ammos: null,
            spells: null,
            pdeathlist: null,
            lifeClr: null,
            abilClr: null,
            backClr: null,
            condClr: null,
            unitSize: 0,
            us2: 0,
            csS: 0,
            snS: 0,
            csD: 0,
            snD: 0,
            skyR: 0,
            skyB: 0,
            skyG: 0,
            skyR2: 0,
            skyB2: 0,
            skyG2: 0,
            cnstR: 0,
            cnstG: 0,
            cnstB: 0,
            cnstR2: 0,
            cnstG2: 0,
            cnstB2: 0,
            stars: null,
            skyrect: null,
            starsCnt: 0,
            _pause: false,
            startBuildingsList: null,
            curM: 0,
            curD: 0,
            selU: null,
            deltax: 0,
            deltay: 0,
            deathlist: null,
            flyHeight: 0,
            piece: 0,
            conds: null,
            races1: null,
            races2: null,
            edunits: null,
            symbols: null,
            ispllmod: false,
            spellName: null,
            starTex: null,
            sunsetclr: null,
            machinenum: 0,
            bornList: null,
            oldsnS: 0,
            globalExplode: 0,
            unlockedUnits: null,
            unlockedAchivs: null,
            updateSpells: false,
            moneyClr: null,
            deathClr: null,
            AllUntsList: null,
            startAutofight: false,
            achivs: null,
            purchases: null,
            standartRaces: null,
            preGameUnits: null,
            preGameSpells: null,
            preGameBonus: null,
            preGameSlotCnt: 0,
            menuCarousel: null,
            curCarouselPos: 0,
            numKeys: null,
            unitsPreGame: null,
            spellsPreGame: null,
            taskConfirm: null,
            backFillTex: null,
            healthBarBackTex: null,
            healthBarLifeTex: null,
            healthBarPoisonTex: null,
            healthBarAbilTex: null,
            skytexture: null,
            sunsettexture: null,
            _screenWidth: 0,
            _screenHeight: 0,
            scaleX: 0,
            scaleY: 0,
            listeningKeys: null,
            oldKeyboardState: null,
            MainContainer: null,
            mainAnimator: null,
            defaultTheme: null,
            backTheme: null,
            frmConfirm: null,
            lblTextFrmConfirm: null,
            btnOkayFrmDialogConfirm: null,
            btnNopeFrmDialogConfirm: null,
            frmSettings: null,
            resSwitcherFrmSettings: null,
            frmMainMenu: null,
            frmBattleMenu: null,
            lblAIFrmBattleMenu: null,
            frmRightMenu: null,
            frmDialog: null,
            lblTitlefrmDialog: null,
            lblLine1FrmDialog: null,
            lblLine2FrmDialog: null,
            frmResources: null,
            pctTierFrmResources: null,
            pctPauseFrmResources: null,
            lblGoldFrmResources: null,
            lblDeathFrmResources: null,
            btnTierUpFrmResources: null,
            lblsFrmCustomRacesList: null,
            btnsFrmCustomRacesList: null,
            frmProfile: null,
            lblsfrmProfile: null,
            frmBack: null,
            frmBattle: null,
            races1SwitcherFrmBattle: null,
            races2SwitcherFrmBattle: null,
            modeSwitcherFrmBattle: null,
            frmUnits: null,
            frmProduction: null,
            prgsProduction: null,
            frmPreGame: null,
            btnsProduction: null,
            cUnits: null,
            cSpells: null,
            cBuildings: null,
            btnSelectUnits: null,
            btnSelectSpells: null,
            btnSelectBuildings: null,
            cBattleParameters: null,
            lblUnitNameHelpUnit: null,
            lblRaceHelpUnit: null,
            lblCostMoneyHelpUnit: null,
            lblCostDeathHelpUnit: null,
            lblAttackBasicParams: null,
            pctAttackBasicParams: null,
            lblsBasicParams: null,
            lblsAbils: null,
            frmHelp: null,
            lblVsPreGame: null,
            cUnitsPreGame: null,
            cSpellsPreGame: null,
            cBuildingsPreGame: null,
            cSelectedPreGame: null,
            btnFightPreGame: null,
            btnUnitsPreGame: null,
            btnSpellsPreGame: null,
            btnBuildingsPreGame: null,
            screenFormats: null
        },
        events: {
            OnExit: null
        },
        props: {
            inSpellMode: {
                get: function () {
                    return this.ispllmod;
                },
                set: function (value) {
                    this.ispllmod = value;
                    if (value) {
                    } else {
                    }
                }
            },
            Pause: {
                get: function () {
                    return this._pause;
                },
                set: function (value) {
                    this._pause = value;
                    if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame) {
                        if (this._pause) {
                            this.pctPauseFrmResources.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("medium_icons"), 8);
                            this.frmBattleMenu.Show(this.mainAnimator);
                        } else {
                            this.pctPauseFrmResources.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("medium_icons"), 1);
                            this.frmBattleMenu.Hide(this.mainAnimator);
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.oldMouseState = new Microsoft.Xna.Framework.Input.MouseState();
                this.lifeClr = new Microsoft.Xna.Framework.Color();
                this.abilClr = new Microsoft.Xna.Framework.Color();
                this.backClr = new Microsoft.Xna.Framework.Color();
                this.condClr = new Microsoft.Xna.Framework.Color();
                this.skyrect = new Microsoft.Xna.Framework.Rectangle();
                this.sunsetclr = new Microsoft.Xna.Framework.Color();
                this.moneyClr = new Microsoft.Xna.Framework.Color();
                this.deathClr = new Microsoft.Xna.Framework.Color();
                this.oldKeyboardState = new Microsoft.Xna.Framework.Input.KeyboardState();
                this.isLoaded = false;
                this.landsTypesCount = 7;
                this.ammos = new (System.Collections.Generic.List$1(DarkKingdomCore.Ammo)).ctor();
                this.spells = new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.Spell)).ctor();
                this.pdeathlist = new (System.Collections.Generic.List$1(DarkKingdomCore.Particle)).ctor();
                this.lifeClr = new Microsoft.Xna.Framework.Color.$ctor7(255, 0, 0, 200);
                this.abilClr = new Microsoft.Xna.Framework.Color.$ctor7(0, 0, 255, 200);
                this.backClr = new Microsoft.Xna.Framework.Color.$ctor7(255, 255, 255, 150);
                this.condClr = new Microsoft.Xna.Framework.Color.$ctor6(100, 100, 100);
                this.unitSize = 30;
                this.us2 = 15;
                this.cnstR = 50;
                this.cnstG = 130;
                this.cnstB = 200;
                this.cnstR2 = 120;
                this.cnstG2 = 190;
                this.cnstB2 = 230;
                this.startBuildingsList = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.deathlist = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                this.flyHeight = 48;
                this.piece = 0.03926991;
                this.conds = new (System.Collections.Generic.List$1(DarkKingdomCore.MatchCondition)).ctor();
                this.edunits = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.symbols = System.Array.init(4, function (){
                    return new Microsoft.Xna.Framework.Rectangle();
                }, Microsoft.Xna.Framework.Rectangle);
                this.ispllmod = false;
                this.spellName = "";
                this.sunsetclr = Microsoft.Xna.Framework.Color.OrangeRed.$clone();
                this.bornList = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                this.globalExplode = 0;
                this.unlockedUnits = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.unlockedAchivs = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.updateSpells = false;
                this.moneyClr = Microsoft.Xna.Framework.Color.Chocolate.$clone();
                this.deathClr = Microsoft.Xna.Framework.Color.RoyalBlue.$clone();
                this.AllUntsList = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.startAutofight = false;
                this.achivs = new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.Achievement)).ctor();
                this.purchases = new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.Purchase)).ctor();
                this.standartRaces = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.preGameUnits = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.preGameSpells = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.preGameBonus = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.preGameSlotCnt = 10;
                this.curCarouselPos = 0;
                this.numKeys = System.Array.init([Microsoft.Xna.Framework.Input.Keys.D1, Microsoft.Xna.Framework.Input.Keys.D2, Microsoft.Xna.Framework.Input.Keys.D3, Microsoft.Xna.Framework.Input.Keys.D4, Microsoft.Xna.Framework.Input.Keys.D5, Microsoft.Xna.Framework.Input.Keys.D6, Microsoft.Xna.Framework.Input.Keys.D7], Microsoft.Xna.Framework.Input.Keys);
                this.unitsPreGame = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.spellsPreGame = new (System.Collections.Generic.List$1(System.String)).ctor();
                this._screenWidth = 800;
                this._screenHeight = 480;
                this.scaleX = 1.0;
                this.scaleY = 1.0;
                this.listeningKeys = System.Array.init([Microsoft.Xna.Framework.Input.Keys.Enter, Microsoft.Xna.Framework.Input.Keys.Escape, Microsoft.Xna.Framework.Input.Keys.Left, Microsoft.Xna.Framework.Input.Keys.Right, Microsoft.Xna.Framework.Input.Keys.D1, Microsoft.Xna.Framework.Input.Keys.D2, Microsoft.Xna.Framework.Input.Keys.D3, Microsoft.Xna.Framework.Input.Keys.D4, Microsoft.Xna.Framework.Input.Keys.D5, Microsoft.Xna.Framework.Input.Keys.D6, Microsoft.Xna.Framework.Input.Keys.D7], Microsoft.Xna.Framework.Input.Keys);
                this.prgsProduction = System.Array.init(7, null, MonoInterface.Progress);
                this.btnsProduction = System.Array.init(7, null, MonoInterface.Button);
                this.lblsBasicParams = System.Array.init(3, null, MonoInterface.Label);
                this.lblsAbils = System.Array.init(6, null, MonoInterface.LongLabel);
            },
            ctor: function (platform) {
                this.$initialize();
                System.Object.call(this);
                this.Platform = platform;
                this.Fonts = new (System.Collections.Generic.List$1(System.ValueTuple$2(System.Int32,Microsoft.Xna.Framework.Graphics.SpriteFont))).ctor();
            }
        },
        methods: {
            LoadData: function (content) {
                System.Console.WriteLine("Start Localize");
                this.ReadLocalize();
                System.Console.WriteLine("Start Loading");

                this.ReadFonts(content);
                this.ReadSprites(content);
                this.ReadUnitsParams();
                this.ReadSpells();
                this.ReadRaces();

                System.Console.WriteLine("Start Initializing");

                this.Initialize();
            },
            LoadJSON: function (T, fname) {
                var file_reader = new System.IO.StreamReader.$ctor9(System.String.format("{0}/{1}", this.DataFolder, fname), System.Text.Encoding.UTF8);
                try {
                    var json = file_reader.ReadToEnd();
                    return Newtonsoft.Json.JsonConvert.DeserializeObject(json, T);
                }
                finally {
                    if (Bridge.hasValue(file_reader)) {
                        file_reader.System$IDisposable$Dispose();
                    }
                }
            },
            ReadFonts: function (content) {
                var $t;
                var fonts = this.LoadJSON(System.Array.type(System.String), "fonts.json");
                $t = Bridge.getEnumerator(fonts);
                try {
                    while ($t.moveNext()) {
                        var filename = $t.Current;
                        this.Fonts.add(new (System.ValueTuple$2(System.Int32,Microsoft.Xna.Framework.Graphics.SpriteFont)).$ctor1(System.Int32.parse(filename.substr(3)), content.Load(Microsoft.Xna.Framework.Graphics.SpriteFont, System.String.format("Fonts/{0}", [filename]))));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                //#endif
            },
            ReadRaces: function () {
                var $t;
                var races_def = this.LoadJSON(System.Array.type(DarkKingdomCore.Race), "races.json");
                $t = Bridge.getEnumerator(races_def);
                try {
                    while ($t.moveNext()) {
                        var race = $t.Current;
                        DarkKingdomCore.RaceManager.Instance.All.add(race.name, race);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            ReadSpells: function () {
                var $t;
                var spells_def = this.LoadJSON(System.Array.type(DarkKingdomCore.Spell), "spells.json");
                $t = Bridge.getEnumerator(spells_def);
                try {
                    while ($t.moveNext()) {
                        var spell = $t.Current;
                        this.spells.add(spell.Name, spell);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            ReadUnitsParams: function () {
                var $t, $t1, $t2;
                var units_def = this.LoadJSON(System.Array.type(DarkKingdomCore.UnitParameters), "units.json");
                $t = Bridge.getEnumerator(units_def);
                try {
                    while ($t.moveNext()) {
                        var unit = $t.Current.$clone();
                        var new_unit = unit.$clone();
                        new_unit.spriteName = unit.Name.toLowerCase();
                        new_unit.animated = DarkKingdomCore.MyGame.sprites.getItem(unit.Name.toLowerCase()).Ranges.containsKey("Attack");
                        new_unit.iconApp = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("unit_icons"), new_unit.iconInd);
                        new_unit.abils = new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.Ability)).ctor();
                        if (new_unit.rawAbils != null) {
                            $t1 = Bridge.getEnumerator(new_unit.rawAbils);
                            try {
                                while ($t1.moveNext()) {
                                    var abil = $t1.Current;
                                    new_unit.abils.add(abil.name, abil);
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                        }
                        if (unit.size.w > 0) {
                            new_unit.rect = new Microsoft.Xna.Framework.Rectangle.$ctor2(((Bridge.Int.div(((-unit.size.w) | 0), 2)) | 0), ((-unit.size.h) | 0), unit.size.w, unit.size.h);
                        } else {
                            new_unit.rect = new Microsoft.Xna.Framework.Rectangle.$ctor2(((-this.us2) | 0), ((-this.unitSize) | 0), this.unitSize, this.unitSize);
                        }
                        new_unit.isBuilding = new_unit.abils.containsKey("Building");
                        if (new_unit.abils.containsKey("Unique") || new_unit.abils.containsKey("Heroic")) {
                            new_unit.maxLimit = 1;
                        } else if (new_unit.abils.containsKey("Elite")) {
                            new_unit.maxLimit = 3;
                        }
                        new_unit.isHeroic = new_unit.abils.containsKey("Heroic");
                        if (new_unit.abils.containsKey("Huge")) {
                            new_unit.moveType = DarkKingdomCore.UnitMoveType.HugeMT;
                        } else if (new_unit.abils.containsKey("Flying")) {
                            new_unit.moveType = DarkKingdomCore.UnitMoveType.FlyingMT;
                        } else {
                            new_unit.moveType = DarkKingdomCore.UnitMoveType.GroundMT;
                        }
                        var remAbils = System.Array.init(["Heroic", "Unique", "Elite", "Flying", "Huge", ""], System.String);
                        $t2 = Bridge.getEnumerator(remAbils);
                        try {
                            while ($t2.moveNext()) {
                                var ab = $t2.Current;
                                if (new_unit.abils.containsKey(ab)) {
                                    new_unit.abils.remove(ab);
                                }
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                        if (unit.isStartBuilding) {
                            this.startBuildingsList.add(unit.Name);
                        }
                        DarkKingdomCore.MyGame.unitPrms.add(unit.Name, new_unit.$clone());
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            ReadSprites: function (content) {
                var $t;
                var sprites_def = this.LoadJSON(System.Array.type(MonoInterface.Sprite), "sprites.json");
                $t = Bridge.getEnumerator(sprites_def);
                try {
                    while ($t.moveNext()) {
                        var sprite = $t.Current;
                        sprite.Texture = content.Load(Microsoft.Xna.Framework.Graphics.Texture2D, System.String.format("Sprites/{0}", [sprite.Name]));
                        System.Console.WriteLine(System.String.format("Sprite '{0}' loaded", [sprite.Name]));
                        DarkKingdomCore.MyGame.sprites.add(sprite.Name, sprite);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            ReadLocalize: function () {
                var $t;
                var loaded = this.LoadJSON(System.Collections.Generic.Dictionary$2(System.String,System.String), "localize-ru.json");
                var result = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                $t = Bridge.getEnumerator(loaded);
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        var is_fallback = System.String.contains(kvp.value,"\ufffd");
                        result.add(kvp.key, System.String.replaceAll(kvp.value, String.fromCharCode(65533), String.fromCharCode(63)));
                        if (is_fallback) {
                            System.Console.WriteLine(kvp.value);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.localize = new MonoInterface.Localization("\u0420\u0443\u0441\u0441\u043a\u0438\u0439", result);
            },
            Explode: function (u, ignoreArmor) {
                var $t, $t1;
                var bonus = 1;
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var uu = $t.Current;
                        if (uu.AbsContains("Explode_bonus")) {
                            bonus = Bridge.Int.mul(bonus, 3);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t1.moveNext()) {
                        var uu1 = $t1.Current;
                        if (u.Near(uu1)) {
                            if (!uu1.AbsContains("Explode_protect")) {
                                this.Harm(uu1, Bridge.Int.mul(DarkKingdomCore.MyGame.rnd.Next$2(70, 101), bonus), ignoreArmor, DarkKingdomCore.EffectType.Normal);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
                if (ignoreArmor) {
                    DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 3), u.x - 25, ((((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) - this.us2) | 0) - 25) | 0), 0, 0, 20));
                } else {
                    DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 0), u.x - 25, ((((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) - this.us2) | 0) - 25) | 0), 0, 0, 20));
                }
            },
            Heal: function (u, val, repair) {
                if (repair === void 0) { repair = false; }
                if (u.hp < u.parameters.maxhp && !u.AbsContains$1(["Bodyless", "Nonhealing_wounds", "Building"]) && (!u.AbsContains("Machinery") || repair)) {
                    var realval = Math.min(val, u.parameters.maxhp - u.hp);
                    u.hp += realval;
                    this.ShowInfoPar(System.String.format("+{0}", [realval]), DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), false);
                    if (!repair && u.AbsContains("Life_rollback")) {
                        u.Attack = DarkKingdomCore.Attack.op_Addition$1(u.Attack.$clone(), (u.abils.getItem("Life_rollback").value) | 0);
                    }
                }
            },
            Harm: function (u, val, ignorearmor, dt) {
                var $t;
                if (!u.AbsContains("Invulnerable")) {
                    if (!ignorearmor) {
                        val *= u.parameters._armor;
                    }
                    if (val < 1) {
                        val = 1;
                    }
                    u.hp -= val;
                    switch (dt) {
                        case DarkKingdomCore.EffectType.Normal: 
                            {
                                this.ShowInfoPar("-" + (System.Single.format(val) || ""), Microsoft.Xna.Framework.Color.Red.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), false);
                                break;
                            }
                        case DarkKingdomCore.EffectType.Bad: 
                            {
                                this.ShowInfoPar("-" + (System.Single.format(val) || ""), DarkKingdomCore.MyGame.badAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), false);
                                break;
                            }
                        case DarkKingdomCore.EffectType.Poison: 
                            {
                                this.ShowInfoPar("-" + (System.Single.format(val) || ""), DarkKingdomCore.MyGame.poiAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), false);
                                break;
                            }
                    }
                    if (u.AbsContains("Invisible")) {
                        this.Deinvisible(u);
                    }
                    $t = Bridge.getEnumerator(u.abils.Values);
                    try {
                        while ($t.moveNext()) {
                            var a = $t.Current;
                            if (Bridge.referenceEquals(a.condition, "On_harm") && !a.used) {
                                a.condCompleted = true;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (u.AbsContains("Damage_mirror") && DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].heroUnit != null) {
                        this.Harm(DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].heroUnit, val, true, DarkKingdomCore.EffectType.Bad);
                    }
                } else {
                    this.ShowInfoPar("0", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), false);
                }
            },
            Deinvisible: function (u) {
                u.abils.getItem("Invisible").used = true;
                DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 2), u.x - 25, ((((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) - this.us2) | 0) - 25) | 0), 0, 0, 20));
            },
            SetPlayers: function () {
                DarkKingdomCore.MyGame.plrs[0] = new DarkKingdomCore.Player(this, 0, false, 30);
                DarkKingdomCore.MyGame.plrs[1] = new DarkKingdomCore.Player(this, 1, true, 30);

                DarkKingdomCore.MyGame.plrs[0].moveside = 1;
                DarkKingdomCore.MyGame.plrs[1].moveside = -1;
            },
            UpdateQueue: function () {
                for (var i = 0; i <= 6; i = (i + 1) | 0) {
                    var btn = this.btnsProduction[i];
                    if (i < DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) {
                        btn.Visible = true;
                        (Bridge.as(btn.Children.getItem(0), MonoInterface.Picture)).spriteRef = DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].readyUnits.getItem(i)).$clone().iconApp.$clone();
                        btn.Children.getItem(1).Visible = true;
                        this.prgsProduction[i].CurrentValue = 0;
                    } else if (((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0) < DarkKingdomCore.MyGame.plrs[0].prdQ.Count) {
                        btn.Visible = true;
                        btn.Children.getItem(1).Visible = false;
                        (Bridge.as(btn.Children.getItem(0), MonoInterface.Picture)).spriteRef = DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].prdQ.getItem(((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0))).$clone().iconApp.$clone();
                        if (i === DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) {
                            this.prgsProduction[i].CurrentValue = DarkKingdomCore.MyGame.plrs[0].prdPrg;
                            this.prgsProduction[i].MaxValue = DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].prdQ.getItem(0)).$clone().Cost.Time;
                        } else {
                            this.prgsProduction[i].CurrentValue = 0;
                        }
                    } else {
                        btn.Visible = false;
                    }
                }
                if (DarkKingdomCore.MyGame.plrs[0].prdQ.Count === 0 && DarkKingdomCore.MyGame.plrs[0].readyUnits.Count === 0) {
                    this.frmProduction.Hide(this.mainAnimator);
                } else {
                    this.frmProduction.Show(this.mainAnimator);
                }
            },
            UpdateResources: function () {
                this.lblGoldFrmResources.Text = Bridge.toString(this.curM);
                this.lblDeathFrmResources.Text = Bridge.toString(this.curD);

                for (var i = 0; i < DarkKingdomCore.MyGame.plrs[0].unitsList.Count; i = (i + 1) | 0) {
                    (Bridge.as(this.cUnits.Children.getItem(i), MonoInterface.Button)).IsDisabled = !DarkKingdomCore.MyGame.plrs[0].CheckForProduce(DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(i));
                }

                var tier = DarkKingdomCore.MyGame.plrs[0].res.Tier === 1 ? "Tier_2" : "Tier_3";
                this.btnTierUpFrmResources.IsDisabled = !DarkKingdomCore.MyGame.plrs[0].res.EnoughFor(DarkKingdomCore.MyGame.unitPrms.getItem(tier).$clone().Cost.$clone()) || DarkKingdomCore.MyGame.plrs[0].prdQ.contains(tier) || DarkKingdomCore.MyGame.plrs[0].res.Tier === 3;

                for (var i1 = 0; i1 < DarkKingdomCore.MyGame.plrs[0].spllsList.Count; i1 = (i1 + 1) | 0) {
                    (Bridge.as(this.cSpells.Children.getItem(i1), MonoInterface.Button)).IsDisabled = !DarkKingdomCore.MyGame.plrs[0].res.EnoughFor(this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(i1)).Cost.$clone());
                }
            },
            OnDead: function (u) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12;
                $t = Bridge.getEnumerator(u.abils.Values);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        if (Bridge.referenceEquals(a.condition, "On_death")) {
                            a.condCompleted = true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.OnUnitsAbils(u);
                if (!u.parameters.isBuilding) {
                    var needInfo;
                    $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t1.moveNext()) {
                            var uu = $t1.Current;
                            needInfo = false;
                            if (!Bridge.referenceEquals(uu, u)) {
                                if (uu.AbsContains("Death_reaper")) {
                                    uu.Attack = DarkKingdomCore.Attack.op_Addition$1(uu.Attack.$clone(), (uu.abils.getItem("Death_reaper").value) | 0);
                                    needInfo = true;
                                }
                                $t2 = Bridge.getEnumerator(uu.abils.Values);
                                try {
                                    while ($t2.moveNext()) {
                                        var a1 = $t2.Current;
                                        if (Bridge.referenceEquals(a1.condition, "Death")) {
                                            a1.condnum = (a1.condnum - 1) | 0;
                                            if (a1.condnum === 0) {
                                                a1.condition = "";
                                                a1.condCompleted = true;
                                            }
                                            needInfo = true;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                                if (uu.AbsContains("Spawn_ghosts") && !u.AbsContains("Bodyless")) {
                                    var allunitst = new (System.Collections.Generic.List$1(System.String)).ctor();
                                    var nu;
                                    $t3 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                                    try {
                                        while ($t3.moveNext()) {
                                            var up = $t3.Current.$clone();
                                            if (!up.special) {
                                                if (up.AbsContains("Bodyless") && up.Cost.Tier === u.parameters.Cost.Tier && DarkKingdomCore.MyGame.plrs[uu.owner].CheckForLimit(up.Name)) {
                                                    allunitst.add(up.Name);
                                                }
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t3, System.IDisposable)) {
                                            $t3.System$IDisposable$Dispose();
                                        }
                                    }
                                    if (allunitst.Count > 0) {
                                        nu = ($t4 = new DarkKingdomCore.Unit(this, uu.x + uu.moveside, uu.moveside, uu.owner, DarkKingdomCore.MyGame.unitPrms.getItem(allunitst.getItem(DarkKingdomCore.MyGame.rnd.Next$2(0, allunitst.Count))).$clone()), $t4.hp = DarkKingdomCore.MyGame.rnd.Next$2(70, 101), $t4);
                                        this.Harm(uu, nu.hp, true, DarkKingdomCore.EffectType.Bad);
                                        this.bornList.add(nu);
                                        needInfo = true;
                                    }
                                }
                                if (needInfo) {
                                    this.ShowInfoPar("\u0421\u043c\u0435\u0440\u0442\u044c!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                                }
                            }
                            if (uu.owner !== u.owner && uu.AbsContains("Looter") && u.Near(uu)) {
                                DarkKingdomCore.MyGame.plrs[uu.owner].Resources = DarkKingdomCore.TimeCost.op_Addition(DarkKingdomCore.MyGame.plrs[uu.owner].Resources.$clone(), new DarkKingdomCore.TimeCost.$ctor1(uu.abils.getItem("Looter").value, 0, 0, 0));
                                this.ShowInfoPar(System.String.format("+{0}", [uu.abils.getItem("Looter").value]), this.moneyClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                            }
                            if (uu.owner !== u.owner && uu.AbsContains("Invisible_on_kill") && u.Near(uu)) {
                                uu.AddAbility$1("Invisible", DarkKingdomCore.EffectType.Normal);
                                this.ShowInfoPar("\u0418\u0441\u0447\u0435\u0437!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                            }
                            if (u.owner !== uu.owner && uu.AbsContains("Necromancy") && !u.AbsContains$1(["Undead", "Machinery"])) {
                                this.bornList.add(new DarkKingdomCore.Unit(this, u.x, uu.moveside, uu.owner, DarkKingdomCore.MyGame.unitPrms.getItem("Skeleton_squad").$clone()));
                                this.ShowInfoPar("\u041e\u0436\u0438\u0432\u043b\u0435\u043d!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                            }
                            if (u.deathFromPoison && uu.AbsContains("Flizard spawner")) {
                                this.bornList.add(new DarkKingdomCore.Unit(this, uu.x, uu.moveside, uu.owner, DarkKingdomCore.MyGame.unitPrms.getItem("Flizard").$clone()));
                                this.ShowInfoPar("\u041f\u043e\u0440\u043e\u0436\u0434\u0435\u043d!", DarkKingdomCore.MyGame.poiAbilClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                            }
                            if (uu.owner !== u.owner && uu.AbsContains("Corpseeating") && u.Near(uu)) {
                                if (uu.hp < uu.parameters.maxhp) {
                                    this.Heal(uu, uu.parameters.maxhp - uu.hp);
                                }
                                if (uu.AbsContains("Devour")) {
                                    if (uu.abils.containsKey("Denying")) {
                                        uu.abils.getItem("Denying").value = (uu.abils.getItem("Denying").value + 50) | 0;
                                    }
                                }
                                this.ShowInfoPar("\u041e\u0431\u0435\u0434!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                            }
                            if (uu.AbsContains("Execution") && u.Near(uu)) {
                                ($t4 = DarkKingdomCore.MyGame.plrs[uu.owner]).victimcount = ($t4.victimcount + 1) | 0;
                                if (DarkKingdomCore.MyGame.plrs[uu.owner].victimcount >= 13) {
                                    var avunits = new (System.Collections.Generic.List$1(System.String)).ctor();
                                    $t5 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                                    try {
                                        while ($t5.moveNext()) {
                                            var upstr = $t5.Current.$clone();
                                            if (Bridge.referenceEquals(upstr.Subrace, "Monster")) {
                                                avunits.add(upstr.Name);
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t5, System.IDisposable)) {
                                            $t5.System$IDisposable$Dispose();
                                        }
                                    }
                                    this.bornList.add(new DarkKingdomCore.Unit(this, u.x, uu.moveside, uu.owner, DarkKingdomCore.MyGame.unitPrms.getItem(avunits.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits.Count))).$clone()));
                                    ($t6 = DarkKingdomCore.MyGame.plrs[uu.owner]).victimcount = ($t6.victimcount - 13) | 0;
                                    this.ShowInfoPar("\u0412\u044b\u0437\u0432\u0430\u043d!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                } else {
                                    this.ShowInfoPar(System.String.format("\u0415\u0449\u0435 {0}", [((13 - DarkKingdomCore.MyGame.plrs[uu.owner].victimcount) | 0)]), DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
                if (u.AbsContains("Victim")) {
                    ($t7 = DarkKingdomCore.MyGame.plrs[u.owner]).victimcount = ($t7.victimcount + 1) | 0;
                    if (DarkKingdomCore.MyGame.plrs[u.owner].victimcount >= 13) {
                        var avunits1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                        $t8 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                        try {
                            while ($t8.moveNext()) {
                                var upstr1 = $t8.Current.$clone();
                                if (Bridge.referenceEquals(upstr1.Subrace, "Monster")) {
                                    avunits1.add(upstr1.Name);
                                }
                            }
                        } finally {
                            if (Bridge.is($t8, System.IDisposable)) {
                                $t8.System$IDisposable$Dispose();
                            }
                        }
                        this.bornList.add(new DarkKingdomCore.Unit(this, u.x, u.moveside, u.owner, DarkKingdomCore.MyGame.unitPrms.getItem(avunits1.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits1.Count))).$clone()));
                        ($t9 = DarkKingdomCore.MyGame.plrs[u.owner]).victimcount = ($t9.victimcount - 13) | 0;
                        this.ShowInfoPar("\u0412\u044b\u0437\u0432\u0430\u043d!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                    } else {
                        this.ShowInfoPar(System.String.format("\u0415\u0449\u0435 {0}", [((13 - DarkKingdomCore.MyGame.plrs[u.owner].victimcount) | 0)]), DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                    }
                }
                if (u.AbsContains("Immortal") && DarkKingdomCore.MyGame.plrs[u.owner].res.Death >= 5) {
                    ($t10 = DarkKingdomCore.MyGame.plrs[u.owner].res.$clone()).Death = ($t10.Death - 5) | 0;
                    u.hp = u.parameters.maxhp;
                    this.ShowInfoPar("\u0418\u043d\u043a\u0430\u0440\u043d\u0430\u0446\u0438\u044f", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                    return false;
                }
                if (u.AbsContains("Incarnation") && DarkKingdomCore.MyGame.rnd.Next$1(100) < 25) {
                    u.hp = u.parameters.maxhp;
                    this.ShowInfoPar("\u0418\u043d\u043a\u0430\u0440\u043d\u0430\u0446\u0438\u044f", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                    return false;
                }
                if (u.AbsContains("Unterminate")) {
                    u.abils.getItem("Unterminate").used = true;
                    u.hp = 1;
                    u.AddAbility$2("Invulnerable", 400, DarkKingdomCore.EffectType.Good);
                    return false;
                }
                if (!u.AbsContains("Bodyless")) {
                    var ltime = 7200;
                    if (u.parameters.isBuilding) {
                        ltime = -1;
                    }
                    DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem(u.parameters.spriteName), DarkKingdomCore.MyGame.sprites.getItem(u.parameters.spriteName).Ranges.getItem("Corpse").$clone().Item2), u.x + u.parameters.imgx - this.us2, ((((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) - 30) | 0) + 2) | 0), 0, 5, ltime, u.moveside === -1));
                }
                var val;
                if (u.parameters.Cost.Money < 50) {
                    val = 1;
                } else if (u.parameters.Cost.Money < 150) {
                    val = 2;
                } else if (u.parameters.Cost.Money < 250) {
                    val = 5;
                } else {
                    val = 10;
                }
                if (u.owner === 1) {
                    ($t11 = DarkKingdomCore.MyGame.plrs[0].res.$clone()).Death = ($t11.Death + val) | 0;
                    this.ShowInfoPar("+" + val, this.deathClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                } else if (u.owner === 0) {
                    ($t12 = DarkKingdomCore.MyGame.plrs[1].res.$clone()).Death = ($t12.Death + val) | 0;
                }
                if (Bridge.referenceEquals(u, this.selU)) {
                    this.selU = null;
                }
                return true;
            },
            RandomizeUnits: function (ucnt, uList, specialhero) {
                var $t, $t1;
                var unts = new (System.Collections.Generic.List$1(System.String)).ctor();
                if (ucnt > 0) {
                    var allunitst1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    var allunitst2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    var allunitst3 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    var allunitscount = 0;

                    var allunits = new (System.Collections.Generic.List$1(System.String)).ctor();
                    var herounits = new (System.Collections.Generic.List$1(System.String)).ctor();

                    var t1cnt, t2cnt, t3cnt;
                    var u;


                    $t = Bridge.getEnumerator(uList);
                    try {
                        while ($t.moveNext()) {
                            var up = $t.Current;
                            if (specialhero) {
                                if (DarkKingdomCore.MyGame.unitPrms.getItem(up).$clone().isHeroic) {
                                    herounits.add(up);
                                } else {
                                    allunits.add(up);
                                }
                            } else {
                                allunits.add(up);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (specialhero && herounits.Count > 0) {
                        unts.add(herounits.getItem(DarkKingdomCore.MyGame.rnd.Next$1(herounits.Count)));
                        ucnt = (ucnt - 1) | 0;
                    }

                    $t1 = Bridge.getEnumerator(allunits);
                    try {
                        while ($t1.moveNext()) {
                            var up1 = $t1.Current;
                            switch (DarkKingdomCore.MyGame.unitPrms.getItem(up1).$clone().Cost.Tier) {
                                case 1: 
                                    {
                                        allunitst1.add(up1);
                                        break;
                                    }
                                case 2: 
                                    {
                                        allunitst2.add(up1);
                                        break;
                                    }
                                case 3: 
                                    {
                                        allunitst3.add(up1);
                                        break;
                                    }
                            }
                            allunitscount = (allunitscount + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    if (allunitscount < ucnt) {
                        ucnt = allunitscount;
                    }

                    t3cnt = 1;
                    t2cnt = (Bridge.Int.div((((ucnt - t3cnt) | 0)), 2)) | 0;
                    t1cnt = (((ucnt - t2cnt) | 0) - t3cnt) | 0;

                    if (t1cnt === 0 && t2cnt === 0 && allunitst2.Count > 0) {
                        t2cnt = 1;
                    }


                    while (t3cnt > 0 && allunitst3.Count > 0) {
                        u = DarkKingdomCore.MyGame.rnd.Next$1(allunitst3.Count);
                        unts.add(allunitst3.getItem(u));
                        allunitst3.removeAt(u);
                        t3cnt = (t3cnt - 1) | 0;
                    }

                    t1cnt = (t1cnt + t3cnt) | 0;

                    while (t1cnt > 0 && allunitst1.Count > 0) {
                        u = DarkKingdomCore.MyGame.rnd.Next$1(allunitst1.Count);
                        unts.add(allunitst1.getItem(u));
                        allunitst1.removeAt(u);
                        t1cnt = (t1cnt - 1) | 0;
                    }

                    t2cnt = (t2cnt + t1cnt) | 0;

                    while (t2cnt > 0 && allunitst2.Count > 0) {
                        u = DarkKingdomCore.MyGame.rnd.Next$1(allunitst2.Count);
                        unts.add(allunitst2.getItem(u));
                        allunitst2.removeAt(u);
                        t2cnt = (t2cnt - 1) | 0;
                    }
                    unts = this.SortUnitsLists(unts);
                }

                return unts;
            },
            RandomizeSpells: function (sCnt, sList) {
                var $t;
                var splls = new (System.Collections.Generic.List$1(System.String)).ctor();
                if (sCnt > 0) {
                    var spellst1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    var spellst2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    var spellst3 = new (System.Collections.Generic.List$1(System.String)).ctor();


                    var t1cnt, t2cnt, t3cnt;
                    var u;

                    $t = Bridge.getEnumerator(sList);
                    try {
                        while ($t.moveNext()) {
                            var sp = $t.Current;
                            switch (this.spells.getItem(sp).Cost.Tier) {
                                case 1: 
                                    {
                                        spellst1.add(sp);
                                        break;
                                    }
                                case 2: 
                                    {
                                        spellst2.add(sp);
                                        break;
                                    }
                                case 3: 
                                    {
                                        spellst3.add(sp);
                                        break;
                                    }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    t3cnt = (Bridge.Int.div(sCnt, 3)) | 0;
                    t2cnt = (Bridge.Int.div(sCnt, 3)) | 0;
                    t1cnt = (((sCnt - t2cnt) | 0) - t3cnt) | 0;


                    while (t1cnt > 0 && spellst1.Count > 0) {
                        u = DarkKingdomCore.MyGame.rnd.Next$1(spellst1.Count);
                        splls.add(spellst1.getItem(u));
                        spellst1.removeAt(u);
                        t1cnt = (t1cnt - 1) | 0;
                    }

                    t2cnt = (t2cnt + t1cnt) | 0;

                    while (t2cnt > 0 && spellst2.Count > 0) {
                        u = DarkKingdomCore.MyGame.rnd.Next$1(spellst2.Count);
                        splls.add(spellst2.getItem(u));
                        spellst2.removeAt(u);
                        t2cnt = (t2cnt - 1) | 0;
                    }

                    t3cnt = (t3cnt + t2cnt) | 0;

                    while (t3cnt > 0 && spellst3.Count > 0) {
                        u = DarkKingdomCore.MyGame.rnd.Next$1(spellst3.Count);
                        splls.add(spellst3.getItem(u));
                        spellst3.removeAt(u);
                        t3cnt = (t3cnt - 1) | 0;
                    }

                    splls = this.SortSpellsLists(splls);
                }

                return splls;
            },
            RandomizeBuildings: function (bCnt, bList) {
                var buildings = new (System.Collections.Generic.List$1(System.String)).ctor();

                if (bCnt > 0) {
                    var tmpBldList = new (System.Collections.Generic.List$1(System.String)).ctor();
                    tmpBldList.AddRange(bList);
                    var r;
                    while (bCnt > 0 && tmpBldList.Count > 0) {
                        r = DarkKingdomCore.MyGame.rnd.Next$1(tmpBldList.Count);
                        buildings.add(tmpBldList.getItem(r));
                        tmpBldList.removeAt(r);
                        bCnt = (bCnt - 1) | 0;
                    }
                }

                return buildings;
            },
            btnSpell_Clicked: function (btn, isTouch) {
                var ind = this.cSpells.Children.indexOf(btn);
                if ((DarkKingdomCore.MyGame.plrs[0].spellsRchrg.getItem(ind) === 0)) {
                    if (this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(ind)).Target === DarkKingdomCore.Spell.TargetType.Unit) {
                        this.inSpellMode = true;
                        this.spellName = DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(ind);
                    } else {
                        this.DoGlobalSpells(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(ind));
                    }
                }
            },
            btnSpell_Focused: function (btn, isTouch) {
                var ind = this.cSpells.Children.indexOf(btn);
                var spl = this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(ind));
                this.ShowMoreInfo(spl.Cost.$clone(), true, Bridge.getDefaultValue(Microsoft.Xna.Framework.Point), [this.localize.GetString(spl.Name), this.localize.GetString$1(spl.School, [spl.Cost.Tier]), spl.Description]);
            },
            SetSpells: function () {
                if (DarkKingdomCore.MyGame.plrs[0].spllsList.Count > 0) {
                    this.cSpells.Children.clear();
                    var d = 0;
                    var oldt = this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(0)).Cost.Tier;
                    for (var i = 0; i < DarkKingdomCore.MyGame.plrs[0].spllsList.Count; i = (i + 1) | 0) {
                        if (this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(i)).Cost.Tier !== oldt) {
                            d = (d + 7) | 0;
                            oldt = this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(i)).Cost.Tier;
                        }

                        var btn = this.cSpells.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor1(Bridge.fn.cacheBind(this, this.btnSpell_Clicked), Bridge.fn.cacheBind(this, this.btnSpell_Focused), this.numKeys[i], ((Bridge.Int.mul(i, 70) + d) | 0), 0, 60, 60, 0.0, 0.5, true));
                        btn.AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("spells_icons"), this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(i)).Img), 0, 0, 60, 60, 0.5, 0.5, true));
                        btn.AddChild(MonoInterface.Progress, new MonoInterface.Progress(0, 0, 0, 0, 60, 60, 0));
                        DarkKingdomCore.MyGame.plrs[0].spellsRchrg.add(0);
                    }
                    this.cSpells.ApplyTheme(this.defaultTheme);
                    this.cSpells.W = System.Linq.Enumerable.from(this.cSpells.Children, MonoInterface.Block).last().FinalRight;
                    this.btnSelectSpells.IsDisabled = false;
                } else {
                    this.btnSelectSpells.IsDisabled = true;
                }
            },
            CreateAchievements: function () {
                this.achivs.add("Startpath", new DarkKingdomCore.Achievement("Startpath", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("bonus_icons"), 3), "5crystals"));
                this.achivs.add("Alittleharder", new DarkKingdomCore.Achievement("Alittleharder", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("medium_icons"), 11), "10crystals"));

                this.achivs.add("Gentleleader", new DarkKingdomCore.Achievement("Gentleleader", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("bonus_icons"), 8), "25crystals"));


                // achivs.Add("Sacrifaceinbattle", New Achievement("Sacrifaceinbattle", New MonoInterface.Appearance(sprites["units_icons"], 113)))
                this.achivs.add("Truemage", new DarkKingdomCore.Achievement("Truemage", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("bonus_icons"), 1), "25crystals"));

                this.achivs.add("Openeditor", new DarkKingdomCore.Achievement("Openeditor", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("big_icons"), 2), "1unit"));
                this.achivs.add("Shamecheaters", new DarkKingdomCore.Achievement("Shamecheaters", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("bonus_icons"), 7), "1unit"));

                this.achivs.add("Firstpurchase", new DarkKingdomCore.Achievement("Firstpurchase", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("bonus_icons"), 0), "1unit"));
            },
            CreatePurchases: function () {
                this.purchases.add("Buster1T", new DarkKingdomCore.Purchase("Buster1T", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("purchase_icons"), 2), 5));


                this.purchases.add("Buster2T", new DarkKingdomCore.Purchase("Buster2T", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("purchase_icons"), 3), 10));


                this.purchases.add("Buster3T", new DarkKingdomCore.Purchase("Buster3T", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("purchase_icons"), 1), 25));


                this.purchases.add("Herobuster", new DarkKingdomCore.Purchase("Herobuster", new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("purchase_icons"), 0), 25));
            },
            RotateCarousel: function (frm) {
                var trgPos = this.menuCarousel.indexOf(frm);
                if (trgPos > -1) {
                    if (trgPos > this.curCarouselPos) {
                        var frm2 = this.menuCarousel.getItem(this.curCarouselPos);
                        this.mainAnimator.AddChild(MonoInterface.NumberAnimation, new MonoInterface.NumberAnimation("X", 0, -400, -50, void 0, function () {
                            frm2.Visible = false;
                        }, frm2)).Begin();
                        frm.Y = 0;
                        frm.Visible = true;
                        this.mainAnimator.AddChild(MonoInterface.NumberAnimation, new MonoInterface.NumberAnimation("X", 400, 0, -50, void 0, void 0, frm)).Begin();
                    } else if (trgPos < this.curCarouselPos) {
                        var frm21 = this.menuCarousel.getItem(this.curCarouselPos);
                        this.mainAnimator.AddChild(MonoInterface.NumberAnimation, new MonoInterface.NumberAnimation("X", 0, 400, 50, void 0, function () {
                            frm21.Visible = false;
                        }, frm21)).Begin();
                        frm.Y = 0;
                        frm.Visible = true;
                        this.mainAnimator.AddChild(MonoInterface.NumberAnimation, new MonoInterface.NumberAnimation("X", -400, 0, 50, void 0, void 0, frm)).Begin();
                    } else {
                        frm.Visible = true;
                        if (frm.Y < 0) {
                            this.mainAnimator.AddChild(MonoInterface.NumberAnimation, new MonoInterface.NumberAnimation("Y", frm.Y, 0, 50, void 0, void 0, frm)).Begin();
                        } else {
                            if (frm.Y > 0) {
                                this.mainAnimator.AddChild(MonoInterface.NumberAnimation, new MonoInterface.NumberAnimation("Y", frm.Y, 0, -50, void 0, void 0, frm)).Begin();
                            }
                        }
                    }
                    this.curCarouselPos = trgPos;
                }
            },
            Initialize: function () {
                var $t, $t1;

                this.backFillTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 0, 0, 0, 150);

                DarkKingdomCore.MyGame.frmFillTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 190, 190, 190, 220);

                DarkKingdomCore.MyGame.btnFillTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 150, 150, 150);
                DarkKingdomCore.MyGame.btnSelectTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 200, 200, 200);
                DarkKingdomCore.MyGame.btnHlTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 220, 220, 220, 120);
                DarkKingdomCore.MyGame.btnPressedTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 220, 220, 220, 180);
                DarkKingdomCore.MyGame.btnDisabledTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 100, 100, 100, 200);

                DarkKingdomCore.MyGame.prgFillTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 220, 220, 220);
                DarkKingdomCore.MyGame.prgBarTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 140, 140, 140);



                this.starTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 255, 255, 255);


                this.healthBarBackTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 255, 255, 255, 180);
                this.healthBarLifeTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 255, 0, 0, 180);
                this.healthBarPoisonTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 0, 120, 0, 180);
                this.healthBarAbilTex = MonoInterface.Theme.SolidColorTexture(this.graphics.GraphicsDevice, 0, 0, 255, 180);


                DarkKingdomCore.MyGame.hor = (DarkKingdomCore.MyGame.gameHeight - 30) | 0;

                this.skyrect = new Microsoft.Xna.Framework.Rectangle.$ctor2(0, 0, DarkKingdomCore.MyGame.gameWidth, DarkKingdomCore.MyGame.hor);
                this.skytexture = new Microsoft.Xna.Framework.Graphics.Texture2D.ctor(this.graphics.GraphicsDevice, 1, DarkKingdomCore.MyGame.hor);
                this.sunsettexture = new Microsoft.Xna.Framework.Graphics.Texture2D.ctor(this.graphics.GraphicsDevice, 1, DarkKingdomCore.MyGame.hor);

                this.CreateAchievements();

                this.CreatePurchases();





                this.OrderRaces();

                this.CreateRaceList();

                this.conds.add(new DarkKingdomCore.MatchCondition.$ctor1("Easy", new DarkKingdomCore.TimeCost.$ctor1(1000, 20, 1, 0), new DarkKingdomCore.TimeCost.$ctor1(500, 10, 1, 0), 50, 25));
                this.conds.add(new DarkKingdomCore.MatchCondition.$ctor1("Medium", new DarkKingdomCore.TimeCost.$ctor1(500, 10, 1, 0), new DarkKingdomCore.TimeCost.$ctor1(500, 10, 1, 0), 50, 25));
                this.conds.add(new DarkKingdomCore.MatchCondition.$ctor1("Hard", new DarkKingdomCore.TimeCost.$ctor1(250, 0, 1, 0), new DarkKingdomCore.TimeCost.$ctor1(500, 10, 1, 0), 50, 25));

                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                try {
                    while ($t.moveNext()) {
                        var up = $t.Current.$clone();
                        if (!up.special) {
                            this.AllUntsList.add(up.Name);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                var racescost = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32)).ctor();
                var racei = 0;
                $t1 = Bridge.getEnumerator(DarkKingdomCore.RaceManager.Instance.All);
                try {
                    while ($t1.moveNext()) {
                        var rce = $t1.Current;
                        racescost.add(rce.key, Bridge.Int.mul(racei, 4000));
                        racei = (racei + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                this.AllUntsList = System.Linq.Enumerable.from(this.AllUntsList, System.String).orderBy(function (unit) {
                        return ((((((DarkKingdomCore.MyGame.unitPrms.getItem(unit).$clone().Cost.Money + (DarkKingdomCore.MyGame.unitPrms.getItem(unit).$clone().support ? -500 : 0)) | 0) + Bridge.Int.mul(DarkKingdomCore.MyGame.unitPrms.getItem(unit).$clone().Cost.Tier, 1000)) | 0) + racescost.getItem(DarkKingdomCore.MyGame.unitPrms.getItem(unit).$clone().Race)) | 0);
                    }).toList(System.String);

                this.CreateInterface();

                this.menuCarousel = Bridge.fn.bind(this, function (_o1) {
                        _o1.add(this.frmBattle);
                        _o1.add(this.frmProfile);
                        return _o1;
                    })(new (System.Collections.Generic.List$1(MonoInterface.Frame)).ctor());

                this.starsCnt = 88;
                this.stars = System.Array.init(this.starsCnt, function (){
                    return new Microsoft.Xna.Framework.Vector2();
                }, Microsoft.Xna.Framework.Vector2);
                for (var i = 0; i < this.starsCnt; i = (i + 1) | 0) {
                    this.stars[i] = new Microsoft.Xna.Framework.Vector2.$ctor2(DarkKingdomCore.MyGame.rnd.Next$2(0, DarkKingdomCore.MyGame.gameWidth), 20 + DarkKingdomCore.MyGame.rnd.NextDouble() * (((DarkKingdomCore.MyGame.hor - 60) | 0)));
                }

                this.symbols[0] = new Microsoft.Xna.Framework.Rectangle.$ctor2(((DarkKingdomCore.MyGame.gameWidth - 9) | 0), ((DarkKingdomCore.MyGame.hor - 75) | 0), 15, 25);
                this.symbols[1] = new Microsoft.Xna.Framework.Rectangle.$ctor2(((DarkKingdomCore.MyGame.gameWidth - 34) | 0), ((DarkKingdomCore.MyGame.hor - 54) | 0), 15, 25);
                this.symbols[2] = new Microsoft.Xna.Framework.Rectangle.$ctor2(-7, ((DarkKingdomCore.MyGame.hor - 75) | 0), 15, 25);
                this.symbols[3] = new Microsoft.Xna.Framework.Rectangle.$ctor2(21, ((DarkKingdomCore.MyGame.hor - 54) | 0), 15, 25);



                // frmBattle.SetPosition(frmMainMenu.rect.Right / 2 + (frmMenuExit.rect.Left - frmBattle.rect.Width) / 2, (h - frmBattle.rect.Height) / 2)








                this.sunAng = 0.0;
                this.dAng = 0.000698131742;

                this.gamelandscape = DarkKingdomCore.MyGame.rnd.Next$1(this.landsTypesCount);

                DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.MainMenu;
                this.Pause = false;


                this.ChangeLandscape(this.gamelandscape);

                this.SetPlayers();

                this.ResetWorld(this.sunAng, this.dAng);


                this.frmMainMenu.Show();
                this.frmRightMenu.Show();

                if (DarkKingdomCore.ProfileManager.Instance.All.Count > 0) {
                    this.StartBattle();
                } else {
                    this.StartNewProfile();
                }

                this.isLoaded = true;
            },
            StartNewProfile: function () {
                DarkKingdomCore.ProfileManager.Instance.All.add(new DarkKingdomCore.Profile(("\u041d\u043e\u0432\u0438\u0447\u0435\u043a").trim(), 0, 1, new (System.Collections.Generic.List$1(System.String)).ctor(), new (System.Collections.Generic.Dictionary$2(System.String,System.Int32)).ctor(), new (System.Collections.Generic.Dictionary$2(System.String,System.Int32)).ctor(), -1, -1, new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor(), 0, 3));
                // RaceManager.Instance.All.Add("Custom0", New Race("Custom0", "Ð¡Ð´ÐµÐ»Ð°Ð½Ð¾ ÑÐ²Ð¾Ð¸Ð¼Ð¸ ÑÑÐºÐ°Ð¼Ð¸", "Ð¡ÑÐ°ÑÑÐ¾Ð²ÑÐ¹ Ð½Ð°Ð±Ð¾Ñ", RaceManager.Instance.All(standartRaces(raceSwitcherNewProfile.Current)).units, 10, False, True, False, False))
                this.OrderRaces();
                this.CreateRaceList();
                this.StartBattle();
                this.frmBattle.Show(this.mainAnimator);

                this.ShowSomeChildren([this.frmMainMenu, this.frmRightMenu]);


                this.StartBattle();
            },
            ShowSomeChildren: function (frms) {
                var $t;
                if (frms === void 0) { frms = []; }
                $t = Bridge.getEnumerator(frms);
                try {
                    while ($t.moveNext()) {
                        var frm = $t.Current;
                        frm.Show(this.mainAnimator);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            HideSomeChildren: function (frms) {
                var $t;
                if (frms === void 0) { frms = []; }
                $t = Bridge.getEnumerator(frms);
                try {
                    while ($t.moveNext()) {
                        var frm = $t.Current;
                        frm.Hide(this.mainAnimator);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            StartProfile: function () {
                this.RotateCarousel(this.frmProfile);
                this.UpdateProfileInfoLabels();
            },
            UpdateProfileInfoLabels: function () {
                var $t, $t1;
                this.lblsfrmProfile.getItem(0).Text = "\u041d\u0438\u043a: " + (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).name || "");
                this.lblsfrmProfile.getItem(1).Text = "\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c: " + (this.localize.GetString(this.conds.getItem(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).difficult).$clone().name) || "");


                var allwins = 0;
                var maxrace = "";
                var maxracepls = 0;

                $t = Bridge.getEnumerator(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesPlays.Keys);
                try {
                    while ($t.moveNext()) {
                        var r = $t.Current;
                        allwins = (allwins + DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesWins.getItem(r)) | 0;
                        if (maxracepls < DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesPlays.getItem(r)) {
                            maxracepls = DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesPlays.getItem(r);
                            maxrace = r;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this.lblsfrmProfile.getItem(2).Text = System.String.format("\u041f\u043e\u0431\u0435\u0434: {0}", [allwins]);
                this.lblsfrmProfile.getItem(3).Text = System.String.format("\u041e\u0442\u043a\u0440\u044b\u0442\u043e {0}% \u0441\u0443\u0449\u0435\u0441\u0442\u0432", [Bridge.Int.mul(100, DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.Count) / this.AllUntsList.Count]);

                var acNum = 0;

                $t1 = Bridge.getEnumerator(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs);
                try {
                    while ($t1.moveNext()) {
                        var a = $t1.Current;
                        if (Bridge.referenceEquals(a.value, "")) {
                            acNum = (acNum + 1) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                this.lblsfrmProfile.getItem(4).Text = System.String.format("\u041e\u0442\u043a\u0440\u044b\u0442\u043e {0}% \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u0439", [Bridge.Int.mul(100, acNum) / this.achivs.Count]);


                this.lblsfrmProfile.getItem(6).Text = "\u041d\u0438\u043a: " + (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).name || "");
                this.lblsfrmProfile.getItem(7).Text = "\u041d\u0438\u043a: " + (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).name || "");

                if (!System.String.isNullOrEmpty(maxrace)) {
                    this.lblsfrmProfile.getItem(5).Text = System.String.format("\u041b\u044e\u0431\u0438\u043c\u0430\u044f \u0444\u0440\u0430\u043a\u0446\u0438\u044f: {0}", [this.localize.GetString(maxrace)]);
                } else {
                    this.lblsfrmProfile.getItem(5).Text = "\u041b\u044e\u0431\u0438\u043c\u0430\u044f \u0444\u0440\u0430\u043a\u0446\u0438\u044f: -";
                }

                if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).minvictims === -1) {
                    this.lblsfrmProfile.getItem(6).Text = "\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u043e\u0442\u0435\u0440\u044c: -";
                } else {
                    this.lblsfrmProfile.getItem(6).Text = System.String.format("\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u043e\u0442\u0435\u0440\u044c: {0}", [DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).minvictims]);
                }

                if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxkills === -1) {
                    this.lblsfrmProfile.getItem(7).Text = "\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0443\u0431\u0438\u0439\u0441\u0442\u0432: -";
                } else {
                    this.lblsfrmProfile.getItem(7).Text = System.String.format("\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0443\u0431\u0438\u0439\u0441\u0442\u0432: {0}", [DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxkills]);
                }
            },
            ResetWorld: function (sunPos, sunV) {
                DarkKingdomCore.MyGame.cloudpars.clear();
                this.snD = Math.sin(sunV);
                this.csD = Math.cos(sunV);
                this.snS = Math.sin(sunPos);
                this.csS = Math.cos(sunPos);
                for (var i = 0; i <= 3; i = (i + 1) | 0) {
                    DarkKingdomCore.MyGame.cloudpars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("world"), DarkKingdomCore.MyGame.rnd.Next$2(2, 6)), ((-100 - DarkKingdomCore.MyGame.rnd.Next$1(100)) | 0), ((((DarkKingdomCore.MyGame.hor - 200) | 0) - Bridge.Int.mul(i, 40)) | 0), 0.2 + 0.4 * DarkKingdomCore.MyGame.rnd.NextDouble(), 0, -1));
                }
            },
            btnUnit_Clicked: function (btn, isTouch) {
                for (var i = 0; i < this.cUnits.Children.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.cUnits.Children.getItem(i), btn)) {
                        this.TryAddToQueueUnit(DarkKingdomCore.MyGame.plrs[0], DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(i));
                    }
                }
            },
            btnUnit_Focused: function (btn, isTouch) {
                for (var i = 0; i < this.cUnits.Children.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.cUnits.Children.getItem(i), btn)) {
                        this.ShowUnitInfo(DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(i)).$clone(), 0, true, new Microsoft.Xna.Framework.Point.$ctor2(Bridge.Int.clip32(btn.FinalRight / this.MainContainer.FinalChildrenScaleX), Bridge.Int.clip32(btn.FinalBottom / this.MainContainer.FinalChildrenScaleY)));
                    }
                }
            },
            SetUnits: function () {
                if (DarkKingdomCore.MyGame.plrs[0].unitsList.Count > 0) {
                    this.cUnits.Children.clear();

                    var d = 0;
                    var oldt = DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(0)).$clone().Cost.Tier;
                    for (var i = 0; i < DarkKingdomCore.MyGame.plrs[0].unitsList.Count; i = (i + 1) | 0) {
                        if (DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(i)).$clone().Cost.Tier !== oldt || DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(i)).$clone().AbsContains("Target")) {
                            d = (d + 7) | 0;
                            oldt = DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(i)).$clone().Cost.Tier;
                        }
                        this.cUnits.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor1(Bridge.fn.cacheBind(this, this.btnUnit_Clicked), Bridge.fn.cacheBind(this, this.btnUnit_Focused), this.numKeys[i], ((Bridge.Int.mul(i, 65) + d) | 0), 0, 60, 60, 0.0, 0.5, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].unitsList.getItem(i)).$clone().iconApp.$clone(), 0, 0, 60, 60, 0.5, 0.5, true));
                        this.cUnits.W = System.Linq.Enumerable.from(this.cUnits.Children, MonoInterface.Block).last().Right;
                    }
                    this.cUnits.ApplyTheme(this.defaultTheme);
                } else {
                }
            },
            StartAgain: function () {
                var $t, $t1, $t2, $t3, $t4, $t5;
                DarkKingdomCore.MyGame.plrs[0].Reset(this.conds.getItem(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).difficult).$clone());
                DarkKingdomCore.MyGame.plrs[1].Reset(this.conds.getItem(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).difficult).$clone());
                this.pctTierFrmResources.spriteRef = DarkKingdomCore.MyGame.unitPrms.getItem("Tier_2").$clone().iconApp.$clone();
                this.ammos.clear();
                DarkKingdomCore.MyGame.units.clear();
                DarkKingdomCore.MyGame.pars.clear();
                this.deathlist.clear();
                this.bornList.clear();
                this.frmProduction.Hide(this.mainAnimator);

                this.UpdateQueue();


                var baseCnt = 0;

                if (this.gType === DarkKingdomCore.GameType.StandartGT || this.gType === DarkKingdomCore.GameType.DefenceGT) {
                    if (Bridge.referenceEquals(DarkKingdomCore.MyGame.plrs[0].hero, "Castle")) {
                        DarkKingdomCore.MyGame.units.add(new DarkKingdomCore.Unit(this, ((this.us2 - 1) | 0), 1, 0, DarkKingdomCore.MyGame.unitPrms.getItem("Castle").$clone()));
                        DarkKingdomCore.MyGame.units.getItem(baseCnt).parameters.spriteName = (DarkKingdomCore.MyGame.plrs[0].castleFileName || "") + "2";
                        DarkKingdomCore.MyGame.units.getItem(baseCnt).parameters.rect = new Microsoft.Xna.Framework.Rectangle.$ctor2(-15, -60, 50, 63);
                        DarkKingdomCore.MyGame.plrs[baseCnt].baseX = this.us2;
                    } else {
                        DarkKingdomCore.MyGame.units.add(new DarkKingdomCore.Unit(this, ((this.unitSize - 1) | 0), 1, 0, DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].hero).$clone()));
                        DarkKingdomCore.MyGame.plrs[0].baseX = (-this.us2) | 0;
                    }
                    DarkKingdomCore.MyGame.plrs[0].heroUnit = DarkKingdomCore.MyGame.units.getItem(baseCnt);
                    baseCnt = (baseCnt + 1) | 0;
                } else {
                    DarkKingdomCore.MyGame.plrs[0].hero = "";
                    DarkKingdomCore.MyGame.plrs[0].baseX = (-this.unitSize) | 0;
                    DarkKingdomCore.MyGame.plrs[0].heroUnit = null;
                }


                if (this.gType === DarkKingdomCore.GameType.StandartGT || this.gType === DarkKingdomCore.GameType.OffenceGT) {
                    if (Bridge.referenceEquals(DarkKingdomCore.MyGame.plrs[1].hero, "Castle")) {
                        DarkKingdomCore.MyGame.units.add(new DarkKingdomCore.Unit(this, ((((DarkKingdomCore.MyGame.gameWidth - this.us2) | 0) + 1) | 0), -1, 1, DarkKingdomCore.MyGame.unitPrms.getItem("Castle").$clone()));
                        DarkKingdomCore.MyGame.units.getItem(baseCnt).parameters.spriteName = (DarkKingdomCore.MyGame.plrs[1].castleFileName || "") + 2;
                        DarkKingdomCore.MyGame.units.getItem(baseCnt).parameters.imgx = -20;
                        DarkKingdomCore.MyGame.units.getItem(baseCnt).parameters.rect = new Microsoft.Xna.Framework.Rectangle.$ctor2(-35, -59, 50, 63);
                        DarkKingdomCore.MyGame.plrs[1].baseX = (DarkKingdomCore.MyGame.gameWidth - this.us2) | 0;
                    } else {
                        DarkKingdomCore.MyGame.units.add(new DarkKingdomCore.Unit(this, ((((DarkKingdomCore.MyGame.gameWidth - this.unitSize) | 0) + 1) | 0), -1, 1, DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[1].hero).$clone()));
                        DarkKingdomCore.MyGame.plrs[1].baseX = (DarkKingdomCore.MyGame.gameWidth + this.us2) | 0;
                    }
                    DarkKingdomCore.MyGame.plrs[1].heroUnit = DarkKingdomCore.MyGame.units.getItem(baseCnt);
                    baseCnt = (baseCnt + 1) | 0;
                } else {
                    DarkKingdomCore.MyGame.plrs[1].hero = "";
                    DarkKingdomCore.MyGame.plrs[1].baseX = (DarkKingdomCore.MyGame.gameWidth + this.unitSize) | 0;
                    DarkKingdomCore.MyGame.plrs[1].heroUnit = null;
                }

                this.curM = DarkKingdomCore.MyGame.plrs[0].res.Money;
                this.curD = DarkKingdomCore.MyGame.plrs[0].res.Death;

                this.selU = null;
                this.SetUnits();
                this.SetSpells();


                if (this.gType === DarkKingdomCore.GameType.DefenceGT) {
                    this.ResetWorld(3.14159274, this.dAng / 3);
                } else {
                    if (this.gType === DarkKingdomCore.GameType.OffenceGT) {
                        this.ResetWorld(0, this.dAng / 3);
                    } else {
                        this.ResetWorld(this.sunAng, this.dAng);
                    }
                }
                if (this.gType === DarkKingdomCore.GameType.DefenceGT) {
                    ($t = DarkKingdomCore.MyGame.plrs[1].res.$clone()).Money = Bridge.Int.mul($t.Money, 2);
                    ($t1 = DarkKingdomCore.MyGame.plrs[1].res.$clone()).Death = Bridge.Int.mul($t1.Death, 2);
                }
                if (this.gType === DarkKingdomCore.GameType.OffenceGT) {
                    ($t2 = DarkKingdomCore.MyGame.plrs[0].res.$clone()).Money = Bridge.Int.mul($t2.Money, 2);
                    ($t3 = DarkKingdomCore.MyGame.plrs[0].res.$clone()).Death = Bridge.Int.mul($t3.Death, 2);
                }

                $t4 = Bridge.getEnumerator(DarkKingdomCore.MyGame.plrs);
                try {
                    while ($t4.moveNext()) {
                        var p = $t4.Current;
                        var otherBuildings = new (System.Collections.Generic.List$1(System.String)).ctor();
                        $t5 = Bridge.getEnumerator(p.bonusList);
                        try {
                            while ($t5.moveNext()) {
                                var b = $t5.Current;
                                if (Bridge.referenceEquals(b, "Tower")) {
                                    var tower = new DarkKingdomCore.Unit(this, ((((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0) - ((Bridge.Int.div(Bridge.Int.mul(p.moveside, DarkKingdomCore.MyGame.gameWidth), 6)) | 0)) | 0), p.moveside, p.id, DarkKingdomCore.MyGame.unitPrms.getItem("Tower").$clone());
                                    DarkKingdomCore.MyGame.units.add(tower);
                                } else {
                                    otherBuildings.add(b);
                                }
                            }
                        } finally {
                            if (Bridge.is($t5, System.IDisposable)) {
                                $t5.System$IDisposable$Dispose();
                            }
                        }

                        for (var i = 0; i < otherBuildings.Count; i = (i + 1) | 0) {
                            var building = new DarkKingdomCore.Unit(this, ((((((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0) - ((Bridge.Int.div(Bridge.Int.mul(p.moveside, DarkKingdomCore.MyGame.gameWidth), 6)) | 0)) | 0) - Bridge.Int.mul(Bridge.Int.mul(p.moveside, (((Bridge.Int.div((((((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 3)) | 0) - this.us2) | 0)), (((otherBuildings.Count + 1) | 0)))) | 0))), (((i + 1) | 0)))) | 0), p.moveside, p.id, DarkKingdomCore.MyGame.unitPrms.getItem(otherBuildings.getItem(i)).$clone());
                            DarkKingdomCore.MyGame.units.add(building);
                        }
                    }
                } finally {
                    if (Bridge.is($t4, System.IDisposable)) {
                        $t4.System$IDisposable$Dispose();
                    }
                }
                DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.InGame;
                this.Pause = false;
            },
            StartPreGame: function () {
                var $t, $t1, $t2, $t3, $t4, $t5;
                this.unitsPreGame.clear();
                this.spellsPreGame.clear();

                if (this.modeSwitcherFrmBattle.Current === DarkKingdomCore.GameType.RandomGT) {
                    this.gType = DarkKingdomCore.MyGame.rnd.Next$2(1, 6);
                } else {
                    this.gType = this.modeSwitcherFrmBattle.Current;
                }

                if (Bridge.referenceEquals(this.races1.getItem(this.races1SwitcherFrmBattle.Current), "Random")) {
                    DarkKingdomCore.MyGame.plrs[0].race = DarkKingdomCore.RaceManager.Instance.All.getItem(this.races1.getItem(DarkKingdomCore.MyGame.rnd.Next$2(1, this.races1.Count))).name;
                } else {
                    DarkKingdomCore.MyGame.plrs[0].race = this.races1.getItem(this.races1SwitcherFrmBattle.Current);
                }
                if (Bridge.referenceEquals(this.races2.getItem(this.races2SwitcherFrmBattle.Current), "Random")) {
                    DarkKingdomCore.MyGame.plrs[1].race = DarkKingdomCore.RaceManager.Instance.All.getItem(this.races2.getItem(DarkKingdomCore.MyGame.rnd.Next$2(1, this.races2.Count))).name;
                } else {
                    DarkKingdomCore.MyGame.plrs[1].race = this.races2.getItem(this.races2SwitcherFrmBattle.Current);
                }


                DarkKingdomCore.MyGame.plrs[0].symb = DarkKingdomCore.RaceManager.Instance.All.getItem(DarkKingdomCore.MyGame.plrs[0].race).symb;
                DarkKingdomCore.MyGame.plrs[1].symb = DarkKingdomCore.RaceManager.Instance.All.getItem(DarkKingdomCore.MyGame.plrs[1].race).symb;


                // ÐÑÐ±Ð¸ÑÐ°ÐµÐ¼ ÑÑÑÐµÑÑÐ² Ð¿ÐµÑÐ²Ð¾Ð¼Ñ Ð¸Ð³ÑÐ¾ÐºÑ
                if (DarkKingdomCore.RaceManager.Instance.All.getItem(DarkKingdomCore.MyGame.plrs[0].race).custom) {
                    $t = Bridge.getEnumerator(new (System.Collections.Generic.List$1(System.String)).ctor());
                    try {
                        while ($t.moveNext()) {
                            var unam = $t.Current;
                            this.unitsPreGame.add(unam);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                } else {
                    $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                    try {
                        while ($t1.moveNext()) {
                            var u = $t1.Current.$clone();
                            if (Bridge.referenceEquals(u.Race, DarkKingdomCore.MyGame.plrs[0].race) && !u.special) {
                                this.unitsPreGame.add(u.Name);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    this.unitsPreGame = this.SortUnitsLists(this.unitsPreGame);
                }
                DarkKingdomCore.MyGame.plrs[0].unitsList = this.unitsPreGame;

                this.lblVsPreGame.Text = System.String.format("{0} VS {1}", this.localize.GetString(DarkKingdomCore.MyGame.plrs[0].race), this.localize.GetString(DarkKingdomCore.MyGame.plrs[1].race));

                $t2 = Bridge.getEnumerator(this.spells.Values);
                try {
                    while ($t2.moveNext()) {
                        var spl = $t2.Current;
                        this.spellsPreGame.add(spl.Name);
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }
                this.spellsPreGame = this.SortSpellsLists(this.spellsPreGame);
                DarkKingdomCore.MyGame.plrs[0].spllsList = this.spellsPreGame;


                DarkKingdomCore.MyGame.plrs[0].bonusList.clear();
                DarkKingdomCore.MyGame.plrs[1].bonusList.clear();

                var allbonuses = new (System.Collections.Generic.List$1(System.String)).ctor();
                allbonuses.AddRange(this.startBuildingsList);
                DarkKingdomCore.MyGame.plrs[0].bonusList.AddRange(allbonuses);
                DarkKingdomCore.MyGame.plrs[1].bonusList.AddRange(allbonuses);



                // frmPreGame.AddButton(5, delta, 16, 16, , "RandomUnits", Keys.D1)
                // frmPreGame.AddImage(5, delta, 19, 15, "small_icons", 16)
                this.cUnitsPreGame.Children.clear();
                $t3 = Bridge.getEnumerator(this.unitsPreGame);
                try {
                    while ($t3.moveNext()) {
                        var u1 = $t3.Current;
                        this.cUnitsPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor2(Bridge.fn.cacheBind(this, this.btnUnitPreGame_Clicked), Bridge.fn.cacheBind(this, this.btnUnitPreGame_Focused), 5, 5, 45, 45, 0.0, 0.0, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(DarkKingdomCore.MyGame.unitPrms.getItem(u1).$clone().iconApp.$clone(), 0, 0, 45, 45, 0.5, 0.5, true));
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }
                this.cUnitsPreGame.ApplyTheme(this.defaultTheme);
                // frmPreGame.AddButton(5, delta, 16, 16, , "RandomSpells", Keys.D2)
                // frmPreGame.AddImage(5, delta, 19, 15, "small_icons", 16)

                this.cSpellsPreGame.Children.clear();
                $t4 = Bridge.getEnumerator(this.spellsPreGame);
                try {
                    while ($t4.moveNext()) {
                        var s = $t4.Current;
                        this.cSpellsPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor2(Bridge.fn.cacheBind(this, this.btnSpellsPreGame_Clicked), Bridge.fn.cacheBind(this, this.btnSpellsPreGame_Focused), 5, 5, 45, 45, 0.0, 0.0, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("spells_icons"), this.spells.getItem(s).Img), 0, 0, 45, 45, 0.5, 0.5, true));
                    }
                } finally {
                    if (Bridge.is($t4, System.IDisposable)) {
                        $t4.System$IDisposable$Dispose();
                    }
                }
                this.cSpellsPreGame.ApplyTheme(this.defaultTheme);
                // frmPreGame.AddButton(5, delta, 16, 16, , "RandomBuildings", Keys.D3)
                // frmPreGame.AddImage(5, delta, 19, 15, "small_icons", 16)


                this.cBuildingsPreGame.Children.clear();
                $t5 = Bridge.getEnumerator(this.startBuildingsList);
                try {
                    while ($t5.moveNext()) {
                        var b = $t5.Current;
                        this.cBuildingsPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor2(Bridge.fn.cacheBind(this, this.btnBuildingPreGame_Clicked), Bridge.fn.cacheBind(this, this.btnBuildingPreGame_Focused), 5, 5, 45, 45, 0.0, 0.0, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(DarkKingdomCore.MyGame.unitPrms.getItem(b).$clone().iconApp.$clone(), 0, 0, 45, 45, 0.5, 0.5, true));
                    }
                } finally {
                    if (Bridge.is($t5, System.IDisposable)) {
                        $t5.System$IDisposable$Dispose();
                    }
                }
                this.cBuildingsPreGame.ApplyTheme(this.defaultTheme);

                this.cSelectedPreGame.Children.clear();
                for (var i = 0; i < this.preGameSlotCnt; i = (i + 1) | 0) {
                    this.cSelectedPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor2(Bridge.fn.cacheBind(this, this.btnSelectedPreGame_Clicked), Bridge.fn.cacheBind(this, this.btnSelectedPreGame_Focused), 5, 5, 45, 45, 0.0, 0.5, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(this.defaultTheme.EmptyTexture.$clone(), 0, 0, 45, 45, 0.5, 0.5, true));
                }
                this.cSelectedPreGame.ApplyTheme(this.defaultTheme);

                this.preGameUnits.clear();
                this.preGameSpells.clear();
                this.preGameBonus.clear();

                this.cUnitsPreGame.Visible = true;


                this.frmPreGame.Show(this.mainAnimator);

                this.btnUnitsPreGame.Click(0, 0, false);
                this.SetPreGameLists();
            },
            ShowDialogConfirmation: function (str) {
                this.lblTextFrmConfirm.Text = str;
                this.frmConfirm.Show(this.mainAnimator);

                this.taskConfirm = new System.Threading.Tasks.TaskCompletionSource();
                return this.taskConfirm.task;
            },
            SetPlayerAI: function (val) {
                DarkKingdomCore.MyGame.plrs[0].AI = val;
                this.lblAIFrmBattleMenu.Text = val ? "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043d\u0430 \u0438\u0433\u0440\u043e\u043a\u0430" : "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043d\u0430 \u0418\u0418";
            },
            StartPlaying: function () {
                var $t;
                this.ShowSomeChildren([this.frmUnits, this.frmResources]);
                this.HideSomeChildren([this.frmMainMenu, this.frmRightMenu]);


                this.SetPlayerAI(this.startAutofight);

                DarkKingdomCore.MyGame.plrs[0].unitsList.clear();
                DarkKingdomCore.MyGame.plrs[0].spllsList.clear();
                DarkKingdomCore.MyGame.plrs[0].bonusList.clear();

                DarkKingdomCore.MyGame.plrs[0].unitsList.AddRange(this.preGameUnits);
                DarkKingdomCore.MyGame.plrs[0].spllsList.AddRange(this.preGameSpells);
                DarkKingdomCore.MyGame.plrs[0].bonusList.AddRange(this.preGameBonus);


                // ÐÑÐ±Ð¸ÑÐ°ÐµÐ¼ ÑÑÑÐµÑÑÐ² Ð²ÑÐ¾ÑÐ¾Ð¼Ñ Ð¸Ð³ÑÐ¾ÐºÑ
                if (DarkKingdomCore.RaceManager.Instance.All.getItem(DarkKingdomCore.MyGame.plrs[1].race).custom) {
                    DarkKingdomCore.MyGame.plrs[1].unitsList = this.RandomizeUnits(7, new (System.Collections.Generic.List$1(System.String)).ctor(), false);
                } else {
                    var allunts = new (System.Collections.Generic.List$1(System.String)).ctor();
                    $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                    try {
                        while ($t.moveNext()) {
                            var u = $t.Current.$clone();
                            if (Bridge.referenceEquals(u.Race, DarkKingdomCore.MyGame.plrs[1].race) && !u.special) {
                                allunts.add(u.Name);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    DarkKingdomCore.MyGame.plrs[1].unitsList = this.RandomizeUnits(7, allunts, true);
                }

                DarkKingdomCore.MyGame.plrs[1].bonusList = this.RandomizeBuildings(((10 - DarkKingdomCore.MyGame.plrs[1].unitsList.Count) | 0), DarkKingdomCore.MyGame.plrs[1].bonusList);



                DarkKingdomCore.MyGame.plrs[0].hero = "Castle";
                DarkKingdomCore.MyGame.plrs[1].hero = "Castle";

                DarkKingdomCore.MyGame.plrs[0].castleFileName = this.GetCatleFileName(DarkKingdomCore.MyGame.plrs[0].race);
                DarkKingdomCore.MyGame.plrs[1].castleFileName = this.GetCatleFileName(DarkKingdomCore.MyGame.plrs[1].race);

                this.StartAgain();

                if (!Bridge.referenceEquals(DarkKingdomCore.MyGame.plrs[0].hero, "")) {
                    DarkKingdomCore.MyGame.units.getItem(0).parameters.Race = DarkKingdomCore.MyGame.plrs[0].race;
                }

                if (!Bridge.referenceEquals(DarkKingdomCore.MyGame.plrs[1].hero, "")) {
                    if (Bridge.referenceEquals(DarkKingdomCore.MyGame.plrs[0].hero, "")) {
                        DarkKingdomCore.MyGame.units.getItem(0).parameters.Race = DarkKingdomCore.MyGame.plrs[1].race;
                    } else {
                        DarkKingdomCore.MyGame.units.getItem(1).parameters.Race = DarkKingdomCore.MyGame.plrs[1].race;
                    }
                }

                this.btnSelectUnits.Click(0, 0, true);

                this.ShowInfoPar(this.localize.GetString((System.Enum.toString(DarkKingdomCore.GameType, this.gType) || "") + "Desc"), DarkKingdomCore.MyGame.goodAbilClr.$clone(), ((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0), ((Bridge.Int.div(DarkKingdomCore.MyGame.gameHeight, 2)) | 0), true, true);
            },
            GetCatleFileName: function (race) {
                switch (race) {
                    case "Humans": 
                        return "hqs_daemonic";
                    case "Demons": 
                        return "hqs_human";
                    case "Dwarfs": 
                        return "hqs_dvarven";
                    case "Elves": 
                        return "hqs_elvish";
                    case "Horde": 
                        return "hqs_orcish";
                    case "Steampunk": 
                        return "hqs_steampunk";
                    case "Swampers": 
                        return "hqs_swampclan";
                    case "Undeads": 
                        return "hqs_undead";
                }
                ;
                return "hqs";
            },
            StartBattle: function () {
                this.frmBattle.Show(this.mainAnimator);
                this.frmPreGame.Hide(this.mainAnimator);

                this.races1SwitcherFrmBattle.Current = 0;
                this.races2SwitcherFrmBattle.Current = 0;
                this.modeSwitcherFrmBattle.Current = 1;
            },
            SetPreGameLists: function () {
                for (var i = 0; i < this.preGameSlotCnt; i = (i + 1) | 0) {
                    var btn = Bridge.as(this.cSelectedPreGame.Children.getItem(i), MonoInterface.Button);
                    var pct = Bridge.as(btn.Children.getItem(0), MonoInterface.Picture);
                    if (this.preGameUnits.Count > i) {
                        pct.spriteRef = DarkKingdomCore.MyGame.unitPrms.getItem(this.preGameUnits.getItem(i)).$clone().iconApp.$clone();
                    } else {
                        if (this.preGameSpells.Count > ((i - this.preGameUnits.Count) | 0)) {
                            pct.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("spells_icons"), this.spells.getItem(this.preGameSpells.getItem(((i - this.preGameUnits.Count) | 0))).Img);
                        } else {
                            if (this.preGameBonus.Count > ((((i - this.preGameUnits.Count) | 0) - this.preGameSpells.Count) | 0)) {
                                pct.spriteRef = DarkKingdomCore.MyGame.unitPrms.getItem(this.preGameBonus.getItem(((((i - this.preGameUnits.Count) | 0) - this.preGameSpells.Count) | 0))).$clone().iconApp.$clone();
                            } else {
                                pct.spriteRef = this.defaultTheme.EmptyTexture.$clone();
                            }
                        }
                    }
                }
                var completedAll = ((((this.preGameUnits.Count + this.preGameSpells.Count) | 0) + this.preGameBonus.Count) | 0) === 10;

                for (var i1 = 0; i1 < this.unitsPreGame.Count; i1 = (i1 + 1) | 0) {
                    (Bridge.as(this.cUnitsPreGame.Children.getItem(i1), MonoInterface.Button)).IsDisabled = this.preGameUnits.contains(this.unitsPreGame.getItem(i1)) || completedAll || this.preGameUnits.Count === 7;
                }

                for (var i2 = 0; i2 < this.spellsPreGame.Count; i2 = (i2 + 1) | 0) {
                    (Bridge.as(this.cSpellsPreGame.Children.getItem(i2), MonoInterface.Button)).IsDisabled = this.preGameSpells.contains(this.spellsPreGame.getItem(i2)) || completedAll || this.preGameSpells.Count === 7;
                }

                for (var i3 = 0; i3 < this.startBuildingsList.Count; i3 = (i3 + 1) | 0) {
                    (Bridge.as(this.cBuildingsPreGame.Children.getItem(i3), MonoInterface.Button)).IsDisabled = this.preGameBonus.contains(this.startBuildingsList.getItem(i3)) || completedAll || this.preGameBonus.Count === 7;
                }

                this.btnFightPreGame.IsDisabled = ((((this.preGameUnits.Count + this.preGameSpells.Count) | 0) + this.preGameBonus.Count) | 0) === 0;
            },
            SetEditorUnits: function () { },
            SortUnitsLists: function (units) {
                return System.Linq.Enumerable.from(units, System.String).orderBy(function (unit) {
                        return DarkKingdomCore.MyGame.unitPrms.getItem(unit).$clone().Cost.Tier;
                    }).thenBy(function (unit) {
                    return DarkKingdomCore.MyGame.unitPrms.getItem(unit).$clone().Cost.Money;
                }).toList(System.String);
            },
            SortSpellsLists: function (spells) {
                return System.Linq.Enumerable.from(spells, System.String).orderBy(Bridge.fn.bind(this, function (spell) {
                        return this.spells.getItem(spell).Cost.Tier;
                    })).thenBy(Bridge.fn.bind(this, function (spell) {
                    return this.spells.getItem(spell).Cost.Death;
                })).toList(System.String);
            },
            Newborn: function (plr, u, inStack) {
                var $t, $t1, $t2;
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var uu = $t.Current;
                        if (uu.owner === DarkKingdomCore.MyGame.plrs[plr].id && uu.AbsContains("WombAbil")) {
                            u.x = uu.x + Bridge.Int.mul(5, DarkKingdomCore.MyGame.plrs[plr].moveside);
                        }
                        if (uu.owner === DarkKingdomCore.MyGame.plrs[plr].id && uu.AbsContains("Stack_helper") && inStack) {
                            u.x = uu.x + Bridge.Int.mul(10, DarkKingdomCore.MyGame.plrs[plr].moveside);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (u.AbsContains("Random_position")) {
                    u.x = DarkKingdomCore.MyGame.rnd.Next$2(50, ((DarkKingdomCore.MyGame.gameWidth - 49) | 0));
                    DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 2), u.x - 25, ((((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) - this.us2) | 0) - 25) | 0), 0, 0, 20));
                }
                if (u.AbsContains("Free")) {
                    u.parameters.Cost.Money = 80;
                    if (u.x <= DarkKingdomCore.MyGame.gameWidth / 2.0) {
                        u.owner = 0;
                        u.moveside = DarkKingdomCore.MyGame.plrs[0].moveside;
                    } else {
                        u.owner = 1;
                        u.moveside = DarkKingdomCore.MyGame.plrs[1].moveside;
                    }
                }
                if (u.abils.containsKey("Sacrifice")) {
                    var uu1 = this.FindRandomUnflyUnit(((1 - plr) | 0));
                    if (uu1 != null) {
                        u.x = uu1.x;
                        this.Kill(uu1);
                        this.ShowInfoPar("\u041f\u0440\u0438\u0437\u0432\u0430\u043d", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                    }
                }
                if (u.abils.containsKey("Assault")) {
                    var uu2 = this.FindFirstUnflyUnit(plr);
                    if (uu2 != null) {
                        u.x = uu2.x - Bridge.Int.mul(this.us2, DarkKingdomCore.MyGame.plrs[plr].moveside);
                        DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 2), u.x - 25, ((((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) - this.us2) | 0) - 25) | 0), 0, 0, 20));
                    }
                }
                if (u.abils.containsKey("Encourage_first")) {
                    var uu3 = this.FindFirstUnflyUnit(u.owner);
                    if (uu3 != null) {
                        u.abils.getItem("Encourage_first").used = true;
                        uu3.parameters.Armor = "Heavy";
                        uu3.Attack = DarkKingdomCore.Attack.op_Addition$1(uu3.Attack.$clone(), (u.abils.getItem("Encourage_first").value) | 0);
                        this.ShowInfoPar("\u0423\u0441\u0438\u043b\u0435\u043d", DarkKingdomCore.MyGame.goodAbilClr.$clone(), uu3.x, ((DarkKingdomCore.MyGame.hor + uu3.parameters.rect.Top) | 0), true);
                    }
                }
                if (u.abils.containsKey("Swarm")) {
                    $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t1.moveNext()) {
                            var uu4 = $t1.Current;
                            if (!Bridge.referenceEquals(uu4, u) && uu4.owner === u.owner && uu4.AbsContains("Swarm")) {
                                uu4.Attack = DarkKingdomCore.Attack.op_Addition$1(uu4.Attack.$clone(), (u.abils.getItem("Swarm").value) | 0);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
                $t2 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t2.moveNext()) {
                        var uu5 = $t2.Current;
                        if (uu5.owner !== u.owner && uu5.AbsContains("Poison_on_prod") && DarkKingdomCore.MyGame.rnd.Next$1(100) < uu5.abils.getItem("Poison_on_prod").value) {
                            u.AddAbility$1("Poison", DarkKingdomCore.EffectType.Poison);
                            this.ShowInfoPar("\u0412\u0440\u0430\u0433 \u043e\u0442\u0440\u0430\u0432\u043b\u0435\u043d", DarkKingdomCore.MyGame.goodAbilClr.$clone(), uu5.x, ((DarkKingdomCore.MyGame.hor + uu5.parameters.rect.Top) | 0), true);
                        }
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }
            },
            ProduceUnit: function (plr, name, atkbonus, hpbonus, armorChange, addabils, inStack) {
                var $t, $t1, $t2, $t3, $t4;
                if (atkbonus === void 0) { atkbonus = 0; }
                if (hpbonus === void 0) { hpbonus = 0; }
                if (armorChange === void 0) { armorChange = ""; }
                if (addabils === void 0) { addabils = null; }
                if (inStack === void 0) { inStack = false; }
                if (!DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone().upgrade) {
                    var u = new DarkKingdomCore.Unit(this, ((DarkKingdomCore.MyGame.plrs[plr].baseX + DarkKingdomCore.MyGame.plrs[plr].moveside) | 0), DarkKingdomCore.MyGame.plrs[plr].moveside, DarkKingdomCore.MyGame.plrs[plr].id, DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone());
                    if (addabils != null) {
                        $t = Bridge.getEnumerator(addabils);
                        try {
                            while ($t.moveNext()) {
                                var a = $t.Current;
                                u.AddAbility(a);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                    u.Attack = DarkKingdomCore.Attack.op_Addition$1(u.Attack.$clone(), atkbonus | 0);
                    ($t1 = u.parameters.$clone()).maxhp = ($t1.maxhp + hpbonus) | 0;
                    u.hp += hpbonus;
                    if (!Bridge.referenceEquals(armorChange, "")) {
                        u.parameters.Armor = armorChange;
                    }


                    this.Newborn(plr, u, inStack);
                    this.bornList.add(u);
                } else {
                    switch (name) {
                        case "Tier_2": 
                            {
                                ($t2 = DarkKingdomCore.MyGame.plrs[plr].res.$clone()).Tier = ($t2.Tier + 1) | 0;
                                if (plr === 0) {
                                    this.pctTierFrmResources.spriteRef = DarkKingdomCore.MyGame.unitPrms.getItem("Tier_3").$clone().iconApp.$clone();
                                }
                                break;
                            }
                        case "Tier_3": 
                            {
                                ($t3 = DarkKingdomCore.MyGame.plrs[plr].res.$clone()).Tier = ($t3.Tier + 1) | 0;
                                break;
                            }
                    }
                    $t4 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t4.moveNext()) {
                            var u1 = $t4.Current;
                            if (u1.owner === plr && u1.AbsContains("Refresh") && u1.hp < u1.parameters.maxhp) {
                                u1.hp = u1.parameters.maxhp;
                                this.ShowInfoPar("\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u1.x, ((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Top) | 0), true);
                            }
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Kill: function (u) {
                if (!this.deathlist.contains(u)) {
                    this.deathlist.add(u);
                }
            },
            ChangeLandscape: function (newl) {
                DarkKingdomCore.MyGame.backpars.clear();
                DarkKingdomCore.MyGame.bushpars.clear();
                switch (newl) {
                    case DarkKingdomCore.LandscapeType.PlainLS: 
                        {
                            this.landBmp = "ground";
                            var num = DarkKingdomCore.MyGame.rnd.Next$2(5, 11);
                            for (var i = 0; i < num; i = (i + 1) | 0) {
                                DarkKingdomCore.MyGame.backpars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("back0"), DarkKingdomCore.MyGame.rnd.Next$1(4)), ((((125 + Bridge.Int.mul(((Bridge.Int.div((((DarkKingdomCore.MyGame.gameWidth - 250) | 0)), (((num - 1) | 0)))) | 0), i)) | 0) - 42) | 0) + 40 * DarkKingdomCore.MyGame.rnd.NextDouble(), ((DarkKingdomCore.MyGame.hor - 70) | 0), 0, 0, -1, DarkKingdomCore.MyGame.rnd.NextDouble() > 0.5));
                            }
                            num = DarkKingdomCore.MyGame.rnd.Next$2(40, 51);
                            for (var i1 = 0; i1 < num; i1 = (i1 + 1) | 0) {
                                DarkKingdomCore.MyGame.bushpars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("bush0"), DarkKingdomCore.MyGame.rnd.Next$1(5)), ((Bridge.Int.mul(((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, (((num - 1) | 0)))) | 0), i1) - 42) | 0) + 40 * DarkKingdomCore.MyGame.rnd.NextDouble(), ((DarkKingdomCore.MyGame.hor - 15) | 0), 0, 0, -1));
                            }
                            break;
                        }
                    case DarkKingdomCore.LandscapeType.DesertLS: 
                        {
                            this.landBmp = "desert";
                            break;
                        }
                    case DarkKingdomCore.LandscapeType.SwampLS: 
                        {
                            this.landBmp = "swamp";
                            var num1 = DarkKingdomCore.MyGame.rnd.Next$2(10, 11);
                            for (var i2 = 0; i2 < num1; i2 = (i2 + 1) | 0) {
                                DarkKingdomCore.MyGame.backpars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("back1"), DarkKingdomCore.MyGame.rnd.Next$1(3)), ((((125 + Bridge.Int.mul(((Bridge.Int.div((((DarkKingdomCore.MyGame.gameWidth - 250) | 0)), (((num1 - 1) | 0)))) | 0), i2)) | 0) - 42) | 0) + 40 * DarkKingdomCore.MyGame.rnd.NextDouble(), ((DarkKingdomCore.MyGame.hor - 70) | 0), 0, 0, -1, DarkKingdomCore.MyGame.rnd.NextDouble() > 0.5));
                            }
                            break;
                        }
                    case DarkKingdomCore.LandscapeType.DeathlandLS: 
                        {
                            this.landBmp = "deathland";
                            var num2 = DarkKingdomCore.MyGame.rnd.Next$2(5, 11);
                            for (var i3 = 0; i3 < num2; i3 = (i3 + 1) | 0) {
                                DarkKingdomCore.MyGame.backpars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("back2"), DarkKingdomCore.MyGame.rnd.Next$1(4)), ((((125 + Bridge.Int.mul(((Bridge.Int.div((((DarkKingdomCore.MyGame.gameWidth - 250) | 0)), (((num2 - 1) | 0)))) | 0), i3)) | 0) - 50) | 0) + 40 * DarkKingdomCore.MyGame.rnd.NextDouble(), ((DarkKingdomCore.MyGame.hor - 70) | 0), 0, 0, -1, DarkKingdomCore.MyGame.rnd.NextDouble() > 0.5));
                            }
                            break;
                        }
                    case DarkKingdomCore.LandscapeType.MechanicsLS: 
                        {
                            this.landBmp = "mechanics";
                            break;
                        }
                    case DarkKingdomCore.LandscapeType.ForestLS: 
                        {
                            this.landBmp = "forest";
                            var num3 = DarkKingdomCore.MyGame.rnd.Next$2(10, 16);
                            for (var i4 = 0; i4 < num3; i4 = (i4 + 1) | 0) {
                                DarkKingdomCore.MyGame.backpars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("back0"), DarkKingdomCore.MyGame.rnd.Next$1(4)), ((((125 + Bridge.Int.mul(((Bridge.Int.div((((DarkKingdomCore.MyGame.gameWidth - 250) | 0)), (((num3 - 1) | 0)))) | 0), i4)) | 0) - 32) | 0) + 20 * DarkKingdomCore.MyGame.rnd.NextDouble(), ((DarkKingdomCore.MyGame.hor - 70) | 0), 0, 0, -1, DarkKingdomCore.MyGame.rnd.NextDouble() > 0.5));
                            }
                            break;
                        }
                    case DarkKingdomCore.LandscapeType.InfernoLS: 
                        {
                            this.landBmp = "infernoland";
                            break;
                        }
                }
            },
            UpdateSkyTexture: function (tex, h, clr1R, clr1G, clr1B, clr1A, clr2R, clr2G, clr2B, clr2A) {
                var dR = (clr2R - clr1R) / h;
                var dG = (clr2G - clr1G) / h;
                var dB = (clr2B - clr1B) / h;
                var dA = (clr2A - clr1A) / h;
                var data = System.Array.init(h, function (){
                    return new Microsoft.Xna.Framework.Color();
                }, Microsoft.Xna.Framework.Color);
                for (var i = 0; i < h; i = (i + 1) | 0) {
                    data[i] = new Microsoft.Xna.Framework.Color.$ctor7(Bridge.Int.clip32(clr1R), Bridge.Int.clip32(clr1G), Bridge.Int.clip32(clr1B), Bridge.Int.clip32(clr1A));
                    clr1R += dR;
                    clr1G += dG;
                    clr1B += dB;
                    clr1A += dA;
                }
                tex.SetData$1(Microsoft.Xna.Framework.Color, data, 0, h);
            },
            Draw: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                this.skyR = this.cnstR * (0.5 + this.snS / 2);
                this.skyG = this.cnstG * (0.5 + this.snS / 2);
                this.skyB = this.cnstB * (0.5 + this.snS / 2);
                this.skyR2 = this.cnstR2 * (0.66 + this.snS / 3);
                this.skyG2 = this.cnstG2 * (0.66 + this.snS / 3);
                this.skyB2 = this.cnstB2 * (0.66 + this.snS / 3);
                // lgb = New Drawing2D.LinearGradientBrush(skyrect, New Color(skyR, skyG, skyB), New Color(skyR2, skyG2, skyB2), 90)
                // g.FillRectangle(lgb, skyrect)

                this.UpdateSkyTexture(this.skytexture, this.skyrect.Height, this.skyR, this.skyG, this.skyB, 255, this.skyR2, this.skyG2, this.skyB2, 255);
                DarkKingdomCore.MyGame.FillRectangle(this.spriteBatch, this.skytexture, this.skyrect.$clone());

                if (this.snS > -0.5 && this.snS < 0.5) {
                    // sunsetlgb = New Drawing2D.LinearGradientBrush(skyrect, Color.Empty, Color.FromArgb((1 - Math.Abs(snS) * 2) * 100, sunsetclr), 90)
                    this.UpdateSkyTexture(this.sunsettexture, this.skyrect.Height, 0, 0, 0, 0, this.sunsetclr.R, this.sunsetclr.G, this.sunsetclr.B, (1 - Math.abs(this.snS) * 2) * 100);
                    DarkKingdomCore.MyGame.FillRectangle(this.spriteBatch, this.sunsettexture, this.skyrect.$clone());
                }
                // sunsetlgb = New Drawing2D.LinearGradientBrush(skyrect, Color.Empty, New Color((1 - Math.Abs(snS) * 2) * 100, sunsetclr), 90)
                // g.FillRectangle(sunsetlgb, skyrect)

                if (this.snS < 0) {
                    for (var i = 0; i < this.starsCnt; i = (i + 1) | 0) {
                        DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.starTex, Bridge.Int.clip32(this.stars[i].X), Bridge.Int.clip32(this.stars[i].Y), 1, 1);
                    }
                }



                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.backpars);
                try {
                    while ($t.moveNext()) {
                        var p = Bridge.cast($t.Current, DarkKingdomCore.Particle);
                        p.XNADraw(this.spriteBatch);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                for (var i1 = 0; i1 < DarkKingdomCore.MyGame.gameWidth; i1 = (i1 + 100) | 0) {
                    DarkKingdomCore.MyGame.sprites.getItem(this.landBmp).Draw$1(0, i1, ((DarkKingdomCore.MyGame.hor - 20) | 0), this.spriteBatch);
                }

                $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.bushpars);
                try {
                    while ($t1.moveNext()) {
                        var p1 = Bridge.cast($t1.Current, DarkKingdomCore.Particle);
                        p1.XNADraw(this.spriteBatch);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                if (this.selU != null) {
                    DarkKingdomCore.MyGame.sprites.getItem("effects").Draw$1(0, this.selU.x + this.deltax - 14, ((DarkKingdomCore.MyGame.hor - 22) | 0), this.spriteBatch);
                    if (this.selU.Attack.Range > 1) {
                    }
                }

                $t2 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t2.moveNext()) {
                        var u = $t2.Current;
                        if (u.owner === 0 || !u.AbsContains("Invisible")) {

                            // If u IsNot selU And u.x + u.params.rect.Right > m.X And m.X > u.x + u.params.rect.Left And hor + u.params.rect.Bottom > m.Y And m.Y > hor + u.params.rect.Top Then
                            // DrawSprite(spriteBatch, "effects", 0, u.x + deltax - 14, hor - 22)
                            // End If

                            this.deltay = 0;
                            this.deltax = 0;

                            if (!u.parameters.isBuilding && u.atkRecharge > ((u.parameters.Attack.Speed - 30) | 0) && u.atkRecharge < u.parameters.Attack.Speed) {
                                this.deltax = (Bridge.Int.div(Bridge.Int.mul(u.moveside, (((((u.atkRecharge - u.parameters.Attack.Speed) | 0) + 30) | 0))), 10)) | 0;
                            }

                            if (!u.isInCombat && u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) {
                                if (u.AbsContains("Bodyless")) {
                                    this.deltay = 3.0 * Math.sin(u.wingsWave);
                                } else {
                                    this.deltay = 2.0 * Math.sin(u.wingsWave);
                                }
                            }
                            DarkKingdomCore.MyGame.sprites.getItem("effects").Draw$1(1, u.x + this.deltax - 15, ((DarkKingdomCore.MyGame.hor - 22) | 0), this.spriteBatch);

                            if (u.moveside === 1) {
                                u.DrawCurrent(Bridge.Int.clip32(u.x + u.parameters.rect.Left + this.deltax + u.parameters.imgx), Bridge.Int.clip32(((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0) + this.deltay + u.parameters.imgy + 1), this.spriteBatch);
                            } else {
                                u.DrawCurrent(Bridge.Int.clip32(u.x + u.parameters.rect.Right + this.deltax - DarkKingdomCore.MyGame.sprites.getItem(u.parameters.spriteName).W - u.parameters.imgx), Bridge.Int.clip32(((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0) + this.deltay + u.parameters.imgy + 1), this.spriteBatch, Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally);
                            }

                            if (u.AbsContains("Invisible")) {
                                DarkKingdomCore.MyGame.sprites.getItem("effects").Draw$1(2, u.x - 16, ((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Y) | 0) - 32) | 0), this.spriteBatch);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }


                $t3 = Bridge.getEnumerator(this.ammos);
                try {
                    while ($t3.moveNext()) {
                        var a = $t3.Current;
                        switch (a.type) {
                            case DarkKingdomCore.Ammo.AmmoType.Arrow: 
                            case DarkKingdomCore.Ammo.AmmoType.FastArrow: 
                                {
                                    var dx, dy;
                                    var n = Math.sqrt(a.vx * a.vx + a.vy * a.vy);
                                    dx = a.vx / n * 6;
                                    dy = a.vy / n * 6;
                                    break;
                                }
                            case DarkKingdomCore.Ammo.AmmoType.BigArrow: 
                                {
                                    var dx1, dy1;
                                    var n1 = Math.sqrt(a.vx * a.vx + a.vy * a.vy);
                                    dx1 = a.vx / n1 * 12;
                                    dy1 = a.vy / n1 * 12;
                                    break;
                                }
                            default: 
                                {
                                    if (a.vx >= 0) {
                                        DarkKingdomCore.MyGame.sprites.getItem("ammos").Draw$1(a.img, a.x - 5, a.y - 5, this.spriteBatch);
                                    } else {
                                        DarkKingdomCore.MyGame.sprites.getItem("ammos").Draw$1(a.img, a.x - 5, a.y - 5, this.spriteBatch, Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally);
                                    }
                                    break;
                                }
                        }
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }


                $t4 = Bridge.getEnumerator(DarkKingdomCore.MyGame.pars);
                try {
                    while ($t4.moveNext()) {
                        var p2 = $t4.Current;
                        p2.XNADraw(this.spriteBatch);
                    }
                } finally {
                    if (Bridge.is($t4, System.IDisposable)) {
                        $t4.System$IDisposable$Dispose();
                    }
                }

                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame || DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Win || DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Lose) {
                    if (Bridge.referenceEquals(DarkKingdomCore.MyGame.plrs[0].hero, "Castle")) {
                        var castlebmp = (DarkKingdomCore.MyGame.plrs[0].castleFileName || "") + "1";
                        DarkKingdomCore.MyGame.sprites.getItem(castlebmp).Draw$1(0, 0, ((((DarkKingdomCore.MyGame.hor - Bridge.Int.mul(2, this.unitSize)) | 0) + 1) | 0), this.spriteBatch);
                    }
                    if (Bridge.referenceEquals(DarkKingdomCore.MyGame.plrs[1].hero, "Castle")) {
                        var castlebmp1 = (DarkKingdomCore.MyGame.plrs[1].castleFileName || "") + "1";
                        DarkKingdomCore.MyGame.sprites.getItem(castlebmp1).Draw$1(1, ((((DarkKingdomCore.MyGame.gameWidth - this.unitSize) | 0) + 1) | 0), ((((DarkKingdomCore.MyGame.hor - Bridge.Int.mul(2, this.unitSize)) | 0) + 2) | 0), this.spriteBatch);
                    }
                }

                if (this.snS < 0.2) {
                }

                if (this.snS > 0) {
                    DarkKingdomCore.MyGame.sprites.getItem("world").Draw$1(0, ((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0) - (((((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0) + 80) | 0)) * this.csS - 60, DarkKingdomCore.MyGame.gameHeight - (((DarkKingdomCore.MyGame.gameHeight - 140) | 0)) * this.snS - 60, this.spriteBatch);
                } else {
                    DarkKingdomCore.MyGame.sprites.getItem("world").Draw$1(1, ((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0) + (((((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0) + 80) | 0)) * this.csS - 60, DarkKingdomCore.MyGame.gameHeight + (((DarkKingdomCore.MyGame.gameHeight - 140) | 0)) * this.snS - 60, this.spriteBatch);
                }


                $t5 = Bridge.getEnumerator(DarkKingdomCore.MyGame.cloudpars);
                try {
                    while ($t5.moveNext()) {
                        var p3 = Bridge.cast($t5.Current, DarkKingdomCore.Particle);
                        p3.XNADraw(this.spriteBatch);
                    }
                } finally {
                    if (Bridge.is($t5, System.IDisposable)) {
                        $t5.System$IDisposable$Dispose();
                    }
                }


                $t6 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t6.moveNext()) {
                        var u1 = $t6.Current;
                        if ((!u1.AbsContains("Invisible") || u1.owner === 0) && (u1.hp < u1.parameters.maxhp || Bridge.referenceEquals(u1, this.selU) || !Bridge.referenceEquals(u1.shownAbil, ""))) {
                            if (!u1.parameters.hpBotom) {
                                if (Bridge.referenceEquals(u1.shownAbil, "")) {
                                    DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarBackTex, ((((2 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Y) | 0) - 6) | 0), ((u1.parameters.rect.Width - 4) | 0), 4);
                                    if (u1.AbsContains("Poison")) {
                                        DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarPoisonTex, ((((3 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Y) | 0) - 5) | 0), Bridge.Int.clip32(u1.hp * (((u1.parameters.rect.Width - 6) | 0)) / u1.parameters.maxhp), 2);
                                    } else {
                                        DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarLifeTex, ((((3 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Y) | 0) - 5) | 0), Bridge.Int.clip32(u1.hp * (((u1.parameters.rect.Width - 6) | 0)) / u1.parameters.maxhp), 2);
                                    }
                                } else if (u1.abils.containsKey(u1.shownAbil)) {
                                    DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarBackTex, ((((2 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Y) | 0) - 9) | 0), ((u1.parameters.rect.Width - 4) | 0), 7);
                                    if (u1.AbsContains("Poison")) {
                                        DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarPoisonTex, ((((3 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Y) | 0) - 5) | 0), Bridge.Int.clip32(u1.hp * (((u1.parameters.rect.Width - 6) | 0)) / u1.parameters.maxhp), 2);
                                    } else {
                                        DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarLifeTex, ((((3 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Y) | 0) - 5) | 0), ((Bridge.Int.div(Bridge.Int.mul(Bridge.Int.clip32(u1.hp), (((u1.parameters.rect.Width - 6) | 0))), u1.parameters.maxhp)) | 0), 2);
                                    }
                                    DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarAbilTex, ((((3 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((((DarkKingdomCore.MyGame.hor + u1.parameters.rect.Y) | 0) - 8) | 0), ((Bridge.Int.div(Bridge.Int.mul(u1.abils.getItem(u1.shownAbil).value, (((u1.parameters.rect.Width - 6) | 0))), u1.shownAbilMaxVal)) | 0), 2);
                                } else {
                                    u1.shownAbil = "";
                                }
                            } else {
                                DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarBackTex, ((((2 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((DarkKingdomCore.MyGame.hor + 6) | 0), ((u1.parameters.rect.Width - 4) | 0), 5);
                                DarkKingdomCore.MyGame.FillRectangle$1(this.spriteBatch, this.healthBarLifeTex, ((((3 + Bridge.Int.clip32(u1.x)) | 0) + u1.parameters.rect.X) | 0), ((DarkKingdomCore.MyGame.hor + 7) | 0), Bridge.Int.clip32(u1.hp * (((u1.parameters.rect.Width - 6) | 0)) / u1.parameters.maxhp), 3);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t6, System.IDisposable)) {
                        $t6.System$IDisposable$Dispose();
                    }
                }



                $t7 = Bridge.getEnumerator(DarkKingdomCore.MyGame.uipars);
                try {
                    while ($t7.moveNext()) {
                        var p4 = $t7.Current;
                        p4.XNADraw(this.spriteBatch);
                    }
                } finally {
                    if (Bridge.is($t7, System.IDisposable)) {
                        $t7.System$IDisposable$Dispose();
                    }
                }

                if (this.globalExplode > 0) {
                    this.globalExplode -= 2;
                }
            },
            Resize: function (ww, hh, fullscreen, uiScale) {
                if (uiScale === void 0) { uiScale = 1.0; }
                this._screenWidth = ww;
                this.scaleX = DarkKingdomCore.MyGame.gameWidth / this._screenWidth;
                this._screenHeight = hh;
                this.scaleY = DarkKingdomCore.MyGame.gameHeight / this._screenHeight;
                if ((this.MainContainer != null)) {
                    this.MainContainer.W = this._screenWidth;
                    this.MainContainer.H = this._screenHeight;
                    this.MainContainer.ChildrenScaleX = uiScale;
                    this.MainContainer.ChildrenScaleY = uiScale;
                    this.MainContainer.IsNeedRecalc = true;
                }

                this.graphics.PreferredBackBufferWidth = this._screenWidth;
                this.graphics.PreferredBackBufferHeight = this._screenHeight;
                this.graphics.IsFullScreen = fullscreen;
                this.graphics.ApplyChanges();
            },
            ShowInfoPar: function (txt, clr, x, y, harm, big) {
                if (big === void 0) { big = false; }
                if (!harm) {
                    DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.TextParticle(this.defaultTheme.GetFont(12), clr.$clone(), x, y, ((Bridge.Int.div(DarkKingdomCore.MyGame.rnd.Next$2(-10, 11), 10)) | 0), -2, 0.1, 50, txt));
                } else {
                    if (big) {
                        DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.TextParticle(this.defaultTheme.GetFont(12), clr.$clone(), x, y, 0, -0.35, -0.05, 75, txt));
                    } else {
                        DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.TextParticle(this.defaultTheme.GetFont(12), clr.$clone(), x, y, 0, -0.35, -0.05, 75, txt));
                    }
                }
            },
            OnSuccessfulAttack: function (dmg, u, trg, ignoreArmor) {
                var $t, $t1, $t2, $t3, $t4;
                this.Harm(trg, dmg, ignoreArmor, DarkKingdomCore.EffectType.Normal);
                if (!ignoreArmor) {
                    dmg *= trg.parameters._armor;
                }
                $t = Bridge.getEnumerator(u.abils.Values);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        if (a.condCompleted) {
                            switch (a.name) {
                                case "Selfdamage": 
                                    {
                                        this.Harm(u, dmg, true, DarkKingdomCore.EffectType.Bad);
                                        break;
                                    }
                                case "Denying": 
                                    {
                                        if (!trg.AbsContains$1(["Bodyless", "Machinery"]) && !trg.parameters.isBuilding && trg.hp <= a.value) {
                                            this.Kill(trg);
                                            this.ShowInfoPar("\u0414\u043e\u0431\u0438\u0432\u0430\u043d\u0438\u0435", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Vampirism": 
                                    {
                                        if (!trg.AbsContains$1(["Building", "Undead", "Machinery"])) {
                                            this.Heal(u, dmg / 2);
                                        }
                                        break;
                                    }
                                case "Crasher": 
                                    {
                                        if (!trg.parameters.isBuilding && dmg >= a.value && !Bridge.referenceEquals(trg.parameters.Armor, "None")) {
                                            trg.parameters.Armor = "None";
                                            this.ShowInfoPar("\u0411\u0440\u043e\u043d\u044f \u0440\u0430\u0437\u0440\u0443\u0448\u0435\u043d\u0430", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Enjoy pain": 
                                    {
                                        if (!trg.parameters.isBuilding && trg.AbsContains("Poison")) {
                                            this.Heal(u, dmg);
                                        }
                                        break;
                                    }
                                case "Evil_eye": 
                                    {
                                        if (!trg.parameters.isBuilding && Bridge.referenceEquals(trg.parameters.Armor, "None") && !trg.AbsContains("Clumsiness")) {
                                            trg.AddAbility$1("Clumsiness", DarkKingdomCore.EffectType.Bad);
                                            this.ShowInfoPar("\u041e\u0441\u043b\u0430\u0431\u043b\u0435\u043d", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Curser": 
                                    {
                                        if (!trg.parameters.isBuilding && !trg.AbsContains("Clumsiness")) {
                                            trg.AddAbility$1("Clumsiness", DarkKingdomCore.EffectType.Bad);
                                            this.ShowInfoPar("\u041e\u0441\u043b\u0430\u0431\u043b\u0435\u043d", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Spikes_bomb": 
                                    {
                                        if (Bridge.referenceEquals(trg.parameters.Armor, "None") && !trg.AbsContains$1(["Building", "Undead", "Bodyless", "Machinery"])) {
                                            ($t1 = trg.parameters.$clone()).maxhp = ($t1.maxhp - Bridge.Int.clip32(dmg)) | 0;
                                        }
                                        break;
                                    }
                                case "Destroy_light_armor": 
                                    {
                                        if (!trg.parameters.isBuilding && Bridge.referenceEquals(trg.parameters.Armor, "Light")) {
                                            trg.parameters.Armor = "None";
                                            this.ShowInfoPar("\u0411\u0440\u043e\u043d\u044f \u0440\u0430\u0437\u0440\u0443\u0448\u0435\u043d\u0430", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Destroy_heavy_armor": 
                                    {
                                        if (!trg.parameters.isBuilding && Bridge.referenceEquals(trg.parameters.Armor, "Heavy")) {
                                            trg.parameters.Armor = "None";
                                            this.ShowInfoPar("\u0411\u0440\u043e\u043d\u044f \u0440\u0430\u0437\u0440\u0443\u0448\u0435\u043d\u0430", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Destroy_ethereal_armor": 
                                    {
                                        if (!trg.parameters.isBuilding && Bridge.referenceEquals(trg.parameters.Armor, "Ethereal")) {
                                            trg.parameters.Armor = "None";
                                            this.ShowInfoPar("\u0411\u0440\u043e\u043d\u044f \u0440\u0430\u0437\u0440\u0443\u0448\u0435\u043d\u0430", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Levitation": 
                                    {
                                        if (trg.parameters.moveType === DarkKingdomCore.UnitMoveType.GroundMT && !trg.parameters.isBuilding && !u.isInRangeCombat) {
                                            trg.takedOff = true;
                                        }
                                        break;
                                    }
                                case "Purification": 
                                    {
                                        trg.purified = true;
                                        break;
                                    }
                                case "Purification_on_first_attack": 
                                    {
                                        if (!trg.parameters.isBuilding) {
                                            trg.purified = true;
                                            u.abils.getItem("Purification_on_first_attack").used = true;
                                        }

                                        break;
                                    }
                                case "CatchAbil": 
                                    {
                                        if (!trg.parameters.isBuilding && !u.isInRangeCombat && trg.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) {
                                            u.landing = true;
                                            trg.landing = true;
                                            a.used = true;
                                        }

                                        break;
                                    }
                                case "Instant_kill": 
                                    {
                                        if (!trg.parameters.isBuilding && DarkKingdomCore.MyGame.rnd.Next$1(100) < a.value) {
                                            this.Kill(trg);
                                            u.hp -= trg.hp;
                                            this.ShowInfoPar("\u0423\u0431\u0438\u0442!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Crippling_injury": 
                                    {
                                        if (!trg.AbsContains$1(["Building", "Undead", "Bodyless", "Machinery"])) {
                                            ($t2 = trg.parameters.$clone()).maxhp = ($t2.maxhp - Bridge.Int.clip32(dmg)) | 0;
                                        }
                                        break;
                                    }
                                case "Plaguer": 
                                    {
                                        if (!trg.parameters.isBuilding && !trg.AbsContains("Plague")) {
                                            trg.AddAbility$1("Plague", DarkKingdomCore.EffectType.Bad);
                                            this.ShowInfoPar("\u0417\u0430\u0447\u0443\u043c\u043b\u0435\u043d!", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Activate plague": 
                                    {
                                        if (trg.AbsContains("Plague")) {
                                            $t3 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                            try {
                                                while ($t3.moveNext()) {
                                                    var uu = $t3.Current;
                                                    if (!uu.AbsContains$1(["Undead", "Machinery"]) && !uu.parameters.isBuilding && Math.abs(u.x - uu.x) <= Bridge.Int.mul(2, this.unitSize)) {
                                                        this.Harm(uu, DarkKingdomCore.MyGame.rnd.Next$2(10, 21), true, DarkKingdomCore.EffectType.Bad);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t3, System.IDisposable)) {
                                                    $t3.System$IDisposable$Dispose();
                                                }
                                            }
                                        }

                                        break;
                                    }
                                case "Heavy_arrows": 
                                    {
                                        if (!trg.parameters.isBuilding && trg.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT && DarkKingdomCore.MyGame.rnd.Next$1(100) < a.value) {
                                            trg.landing = true;
                                        }
                                        break;
                                    }
                                case "Slower": 
                                    {
                                        if (!trg.parameters.isBuilding && !Bridge.referenceEquals(trg.parameters.Speed, "Slow")) {
                                            trg.parameters.Speed = "Slow";
                                            this.ShowInfoPar("\u0417\u0430\u043c\u0435\u0434\u043b\u0435\u043d!", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Poisoner": 
                                    {
                                        if (DarkKingdomCore.MyGame.rnd.Next$1(100) < a.value) {
                                            this.Poison(trg);
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (u.isInRangeCombat) {
                    $t4 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t4.moveNext()) {
                            var uu1 = $t4.Current;
                            if (uu1.owner === u.owner && trg.Near(uu1) && uu1.AbsContains("Support_archers")) {
                                this.Harm(trg, DarkKingdomCore.MyGame.rnd.Next$2(10, 15), true, DarkKingdomCore.EffectType.Bad);
                            }
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Poison: function (trg) {
                if (!trg.AbsContains("Poison") && !trg.parameters.isBuilding) {
                    if (!trg.AbsContains$1(["Poisonproof", "Bodyless", "Machinery"])) {
                        trg.AddAbility$1("Poison", DarkKingdomCore.EffectType.Poison);
                        this.ShowInfoPar("\u041e\u0442\u0440\u0430\u0432\u043b\u0435\u043d!", DarkKingdomCore.MyGame.poiAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                    }
                }
            },
            OnPreAttack: function (u, trg, dmg) {
                var $t, $t1, $t2;
                var agil = false;
                $t = Bridge.getEnumerator(u.abils.Values);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        if (a.condCompleted) {
                            switch (a.name) {
                                case "We are pirates": 
                                    {
                                        do {
                                            ($t1 = DarkKingdomCore.MyGame.rnd.NextDouble());
                                            if (Bridge.is($t1, System.Object)) {
                                                var _discard1 = $t1;
                                                if (DarkKingdomCore.MyGame.rnd.NextDouble() < 0.33) {
                                                    {
                                                        this.ShowInfoPar("\u0419\u0430\u0440\u0440\u0440!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                                        break;
                                                    }
                                                }
                                            }

                                            if (Bridge.is($t1, System.Object)) {
                                                var _discard2 = $t1;
                                                if (DarkKingdomCore.MyGame.rnd.NextDouble() < 0.66) {
                                                    {
                                                        this.ShowInfoPar("\u0421\u0443\u0445\u043e\u043f\u0443\u0442\u043d\u0430\u044f \u043a\u0440\u0440\u0440\u044b\u0441\u0430!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                                        break;
                                                    }
                                                }
                                            }

                                            {
                                                {
                                                    this.ShowInfoPar("\u0422\u044b\u0441\u044f\u0447\u0430 \u0447\u0435\u0440\u0442\u0435\u0439!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                                    break;
                                                }
                                            }
                                        } while (false);
                                        break;
                                    }
                                case "Attack_bonus": 
                                    {
                                        dmg.v += a.value;
                                        break;
                                    }
                                case "Shrapnel": 
                                    {
                                        if (u.isInRangeCombat) {
                                            dmg.v -= 20 * Math.abs(u.x - trg.x) / this.unitSize;
                                        }
                                        break;
                                    }
                                case "Snipering": 
                                    {
                                        if (u.isInRangeCombat && Math.abs(u.x - trg.x) >= ((Bridge.Int.mul(u.Attack.Range, this.unitSize) - this.us2) | 0)) {
                                            dmg.v += a.value;
                                        }
                                        break;
                                    }
                                case "Landshooter": 
                                    {
                                        if (trg.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) {
                                            dmg.v /= 2;
                                        }
                                        break;
                                    }
                                case "Hate_flyers": 
                                    {
                                        if (trg.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) {
                                            dmg.v *= 2;
                                        }
                                        break;
                                    }
                                case "Hate_giants": 
                                    {
                                        if (trg.parameters.moveType === DarkKingdomCore.UnitMoveType.HugeMT) {
                                            dmg.v *= 2;
                                        }
                                        break;
                                    }
                                case "Hate_poisoned": 
                                    {
                                        if (trg.AbsContains("Poison")) {
                                            dmg.v *= 2;
                                        }
                                        break;
                                    }
                                case "Hate mages": 
                                    {
                                        if (trg.AbsContains("Mage")) {
                                            dmg.v *= 2;
                                        }
                                        break;
                                    }
                                case "Spikes_bomb": 
                                    {
                                        if (Bridge.referenceEquals(trg.parameters.Armor, "None")) {
                                            dmg.v *= 2;
                                        }
                                        break;
                                    }
                                case "Brave": 
                                    {
                                        if (DarkKingdomCore.MyGame.rnd.Next$1(100) <= a.value) {
                                            dmg.v = 3 * dmg.v;
                                            this.ShowInfoPar("\u041a\u0440\u0438\u0442!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                        }
                                        break;
                                    }
                                case "Kamikaze": 
                                    {
                                        if (!u.AbsContains("Explosive")) {
                                            this.Explode(u, u.AbsContains("Mage"));
                                        }
                                        this.Kill(u);
                                        break;
                                    }
                                case "Burst": 
                                    {
                                        if (!u.isInRangeCombat) {
                                            u.parameters.Speed = "Normal";
                                            u.abils.getItem("Burst").used = true;
                                            this.ShowInfoPar("\u0411\u0438\u0442\u0432\u0430!", DarkKingdomCore.MyGame.badAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Instability": 
                                    {
                                        if (trg.parameters.moveType === DarkKingdomCore.UnitMoveType.HugeMT || trg.AbsContains("Durability") && !u.isInRangeCombat) {
                                            this.Explode(u, u.AbsContains("Mage"));
                                            this.Kill(u);
                                        }

                                        break;
                                    }
                                case "Spawn_demons": 
                                    {
                                        if (u.isInRangeCombat && DarkKingdomCore.MyGame.plrs[u.owner].prdQ.Count > 0) {
                                            var u2 = new DarkKingdomCore.Unit(this, trg.x - Bridge.Int.mul(this.us2, u.moveside), u.moveside, u.owner, DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[u.owner].prdQ.getItem(0)).$clone());
                                            this.bornList.add(u2);
                                            this.ShowInfoPar("\u041f\u0440\u0438\u0437\u0432\u0430\u043d!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u2.x, ((DarkKingdomCore.MyGame.hor + u2.parameters.rect.Top) | 0), true);
                                            DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 2), u2.x - 25, ((((((DarkKingdomCore.MyGame.hor + u2.parameters.rect.Bottom) | 0) - this.us2) | 0) - 25) | 0), 0, 0, 20));
                                            this.RemoveFromQueue(u.owner, 0);
                                        }

                                        break;
                                    }
                                case "Melee_penalty": 
                                    {
                                        if (!u.isInRangeCombat) {
                                            dmg.v /= 2;
                                        }
                                        break;
                                    }
                                case "Range_penalty": 
                                    {
                                        if (u.isInRangeCombat) {
                                            dmg.v /= 2;
                                        }
                                        break;
                                    }
                                case "First_shoot": 
                                    {
                                        if (u.isInRangeCombat) {
                                            dmg.v += a.value;
                                            u.abils.getItem("First_shoot").used = true;
                                            this.ShowInfoPar("\u0423\u0441\u0438\u043b\u0435\u043d\u043d\u044b\u0439 \u0432\u044b\u0441\u0442\u0440\u0435\u043b!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                        }

                                        break;
                                    }
                                case "Soullink": 
                                    {
                                        dmg.v += DarkKingdomCore.MyGame.rnd.Next$2(10, 21);
                                        this.Harm(u, DarkKingdomCore.MyGame.rnd.Next$2(5, 11), true, DarkKingdomCore.EffectType.Bad);
                                        break;
                                    }
                                case "Invisible": 
                                    {
                                        this.Deinvisible(u);
                                        break;
                                    }
                                case "Clumsiness": 
                                    {
                                        if (DarkKingdomCore.MyGame.rnd.Next$1(100) < 20) {
                                            agil = true;
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                $t2 = Bridge.getEnumerator(trg.abils.Values);
                try {
                    while ($t2.moveNext()) {
                        var ta = $t2.Current;
                        if (ta.condCompleted) {
                            switch (ta.name) {
                                case "Agility": 
                                    {
                                        if (DarkKingdomCore.MyGame.rnd.Next$1(100) < ta.value) {
                                            agil = true;
                                        }
                                        break;
                                    }
                                case "Evasion": 
                                    {
                                        if (u.isInRangeCombat) {
                                            agil = true;
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }
                if (u.AbsContains("Accuracy")) {
                    agil = false;
                }
                return agil;
            },
            OnAgil: function (u, trg) {
                var $t;
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var uu = $t.Current;
                        if (!(uu.owner === u.owner) && uu.AbsContains("Punishment_on_miss")) {
                            this.Harm(u, DarkKingdomCore.MyGame.rnd.Next$2(20, 40), true, DarkKingdomCore.EffectType.Bad);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (trg.AbsContains("Agility_rollback")) {
                    trg.Attack = DarkKingdomCore.Attack.op_Addition$1(trg.Attack.$clone(), (trg.abils.getItem("Agility_rollback").value) | 0);
                }
                if (trg.AbsContains("Kill_on_agil")) {
                    this.Kill(u);
                    this.ShowInfoPar("\u0410\u0430\u0430\u0430\u0430\u0430", DarkKingdomCore.MyGame.badAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), false);
                }
                if (trg.AbsContains("Harm_on_agil")) {
                    this.Harm(u, DarkKingdomCore.MyGame.rnd.Next$2(20, 41), true, DarkKingdomCore.EffectType.Bad);
                }
                if (trg.AbsContains("Trick")) {
                    this.Heal(trg, trg.parameters.maxhp);
                } else {
                    this.ShowInfoPar("0", DarkKingdomCore.MyGame.goodAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), false);
                }
            },
            CheckBasicConditions: function (u) {
                var $t;
                $t = Bridge.getEnumerator(u.abils.Values);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        if (a.used) {
                            a.condCompleted = false;
                        } else {
                            if (!Bridge.referenceEquals(a.condition, "")) {
                                switch (a.condition) {
                                    case "Tier": 
                                        {
                                            if (DarkKingdomCore.MyGame.plrs[u.owner].res.Tier >= a.condnum) {
                                                a.condCompleted = true;
                                            } else {
                                                a.condCompleted = false;
                                            }
                                            break;
                                        }
                                    case "Poisoned": 
                                        {
                                            if (u.AbsContains("Poison")) {
                                                a.condCompleted = true;
                                            } else {
                                                a.condCompleted = false;
                                            }
                                            break;
                                        }
                                    case "Low_health": 
                                        {
                                            if (u.hp <= 0.5 * u.parameters.maxhp) {
                                                a.condCompleted = true;
                                            } else {
                                                a.condCompleted = false;
                                            }
                                            break;
                                        }
                                    case "On_enemy_side": 
                                        {
                                            if ((u.moveside === 1 && u.x >= DarkKingdomCore.MyGame.gameWidth / 2.0) || (u.moveside === -1 && u.x <= DarkKingdomCore.MyGame.gameWidth / 2.0)) {
                                                a.condCompleted = true;
                                            } else {
                                                a.condCompleted = false;
                                            }
                                            break;
                                        }
                                    case "At_night": 
                                        {
                                            if (this.snS < 0) {
                                                a.condCompleted = true;
                                            } else {
                                                a.condCompleted = false;
                                            }
                                            break;
                                        }
                                    case "By_day": 
                                        {
                                            if (this.snS >= 0) {
                                                a.condCompleted = true;
                                            } else {
                                                a.condCompleted = false;
                                            }
                                            break;
                                        }
                                    case "Machine_army": 
                                        {
                                            if (this.machinenum >= a.condnum) {
                                                a.condCompleted = true;
                                            } else {
                                                a.condCompleted = false;
                                            }
                                            break;
                                        }
                                    case "On_enter": 
                                        {
                                            a.condCompleted = true;
                                            break;
                                        }
                                }
                            } else {
                                a.condCompleted = true;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            FindFirstUnflyUnit: function (plr) {
                var $t;
                var xres = 0;
                var ures = null;
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (u.owner === plr && !(u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) && !u.parameters.isBuilding) {
                            if (ures == null || (u.x - xres) * u.moveside > 0) {
                                xres = u.x;
                                ures = u;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return ures;
            },
            FindRandomUnflyUnit: function (plr) {
                var $t;
                var avunits = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (u.owner === plr && !(u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) && !u.parameters.isBuilding) {
                            avunits.add(u);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (avunits.Count > 0) {
                    return avunits.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits.Count));
                }
                return null;
            },
            FindRandomFlyUnit: function (plr, hpLim) {
                var $t;
                var avunits = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (u.owner === plr && u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT && u.hp <= hpLim && !u.parameters.isBuilding) {
                            avunits.add(u);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (avunits.Count > 0) {
                    return avunits.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits.Count));
                }
                return null;
            },
            DoUnits: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25;
                var targets = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                var newtargets = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                var dmg = { };
                var stp;
                var nearestOne;
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (u.AbsContains("Power_of_unity")) {
                            u.parameters.Attack.MinDamage = Bridge.Int.mul(10, DarkKingdomCore.MyGame.plrs[u.owner].unitCount);
                            u.parameters.Attack.MaxDamage = Bridge.Int.mul(20, DarkKingdomCore.MyGame.plrs[u.owner].unitCount);
                        }

                        stp = false;
                        targets.clear();
                        nearestOne = -1;
                        u.atkMod.Range = 0;
                        u.parameters.isIgnoreUnits = false;
                        this.CheckBasicConditions(u);
                        this.OnUnitsAbils(u);
                        u.isInCombat = false;

                        $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                        try {
                            while ($t1.moveNext()) {
                                var u2 = $t1.Current;
                                if (!Bridge.referenceEquals(u, u2)) {
                                    if (u.parameters._speed > 0) {
                                        if (!u.parameters.isIgnoreUnits) {
                                            if (u.parameters.Near(u2.parameters.$clone()) && u.moveside * (u2.x - u.x) > 0 && (u.moveside * (u2.x - u.x) < this.unitSize)) {
                                                if (!u2.parameters.isIgnoreUnits && (u.owner !== u2.owner || (u.AbsContains("Bodyless") === u2.AbsContains("Bodyless") && !u.AbsContains("Ignore_friends") && !u.AbsContains("Burst") && !u2.AbsContains("Weaponry") && !u2.parameters.isBuilding))) {
                                                    stp = true;
                                                }
                                                if (u.owner === u2.owner && !u.AbsContains("Mage") && u2.AbsContains("Weaponry")) {
                                                    this.Kill(u);
                                                    u2.hp += u.hp;
                                                    ($t2 = u2.parameters.$clone()).maxhp = ($t2.maxhp + Bridge.Int.clip32(u.hp)) | 0;
                                                    ($t3 = u2.parameters.Attack.$clone()).MinDamage = ($t3.MinDamage + u.parameters.Attack.MinDamage) | 0;
                                                    ($t4 = u2.parameters.Attack.$clone()).MaxDamage = ($t4.MaxDamage + u.parameters.Attack.MaxDamage) | 0;
                                                    ($t5 = DarkKingdomCore.MyGame.plrs[u.owner]).unitCount = ($t5.unitCount - 1) | 0;
                                                }
                                            }
                                        }
                                        if (u.moveside * (u2.x - u.x) >= 0 && u.moveside * (u2.x - u.x) < u.parameters._speed + u2.parameters._speed && u.parameters.Near(u2.parameters.$clone())) {
                                            if (u.owner !== u2.owner && u.AbsContains("Damage_on_move")) {
                                                if (u.AbsContains("Mage")) {
                                                    this.Harm(u2, DarkKingdomCore.MyGame.rnd.Next$2(50, 71), true, DarkKingdomCore.EffectType.Bad);
                                                } else {
                                                    this.Harm(u2, DarkKingdomCore.MyGame.rnd.Next$2(50, 71), false, DarkKingdomCore.EffectType.Normal);
                                                }
                                            }
                                            if (u.owner === u2.owner && u2.AbsContains("Money_treasure")) {
                                                u2.abils.getItem("Money_treasure").used = true;
                                                this.deathlist.add(u2);
                                                ($t6 = DarkKingdomCore.MyGame.plrs[u.owner].res.$clone()).Money = ($t6.Money + u2.abils.getItem("Money_treasure").value) | 0;
                                                this.ShowInfoPar(System.String.format("+{0}", [u2.abils.getItem("Money_treasure").value]), this.moneyClr.$clone(), u2.x, ((DarkKingdomCore.MyGame.hor + u2.parameters.rect.Top) | 0), true);
                                            }
                                        }
                                    } else {
                                        stp = true;
                                    }

                                    if (u.parameters.Attack.MaxDamage > 0) {
                                        if (u.owner !== u2.owner && (u.parameters.Near(u2.parameters.$clone()) || u.Attack.Range > 1)) {
                                            if ((u.moveside * (u2.x - u.x) > 0 && u.moveside * (u2.x - u.x) < Bridge.Int.mul(u.Attack.Range, this.unitSize)) && !u2.AbsContains("Invisible")) {
                                                if (nearestOne === -1) {
                                                    nearestOne = targets.Count;
                                                } else {
                                                    if (u.moveside * (targets.getItem(nearestOne).x - u2.x) > 0) {
                                                        nearestOne = targets.Count;
                                                    }
                                                }
                                                targets.add(u2);
                                                u.isInCombat = true;
                                            }
                                        }
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                        u.isInRangeCombat = false;
                        newtargets.clear();
                        if (targets.Count > 0) {
                            if (!u.AbsContains("Dragon_breath")) {
                                $t7 = Bridge.getEnumerator(targets);
                                try {
                                    while ($t7.moveNext()) {
                                        var trg = $t7.Current;
                                        if (u.Near(trg)) {
                                            newtargets.add(trg);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t7, System.IDisposable)) {
                                        $t7.System$IDisposable$Dispose();
                                    }
                                }
                                if (newtargets.Count === 0) {
                                    if (u.AbsContains("Attack selected") && !DarkKingdomCore.MyGame.plrs[u.owner].AI) {
                                        if (targets.contains(this.selU)) {
                                            newtargets.add(this.selU);
                                            u.isInRangeCombat = true;
                                        }
                                    } else {
                                        newtargets.add(targets.getItem(nearestOne));
                                        u.isInRangeCombat = true;
                                    }
                                }
                            } else {
                                $t8 = Bridge.getEnumerator(targets);
                                try {
                                    while ($t8.moveNext()) {
                                        var trg1 = $t8.Current;
                                        newtargets.add(trg1);
                                    }
                                } finally {
                                    if (Bridge.is($t8, System.IDisposable)) {
                                        $t8.System$IDisposable$Dispose();
                                    }
                                }
                                u.isInRangeCombat = true;
                            }
                        }
                        if (newtargets.Count > 0) {
                            if (u.AbsContains("Hover")) {
                                stp = true;
                            }
                            if (u.atkRecharge === 0) {
                                if (u.parameters.animated) {
                                    u.StartAnimation("Attack", this.mainAnimator);
                                }
                                $t9 = Bridge.getEnumerator(newtargets);
                                try {
                                    while ($t9.moveNext()) {
                                        var trg2 = $t9.Current;
                                        $t10 = Bridge.getEnumerator(u.abils.Values);
                                        try {
                                            while ($t10.moveNext()) {
                                                var aa = $t10.Current;
                                                if (Bridge.referenceEquals(aa.condition, "On_attack")) {
                                                    aa.condCompleted = true;
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t10, System.IDisposable)) {
                                                $t10.System$IDisposable$Dispose();
                                            }
                                        }
                                        dmg.v = DarkKingdomCore.MyGame.rnd.Next$2(u.Attack.MinDamage, ((u.Attack.MaxDamage + 1) | 0));

                                        if (this.OnPreAttack(u, trg2, dmg)) {
                                            if (u.isInRangeCombat && !(u.parameters.ammoType === DarkKingdomCore.Ammo.AmmoType.None)) {
                                                if (u.AbsContains("Rocket_shoot") && DarkKingdomCore.MyGame.rnd.Next$1(100) < u.abils.getItem("Rocket_shoot").value) {
                                                    this.ammos.add(new DarkKingdomCore.Ammo.ctor(u.owner, DarkKingdomCore.Ammo.AmmoType.RedBall, u.x, ((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0) + this.us2) | 0), u, trg2, 0, false, true, 7200, true));
                                                } else {
                                                    this.ammos.add(new DarkKingdomCore.Ammo.ctor(u.owner, u.parameters.ammoType, u.x, ((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0) + this.us2) | 0), u, trg2, 0, false, true, 7200));
                                                }
                                            } else {
                                                this.OnAgil(u, trg2);
                                            }
                                        } else {
                                            $t11 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                            try {
                                                while ($t11.moveNext()) {
                                                    var uu = $t11.Current;
                                                    if (uu.owner === u.owner && uu.AbsContains("Ragequit") && DarkKingdomCore.MyGame.rnd.Next$1(5) === 0) {
                                                        this.Harm(uu, dmg.v, true, DarkKingdomCore.EffectType.Bad);
                                                        dmg.v = 3 * dmg.v;
                                                        this.ShowInfoPar("\u041a\u0440\u0438\u0442!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t11, System.IDisposable)) {
                                                    $t11.System$IDisposable$Dispose();
                                                }
                                            }

                                            var ia = (u.AbsContains("Arbalester") && Bridge.referenceEquals(trg2.parameters.Armor, "Light")) || (u.AbsContains("Shooter") && (Bridge.referenceEquals(trg2.parameters.Armor, "Light") || Bridge.referenceEquals(trg2.parameters.Armor, "Heavy"))) || u.AbsContains("Mage");


                                            if (u.isInRangeCombat && !(u.parameters.ammoType === DarkKingdomCore.Ammo.AmmoType.None)) {
                                                if (u.AbsContains("Rocket_shoot") && DarkKingdomCore.MyGame.rnd.Next$1(100) < u.abils.getItem("Rocket_shoot").value) {
                                                    this.ammos.add(new DarkKingdomCore.Ammo.ctor(u.owner, DarkKingdomCore.Ammo.AmmoType.RedBall, u.x, ((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0) + this.us2) | 0), u, trg2, dmg.v, ia, false, 7200, true));
                                                } else {
                                                    this.ammos.add(new DarkKingdomCore.Ammo.ctor(u.owner, u.parameters.ammoType, u.x, ((((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0) + this.us2) | 0), u, trg2, dmg.v, ia, false, 7200));
                                                }
                                            } else {
                                                this.OnSuccessfulAttack(dmg.v, u, trg2, ia);
                                            }
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t9, System.IDisposable)) {
                                        $t9.System$IDisposable$Dispose();
                                    }
                                }
                                u.atkRecharge = u.parameters.Attack.Speed;
                            }
                        }
                        if (u.poiRecharge > 0) {
                            u.poiRecharge = (u.poiRecharge - 1) | 0;
                        } else {
                            if (u.AbsContains("Regeneration")) {
                                this.Heal(u, DarkKingdomCore.MyGame.rnd.Next$2(20, 41));
                            }
                            if (u.AbsContains("Healing_aura")) {
                                $t12 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t12.moveNext()) {
                                        var uu1 = $t12.Current;
                                        if (!Bridge.referenceEquals(u, uu1) && uu1.owner === u.owner && Math.abs(u.x - uu1.x) <= Bridge.Int.mul(2, this.unitSize) && !uu1.AbsContains("Undead")) {
                                            this.Heal(uu1, DarkKingdomCore.MyGame.rnd.Next$2(10, 21));
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t12, System.IDisposable)) {
                                        $t12.System$IDisposable$Dispose();
                                    }
                                }
                            }
                            if (u.AbsContains("Heal_first")) {
                                var tmpu = this.FindFirstUnflyUnit(u.owner);
                                if (tmpu != null) {
                                    this.Heal(tmpu, DarkKingdomCore.MyGame.rnd.Next$2(5, 11));
                                }
                            }
                            if (u.AbsContains("Mass_healing")) {
                                $t13 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t13.moveNext()) {
                                        var uu2 = $t13.Current;
                                        if (!Bridge.referenceEquals(u, uu2) && uu2.owner === u.owner && !uu2.AbsContains("Undead")) {
                                            this.Heal(uu2, DarkKingdomCore.MyGame.rnd.Next$2(10, 21));
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t13, System.IDisposable)) {
                                        $t13.System$IDisposable$Dispose();
                                    }
                                }
                            }
                            if (u.AbsContains("Mass_repair")) {
                                $t14 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t14.moveNext()) {
                                        var uu3 = $t14.Current;
                                        if (!Bridge.referenceEquals(u, uu3) && uu3.owner === u.owner && uu3.AbsContains("Machinery")) {
                                            this.Heal(uu3, DarkKingdomCore.MyGame.rnd.Next$2(20, 41), true);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t14, System.IDisposable)) {
                                        $t14.System$IDisposable$Dispose();
                                    }
                                }
                            }
                            if (u.AbsContains("Plague")) {
                                $t15 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t15.moveNext()) {
                                        var uu4 = $t15.Current;
                                        if (!uu4.parameters.isBuilding && Math.abs(u.x - uu4.x) <= Bridge.Int.mul(2, this.unitSize)) {
                                            if (uu4.AbsContains("Undead")) {
                                                this.Heal(uu4, DarkKingdomCore.MyGame.rnd.Next$2(10, 21));
                                            } else {
                                                if (!uu4.AbsContains("Machinery")) {
                                                    this.Harm(uu4, DarkKingdomCore.MyGame.rnd.Next$2(10, 21), true, DarkKingdomCore.EffectType.Bad);
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t15, System.IDisposable)) {
                                        $t15.System$IDisposable$Dispose();
                                    }
                                }
                            }
                            if (u.AbsContains("Extinction")) {
                                this.Harm(u, DarkKingdomCore.MyGame.rnd.Next$2(20, 41), true, DarkKingdomCore.EffectType.Normal);
                            }
                            if (u.AbsContains("Poison")) {
                                if (u.AbsContains("Poison resistance")) {
                                    this.Harm(u, ((DarkKingdomCore.MyGame.rnd.Next$2(20, 41) + DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].poisonBonus) | 0), true, DarkKingdomCore.EffectType.Poison);
                                } else {
                                    this.Harm(u, ((DarkKingdomCore.MyGame.rnd.Next$2(40, 81) + DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].poisonBonus) | 0), true, DarkKingdomCore.EffectType.Poison);
                                }
                                if (u.hp <= 0) {
                                    u.deathFromPoison = true;
                                }
                                $t16 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t16.moveNext()) {
                                        var u21 = $t16.Current;
                                        if (!Bridge.referenceEquals(u21, u) && Math.abs(u21.x - u.x) <= Bridge.Int.mul(2, this.unitSize) && u21.AbsContains("Pain_absorber")) {
                                            this.Heal(u21, DarkKingdomCore.MyGame.rnd.Next$2(20, 41));
                                        }
                                        if (u21.AbsContains("Epidemy")) {
                                            if (DarkKingdomCore.MyGame.rnd.Next$1(100) < u21.abils.getItem("Epidemy").value) {
                                                $t17 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                                try {
                                                    while ($t17.moveNext()) {
                                                        var u3 = $t17.Current;
                                                        if (Math.abs(u.x - u3.x) <= Bridge.Int.mul(2, this.unitSize)) {
                                                            this.Poison(u3);
                                                        }
                                                    }
                                                } finally {
                                                    if (Bridge.is($t17, System.IDisposable)) {
                                                        $t17.System$IDisposable$Dispose();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t16, System.IDisposable)) {
                                        $t16.System$IDisposable$Dispose();
                                    }
                                }
                            }
                            u.poiRecharge = 120;
                        }

                        if (u.hp > 0) {
                            if (u.purified) {
                                if (!u.AbsContains$1(["Building", "Bodyless", "Eternal"])) {
                                    var showinfo = false;
                                    $t18 = Bridge.getEnumerator(u.abils.Values);
                                    try {
                                        while ($t18.moveNext()) {
                                            var aa1 = $t18.Current;
                                            if (!aa1.used) {
                                                aa1.used = true;
                                                showinfo = true;
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t18, System.IDisposable)) {
                                            $t18.System$IDisposable$Dispose();
                                        }
                                    }
                                    if (showinfo) {
                                        this.ShowInfoPar("\u0417\u0430\u0431\u0432\u0435\u043d\u0438\u0435", DarkKingdomCore.MyGame.badAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                    }
                                }
                                u.purified = false;
                            }
                            if (u.landing) {
                                if (!u.AbsContains("Durability")) {
                                    u.parameters.moveType = DarkKingdomCore.UnitMoveType.GroundMT;
                                }
                                u.landing = false;
                            }
                            if (u.takedOff) {
                                if (!u.AbsContains("Durability")) {
                                    u.parameters.moveType = DarkKingdomCore.UnitMoveType.FlyingMT;
                                }
                                u.takedOff = false;
                            }
                        } else {
                            this.Kill(u);
                        }

                        if (u.owner === 0 && u.x > ((DarkKingdomCore.MyGame.gameWidth + this.us2) | 0)) {
                            this.Kill(u);
                            if (this.gType === DarkKingdomCore.GameType.FirstHeroGT) {
                                DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.Win;
                            }
                        }

                        if (u.owner === 1 && u.x < ((-this.us2) | 0)) {
                            this.Kill(u);
                            if (this.gType === DarkKingdomCore.GameType.FirstHeroGT) {
                                DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.Lose;
                            }
                        }

                        if (!stp) {
                            if (u.AbsContains("Speed_bonus")) {
                                u.x += u.parameters._speed * u.moveside * 2;
                            } else {
                                u.x += u.parameters._speed * u.moveside;
                            }
                        }

                        if ((((-u.parameters.rect.Top) | 0) > u.parameters.rect.Height && !(u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT)) || (((-u.parameters.rect.Top) | 0) > ((this.flyHeight + u.parameters.rect.Height) | 0) && u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT)) {
                            ($t19 = u.parameters.rect.$clone()).Y = ($t19.Y + 3) | 0;
                        }
                        if (((-u.parameters.rect.Top) | 0) < ((this.flyHeight + u.parameters.rect.Height) | 0) && u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) {
                            ($t20 = u.parameters.rect.$clone()).Y = ($t20.Y - 3) | 0;
                        }

                        if (u.wingsWave < 6.2831853071795862) {
                            u.wingsWave += this.piece;
                        } else {
                            u.wingsWave = 0;
                        }

                        if (u.atkRecharge > 0) {
                            u.atkRecharge = (u.atkRecharge - 1) | 0;
                        }

                        if (!(DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame)) {
                            break;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame) {
                    if (this.bornList.Count > 0) {
                        $t21 = Bridge.getEnumerator(this.bornList);
                        try {
                            while ($t21.moveNext()) {
                                var u1 = $t21.Current;
                                ($t22 = DarkKingdomCore.MyGame.plrs[u1.owner]).uCount = ($t22.uCount + 1) | 0;
                                DarkKingdomCore.MyGame.units.add(u1);
                            }
                        } finally {
                            if (Bridge.is($t21, System.IDisposable)) {
                                $t21.System$IDisposable$Dispose();
                            }
                        }
                        this.bornList.clear();
                    }
                    if (this.deathlist.Count > 0) {
                        var u_int = 0;
                        while (u_int < this.deathlist.Count) {
                            {
                                var abil = this.deathlist.getItem(u_int);
                                if (Bridge.referenceEquals(abil.parameters.Name, DarkKingdomCore.MyGame.plrs[0].hero) || Bridge.referenceEquals(abil.parameters.Name, DarkKingdomCore.MyGame.plrs[1].hero)) {
                                    abil.hp = 0;
                                    if (Bridge.referenceEquals(this.deathlist.getItem(u_int), this.selU)) {
                                        this.selU = null;
                                    }
                                    if (abil.owner === 0) {
                                        DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.Lose;
                                    }
                                    if (abil.owner === 1) {
                                        DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.Win;
                                    }
                                } else if (this.OnDead(this.deathlist.getItem(u_int))) {
                                    ($t23 = DarkKingdomCore.MyGame.plrs[abil.owner]).uCount = ($t23.uCount - 1) | 0;
                                    ($t24 = DarkKingdomCore.MyGame.plrs[abil.owner]).statDeaths = ($t24.statDeaths + 1) | 0;
                                    DarkKingdomCore.MyGame.units.remove(this.deathlist.getItem(u_int));
                                    $t25 = Bridge.getEnumerator(this.ammos);
                                    try {
                                        while ($t25.moveNext()) {
                                            var a = $t25.Current;
                                            if (Bridge.referenceEquals(a.target, this.deathlist.getItem(u_int))) {
                                                a.target = null;
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t25, System.IDisposable)) {
                                            $t25.System$IDisposable$Dispose();
                                        }
                                    }
                                }
                            }
                            u_int = (u_int + 1) | 0;
                        }
                        this.deathlist.clear();
                    }
                }
            },
            TryAddToQueueUnit: function (plr, name) {
                if (plr.CheckForProduce(name)) {
                    plr.res = DarkKingdomCore.TimeCost.op_Subtraction(plr.res.$clone(), DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone().Cost.$clone());
                    plr.prdQ.add(name);
                    if (DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone().support) {
                        plr.aisupportstreak = (plr.aisupportstreak + 1) | 0;
                        plr.aidefencestreak = 0;
                    } else {
                        plr.aidefencestreak = (plr.aidefencestreak + 1) | 0;
                        plr.aisupportstreak = 0;
                    }
                    if (plr.id === 0) {
                        this.UpdateQueue();
                    }
                    return true;
                }
                return false;
            },
            RemoveFromQueue: function (plr, pos) {
                DarkKingdomCore.MyGame.plrs[plr].prdQ.removeAt(pos);
                if (pos === 0) {
                    DarkKingdomCore.MyGame.plrs[plr].prdPrg = 0;
                }
                if (plr === 0) {
                    this.UpdateQueue();
                }
            },
            CheckStack: function (uname, plr) {
                var $t;
                var addition = false;
                if (DarkKingdomCore.MyGame.unitPrms.getItem(uname).$clone().moveType === DarkKingdomCore.UnitMoveType.FlyingMT) {
                    $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t.moveNext()) {
                            var u = $t.Current;
                            if (u.owner === plr && u.AbsContains("Dragon_boss")) {
                                addition = true;
                                break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
                return DarkKingdomCore.MyGame.unitPrms.getItem(uname).$clone().AbsContains("Stack") || addition;
            },
            CheckKeys: function () {
                var $t;
                $t = Bridge.getEnumerator(this.listeningKeys);
                try {
                    while ($t.moveNext()) {
                        var key = $t.Current;
                        if (Microsoft.Xna.Framework.Input.Keyboard.GetState().IsKeyUp(key) && this.oldKeyboardState.IsKeyDown(key)) {
                            return key;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex.One).Buttons.Back === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
                    return Microsoft.Xna.Framework.Input.Keys.Escape;
                }
                return Microsoft.Xna.Framework.Input.Keys.None;
            },
            Update: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
                this.mainAnimator.Do();
                this.frmHelp.Visible = false;
                if (this.frmProduction.Visible) {
                    $t = Bridge.getEnumerator(this.btnsProduction);
                    try {
                        while ($t.moveNext()) {
                            var btn = $t.Current;
                            btn.Children.getItem(2).Visible = false;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                var m = Microsoft.Xna.Framework.Input.Mouse.GetState();
                if (m.LeftButton === Microsoft.Xna.Framework.Input.ButtonState.Released && this.oldMouseState.LeftButton === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
                    this.MouseClicked(new Microsoft.Xna.Framework.Vector2.$ctor2(m.Position.X, m.Position.Y));
                }
                this.oldMouseState = m.$clone();

                if (Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable) {
                    var gs = Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture();
                    if (gs.GestureType === Microsoft.Xna.Framework.Input.Touch.GestureType.Tap) {
                        this.MouseClicked(new Microsoft.Xna.Framework.Vector2.$ctor2(gs.Position.X, gs.Position.Y), true);
                    }
                }


                this.MainContainer.HighlightButton(m.X, m.Y, m.LeftButton === Microsoft.Xna.Framework.Input.ButtonState.Pressed);

                var touches = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Input.Touch.TouchLocation)).$ctor1(Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState());

                // If touches IsNot Nothing Then
                if (touches.Count > 0) {
                    $t1 = Bridge.getEnumerator(touches);
                    try {
                        while ($t1.moveNext()) {
                            var tt = $t1.Current.$clone();
                            if ((tt.State === Microsoft.Xna.Framework.Input.Touch.TouchLocationState.Pressed || tt.State === Microsoft.Xna.Framework.Input.Touch.TouchLocationState.Moved)) {
                                this.MainContainer.TapAndHoldButton(Bridge.Int.clip32(tt.Position.X), Bridge.Int.clip32(tt.Position.Y));
                                break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
                // End If

                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame) {
                    $t2 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t2.moveNext()) {
                            var u = $t2.Current;
                            if (u.x + u.parameters.rect.Right > m.X && m.X > u.x + u.parameters.rect.Left && ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) > m.Y && m.Y > ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0)) {
                                if (u.owner === 0 || !u.AbsContains("Invisible")) {
                                    this.ShowUnitInfo(u.parameters.$clone(), u.owner, false, null, u);
                                    break;
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                    if (this.selU != null) {
                        this.ShowUnitInfo(this.selU.parameters.$clone(), this.selU.owner, false, null, this.selU);
                    }
                }


                var key = this.CheckKeys();
                if (key !== Microsoft.Xna.Framework.Input.Keys.None) {
                    this.MainContainer.ClickButton(key);
                }

                this.oldKeyboardState = Microsoft.Xna.Framework.Input.Keyboard.GetState();

                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame) {
                    if (this.curM < DarkKingdomCore.MyGame.plrs[0].res.Money) {
                        if (((DarkKingdomCore.MyGame.plrs[0].res.Money - this.curM) | 0) <= 50) {
                            this.curM = (this.curM + 5) | 0;
                        } else {
                            this.curM = (this.curM + 20) | 0;
                        }
                    } else if (this.curM > DarkKingdomCore.MyGame.plrs[0].res.Money) {
                        if (((this.curM - DarkKingdomCore.MyGame.plrs[0].res.Money) | 0) <= 50) {
                            this.curM = (this.curM - 5) | 0;
                        } else {
                            this.curM = (this.curM - 20) | 0;
                        }
                    }
                    if (this.curD < DarkKingdomCore.MyGame.plrs[0].res.Death) {
                        this.curD = (this.curD + 1) | 0;
                    } else {
                        if (this.curD > DarkKingdomCore.MyGame.plrs[0].res.Death) {
                            this.curD = (this.curD - 1) | 0;
                        }
                    }

                    this.UpdateResources();
                }

                this.MainContainer.Recalc();

                if (this.Pause) {
                    return;
                }

                var i;
                var t;

                if (this.snS > 0) {
                    DarkKingdomCore.MyGame.goodAbilClr = Microsoft.Xna.Framework.Color.DarkBlue.$clone();
                    DarkKingdomCore.MyGame.poiAbilClr = Microsoft.Xna.Framework.Color.DarkGreen.$clone();
                } else {
                    DarkKingdomCore.MyGame.goodAbilClr = Microsoft.Xna.Framework.Color.LightBlue.$clone();
                    DarkKingdomCore.MyGame.poiAbilClr = Microsoft.Xna.Framework.Color.LightGreen.$clone();
                }
                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame) {
                    $t3 = Bridge.getEnumerator(DarkKingdomCore.MyGame.plrs);
                    try {
                        while ($t3.moveNext()) {
                            var p = $t3.Current;
                            p.prdSpd = 1;
                            p.magicIncBonus = 0;
                            p.moneyIncBonus = 0;
                            p.poisonBonus = 0;
                            p.banned.clear();
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }
                    $t4 = Bridge.getEnumerator(DarkKingdomCore.MyGame.plrs);
                    try {
                        while ($t4.moveNext()) {
                            var p1 = $t4.Current;
                            if (p1.rushBonus > 0) {
                                p1.prdSpd *= 2;
                            }
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                    this.machinenum = 0;
                    $t5 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t5.moveNext()) {
                            var u1 = $t5.Current;
                            if (u1.AbsContains("Machinery")) {
                                this.machinenum = (this.machinenum + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }
                    this.DoUnits();
                    for (i = 0; i < DarkKingdomCore.MyGame.plrs[0].spllsList.Count; i = (i + 1) | 0) {
                        if (DarkKingdomCore.MyGame.plrs[0].spellsRchrg.getItem(i) > 0) {
                            DarkKingdomCore.MyGame.plrs[0].spellsRchrg.setItem(i, DarkKingdomCore.MyGame.plrs[0].spellsRchrg.getItem(i) -1);
                            if (DarkKingdomCore.MyGame.plrs[0].spellsRchrg.getItem(i) > 0) {
                                Bridge.cast(Bridge.cast(this.cSpells.Children.getItem(i), MonoInterface.Button).Children.getItem(1), MonoInterface.Progress).MaxValue = this.spells.getItem(DarkKingdomCore.MyGame.plrs[0].spllsList.getItem(i)).Cost.Time;
                                Bridge.cast(Bridge.cast(this.cSpells.Children.getItem(i), MonoInterface.Button).Children.getItem(1), MonoInterface.Progress).CurrentValue = DarkKingdomCore.MyGame.plrs[0].spellsRchrg.getItem(i);
                            }
                        }
                    }
                    $t6 = Bridge.getEnumerator(DarkKingdomCore.MyGame.plrs);
                    try {
                        while ($t6.moveNext()) {
                            var plr = $t6.Current;
                            {
                                var abil = plr;
                                if (abil.resDelay > 0) {
                                    abil.resDelay = (abil.resDelay - 1) | 0;
                                } else {
                                    var val = (((abil.startInco + Bridge.Int.mul(abil.ipt, (((abil.res.Tier - 1) | 0)))) | 0) + abil.moneyIncBonus) | 0;
                                    abil.Resources = DarkKingdomCore.TimeCost.op_Addition(abil.Resources.$clone(), new DarkKingdomCore.TimeCost.$ctor1(val, abil.magicIncBonus, 0, 0));
                                    if (abil.id === 0) {
                                        this.ShowInfoPar("+" + val, this.moneyClr.$clone(), this.unitSize, ((DarkKingdomCore.MyGame.hor - 60) | 0), true);
                                    }
                                    abil.resDelay = 450;
                                }
                                if (abil.prdQ.Count > 0) {
                                    abil.prdPrg += abil.prdSpd;
                                    if (plr.id === 0) {
                                        this.UpdateQueue();
                                    }

                                    if (abil.prdPrg >= DarkKingdomCore.MyGame.unitPrms.getItem(abil.prdQ.getItem(0)).$clone().Cost.Time) {
                                        if (abil.rushBonus > 0) {
                                            abil.rushBonus = (abil.rushBonus - 1) | 0;
                                        }
                                        this.AddToReadyUnits(plr, abil.prdQ.getItem(0));
                                        this.RemoveFromQueue(abil.id, 0);
                                        if (abil.AI && abil.readyUnits.Count >= 3) {
                                            $t7 = Bridge.getEnumerator(abil.readyUnits);
                                            try {
                                                while ($t7.moveNext()) {
                                                    var u2 = $t7.Current;
                                                    this.ProduceUnit(abil.id, u2);
                                                }
                                            } finally {
                                                if (Bridge.is($t7, System.IDisposable)) {
                                                    $t7.System$IDisposable$Dispose();
                                                }
                                            }
                                            abil.readyUnits.clear();
                                        }
                                    }
                                }
                                if (abil.AI) {
                                    if (abil.curAIVal > 0) {
                                        abil.curAIVal = (abil.curAIVal - 1) | 0;
                                    } else {
                                        abil.AITick(this);
                                        abil.curAIVal = abil.maxAIVal;
                                    }
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t6, System.IDisposable)) {
                            $t6.System$IDisposable$Dispose();
                        }
                    }
                    i = 0;
                    while (i < this.ammos.Count) {
                        {
                            var abil1 = this.ammos.getItem(i);
                            abil1.x += abil1.vx;
                            abil1.y += abil1.vy;
                            abil1.lifetime -= 1;
                            if (abil1.target != null) {
                                t = (abil1.target.x - abil1.x) / abil1.vx;
                                if (t !== 0) {
                                    abil1.vy = (((((DarkKingdomCore.MyGame.hor + abil1.target.parameters.rect.Top) | 0) + 15) | 0) - abil1.y) / t - abil1.ay * t / 2;
                                } else {
                                    abil1.vy = -1;
                                }
                            } else {
                                abil1.vy += abil1.ay;
                            }
                            $t8 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                            try {
                                while ($t8.moveNext()) {
                                    var u3 = $t8.Current;
                                    if (abil1.plr !== u3.owner) {
                                        if ((u3.x + u3.parameters.rect.Right >= abil1.x && abil1.x >= u3.x + u3.parameters.rect.Left && ((DarkKingdomCore.MyGame.hor + u3.parameters.rect.Bottom) | 0) >= abil1.y && abil1.y >= ((DarkKingdomCore.MyGame.hor + u3.parameters.rect.Top) | 0))) {
                                            if (abil1.agil) {
                                                this.OnAgil(abil1.owner, u3);
                                                if (abil1.explosive) {
                                                    this.Explode(u3, abil1.owner.AbsContains("Mage"));
                                                }
                                            } else if (abil1.owner != null) {
                                                this.OnSuccessfulAttack(abil1.dmg, abil1.owner, u3, abil1.ignoreArmor);
                                                if (abil1.explosive) {
                                                    this.Explode(u3, abil1.owner.AbsContains("Mage"));
                                                }
                                            } else {
                                                if (abil1.explosive) {
                                                    this.Explode(u3, false);
                                                }
                                                this.Harm(u3, abil1.dmg, abil1.ignoreArmor, DarkKingdomCore.EffectType.Normal);
                                            }
                                            if (abil1.type === DarkKingdomCore.Ammo.AmmoType.Bomb) {
                                                DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 1), abil1.x - 12, abil1.y - 12, 0, 0, 20));
                                            }
                                            this.ammos.removeAt(i);
                                            i = (i - 1) | 0;
                                            break;
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t8, System.IDisposable)) {
                                    $t8.System$IDisposable$Dispose();
                                }
                            }
                            if (abil1.y >= DarkKingdomCore.MyGame.hor) {
                                if (abil1.type === DarkKingdomCore.Ammo.AmmoType.Bomb) {
                                    DarkKingdomCore.MyGame.pars.add(new DarkKingdomCore.ImageParticle(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("explode"), 1), abil1.x - 12, abil1.y - 12, 0, 0, 20));
                                }
                                this.ammos.removeAt(i);
                                i = (i - 1) | 0;
                            }
                            if (abil1.lifetime <= 0) {
                                this.ammos.removeAt(i);
                                i = (i - 1) | 0;
                            }
                            i = (i + 1) | 0;
                        }
                    }
                }
                i = 0;
                while (i < DarkKingdomCore.MyGame.pars.Count) {
                    {
                        var abil2 = DarkKingdomCore.MyGame.pars.getItem(i);
                        abil2.ltime = (abil2.ltime - 1) | 0;
                        abil2.x += abil2.dx;
                        abil2.y += abil2.dy;
                        abil2.dy += abil2.ay;
                        abil2.a -= abil2.ast;
                        if (abil2.dy > 0 && abil2.y >= ((((DarkKingdomCore.MyGame.hor - this.unitSize) | 0) + 2) | 0)) {
                            abil2.y = (((DarkKingdomCore.MyGame.hor - this.unitSize) | 0) + 3) | 0;
                            abil2.dy = 0;
                        }
                        if (abil2.ltime === 0) {
                            DarkKingdomCore.MyGame.pars.removeAt(i);
                        } else {
                            i = (i + 1) | 0;
                        }
                    }
                }

                $t9 = Bridge.getEnumerator(DarkKingdomCore.MyGame.cloudpars);
                try {
                    while ($t9.moveNext()) {
                        var p2 = Bridge.cast($t9.Current, DarkKingdomCore.Particle);
                        p2.x += p2.dx;
                        if (p2.x >= ((DarkKingdomCore.MyGame.gameWidth + 75) | 0)) {
                            p2.x = -100;
                        }
                    }
                } finally {
                    if (Bridge.is($t9, System.IDisposable)) {
                        $t9.System$IDisposable$Dispose();
                    }
                }


                if (this.updateSpells) {
                    this.SetSpells();
                }
                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame && this.snS > 0 && this.gType === DarkKingdomCore.GameType.DefenceGT) {
                    DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.Win;
                }
                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame && this.snS < 0 && this.gType === DarkKingdomCore.GameType.OffenceGT) {
                    DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.Lose;
                }
                this.oldsnS = this.snS;
                this.snS = this.snS * this.csD + this.csS * this.snD;
                this.csS = this.csS * this.csD - this.oldsnS * this.snD;
                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Lose || DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Win) {
                    this.EndOfBattle();
                }
            },
            EndOfBattle: function () {
                this._pause = true;
                this.frmDialog.Show(this.mainAnimator);
                if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesPlays.containsKey(DarkKingdomCore.MyGame.plrs[0].race)) {
                    DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesPlays.setItem(DarkKingdomCore.MyGame.plrs[0].race, (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesPlays.getItem(DarkKingdomCore.MyGame.plrs[0].race) + 1) | 0);
                    if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Win) {
                        DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesWins.setItem(DarkKingdomCore.MyGame.plrs[0].race, (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesWins.getItem(DarkKingdomCore.MyGame.plrs[0].race) + 1) | 0);
                    }
                } else {
                    DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesPlays.add(DarkKingdomCore.MyGame.plrs[0].race, 1);
                    if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Win) {
                        DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesWins.add(DarkKingdomCore.MyGame.plrs[0].race, 1);
                    } else {
                        if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Lose) {
                            DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).racesWins.add(DarkKingdomCore.MyGame.plrs[0].race, 0);
                        }
                    }
                }
                switch (DarkKingdomCore.MyGame.gState) {
                    case DarkKingdomCore.GameState.Win: 
                        {
                            this.lblTitlefrmDialog.Text = "\u0412\u044b \u043f\u043e\u0431\u0435\u0434\u0438\u043b\u0438!";
                            break;
                        }
                    case DarkKingdomCore.GameState.Lose: 
                        {
                            this.lblTitlefrmDialog.Text = "\u0412\u044b \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b\u0438!";
                            break;
                        }
                }
                this.lblLine1FrmDialog.Text = System.String.format("\u0412\u0430\u0448\u0438 \u043f\u043e\u0442\u0435\u0440\u0438: {0}", [DarkKingdomCore.MyGame.plrs[0].statDeaths]);
                this.lblLine2FrmDialog.Text = System.String.format("\u041f\u043e\u0442\u0435\u0440\u0438 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u0438\u043a\u0430: {0}", [DarkKingdomCore.MyGame.plrs[1].statDeaths]);
            },
            ShowUnitInfo: function (up, own, cstHighlight, pnt, unt) {
                var $t;
                if (pnt === void 0) { pnt = null; }
                if (unt === void 0) { unt = null; }
                this.lblUnitNameHelpUnit.Text = this.localize.GetString(up.Name);
                if (Bridge.referenceEquals(up.Subrace, "")) {
                    this.lblRaceHelpUnit.Text = this.localize.GetString(up.Race);
                } else {
                    this.lblRaceHelpUnit.Text = System.String.format("{0} - {1}", this.localize.GetString(up.Race), this.localize.GetString(up.Subrace));
                }

                this.lblCostMoneyHelpUnit.Text = Bridge.toString(up.Cost.Money);
                if (DarkKingdomCore.MyGame.plrs[0].res.Money < up.Cost.Money && cstHighlight) {
                    this.lblCostMoneyHelpUnit.TextColor = Microsoft.Xna.Framework.Color.Red.$clone();
                } else {
                    this.lblCostMoneyHelpUnit.TextColor = this.moneyClr.$clone();
                }


                if (up.Cost.Death > 0) {
                    this.lblCostDeathHelpUnit.Text = Bridge.toString(up.Cost.Death);
                    if (DarkKingdomCore.MyGame.plrs[0].res.Death < up.Cost.Death && cstHighlight) {
                        this.lblCostDeathHelpUnit.TextColor = Microsoft.Xna.Framework.Color.Red.$clone();
                    } else {
                        this.lblCostDeathHelpUnit.TextColor = this.deathClr.$clone();
                    }
                } else {
                    this.lblCostDeathHelpUnit.Text = "-";
                }

                this.cBattleParameters.Visible = true;
                var atkclr = Microsoft.Xna.Framework.Color.Black.$clone();
                var finalAtk = up.Attack.$clone();
                var finalRng = System.Int64(up.Attack.Range);
                var atkSpd = this.localize.GetString(System.String.format("AttackSpeed{0}", [up.Attack.Speed]));
                if (unt != null) {
                    finalAtk = DarkKingdomCore.Attack.op_Addition(finalAtk.$clone(), unt.atkMod.$clone());
                    finalRng = finalRng.add(System.Int64(unt.atkMod.Range));
                    if (up.Attack.MaxDamage > 0) {
                        if (finalAtk.MinDamage > DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().Attack.MinDamage || finalAtk.MaxDamage > DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().Attack.MaxDamage || finalRng.gt(System.Int64(DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().Attack.Range))) {
                            atkclr = Microsoft.Xna.Framework.Color.DarkBlue.$clone();
                        } else {
                            if (finalAtk.MinDamage < DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().Attack.MinDamage || finalAtk.MaxDamage < DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().Attack.MaxDamage || finalRng.lt(System.Int64(DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().Attack.Range))) {
                                atkclr = Microsoft.Xna.Framework.Color.DarkViolet.$clone();
                            }
                        }
                    }
                }
                this.lblAttackBasicParams.TextColor = atkclr.$clone();
                if (up.Attack.Range > 1) {
                    this.pctAttackBasicParams.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 0);
                    if (up.Attack.MaxDamage > 0) {
                        if (up.Attack.Range > 100) {
                            this.lblAttackBasicParams.Text = System.String.format("{0}-{1}, \u0434\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u221e, {2}", finalAtk.MinDamage, finalAtk.MaxDamage, atkSpd);
                        } else {
                            this.lblAttackBasicParams.Text = System.String.format("{0}-{1}, \u0434\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c {2}, {3}", finalAtk.MinDamage, finalAtk.MaxDamage, finalRng, atkSpd);
                        }
                    } else {
                        this.lblAttackBasicParams.Text = "\u041d\u0435\u0442";
                    }
                } else {
                    this.pctAttackBasicParams.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 1);
                    if (up.Attack.MaxDamage > 0) {
                        this.lblAttackBasicParams.Text = System.String.format("{0}-{1}, {2}", finalAtk.MinDamage, finalAtk.MaxDamage, atkSpd);
                    } else {
                        if (up.Attack.MaxDamage === 0) {
                            this.lblAttackBasicParams.Text = "\u041d\u0435\u0442";
                        } else {
                            this.lblAttackBasicParams.Text = "\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430";
                        }
                    }
                }


                if (unt != null) {
                    this.lblsBasicParams[0].Text = System.String.format("{0}/{1}", unt.hp, up.maxhp);
                    if (up.maxhp > DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().maxhp) {
                        this.lblsBasicParams[0].TextColor = Microsoft.Xna.Framework.Color.DarkBlue.$clone();
                    } else {
                        if (up.maxhp < DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone().maxhp) {
                            this.lblsBasicParams[0].TextColor = Microsoft.Xna.Framework.Color.DarkViolet.$clone();
                        } else {
                            this.lblsBasicParams[0].TextColor = Microsoft.Xna.Framework.Color.Black.$clone();
                        }
                    }
                } else if (up.maxhp > 0) {
                    this.lblsBasicParams[0].Text = Bridge.toString(up.maxhp);
                    this.lblsBasicParams[0].TextColor = Microsoft.Xna.Framework.Color.Black.$clone();
                } else {
                    this.lblsBasicParams[0].Text = "\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e";
                    this.lblsBasicParams[0].TextColor = Microsoft.Xna.Framework.Color.Black.$clone();
                }


                this.lblsBasicParams[1].Text = this.localize.GetString(up.armNick);
                if (up._armor < DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone()._armor) {
                    this.lblsBasicParams[1].TextColor = Microsoft.Xna.Framework.Color.DarkBlue.$clone();
                } else {
                    if (up._armor > DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone()._armor) {
                        this.lblsBasicParams[1].TextColor = Microsoft.Xna.Framework.Color.DarkBlue.$clone();
                    } else {
                        this.lblsBasicParams[1].TextColor = Microsoft.Xna.Framework.Color.Black.$clone();
                    }
                }

                this.lblsBasicParams[2].Text = System.String.format("{0}, {1}", this.localize.GetString(System.String.format("{0}S", [up.spdNick])), this.localize.GetString(System.Enum.toString(DarkKingdomCore.UnitMoveType, up.moveType)));

                if (up._speed > DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone()._speed) {
                    this.lblsBasicParams[2].TextColor = Microsoft.Xna.Framework.Color.DarkBlue.$clone();
                } else {
                    if (up._speed < DarkKingdomCore.MyGame.unitPrms.getItem(up.Name).$clone()._speed) {
                        this.lblsBasicParams[2].TextColor = Microsoft.Xna.Framework.Color.DarkViolet.$clone();
                    } else {
                        this.lblsBasicParams[2].TextColor = Microsoft.Xna.Framework.Color.Black.$clone();
                    }
                }

                var i = 0;
                var lastH = this.cBattleParameters.Bottom;
                var abils = unt != null ? unt.abils.Values : up.abils.Values;

                $t = Bridge.getEnumerator(abils);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        if (!a.hidden) {
                            var clr = new Microsoft.Xna.Framework.Color();
                            switch (a.typ) {
                                case DarkKingdomCore.EffectType.Normal: 
                                    clr = Microsoft.Xna.Framework.Color.Black.$clone();
                                    break;
                                case DarkKingdomCore.EffectType.Good: 
                                    clr = Microsoft.Xna.Framework.Color.DarkBlue.$clone();
                                    break;
                                case DarkKingdomCore.EffectType.Bad: 
                                    clr = Microsoft.Xna.Framework.Color.DarkViolet.$clone();
                                    break;
                                case DarkKingdomCore.EffectType.Poison: 
                                    clr = Microsoft.Xna.Framework.Color.DarkGreen.$clone();
                                    break;
                                default: 
                                    clr = Microsoft.Xna.Framework.Color.Black.$clone();
                                    break;
                            }
                            if (Bridge.referenceEquals(a.condition, "")) {
                                this.lblsAbils[i].Text = System.String.format("\u2022 {0}", [System.String.format(this.localize.GetString(a.name), a.value, a.value)]);
                                this.lblsAbils[i].TextColor = clr.$clone();
                                this.lblsAbils[i].Visible = true;
                            } else {
                                if (a.longTime) {
                                    if (!a.used && !a.condCompleted) {
                                        if (unt != null || !(Bridge.referenceEquals(a.condition, "Tier") && DarkKingdomCore.MyGame.plrs[own].res.Tier >= a.condnum) && !(Bridge.referenceEquals(a.condition, "Machine_army") && this.machinenum >= a.condnum)) {
                                            clr = this.condClr.$clone();
                                        }
                                    }
                                }
                                var unit_parameters = this.GetUnitParametersFromID(a.value);
                                var unit_name = System.Nullable.hasValue(unit_parameters) ? this.localize.GetString(System.Nullable.getValue(unit_parameters).Name) : "";
                                this.lblsAbils[i].Text = System.String.format("\u2022 {0} {1}", System.String.format(this.localize.GetString(a.condition), a.condnum, this.GetEnding(a.condnum)), System.String.format(this.localize.GetString(a.name), a.value, unit_name));
                                this.lblsAbils[i].TextColor = clr.$clone();
                                this.lblsAbils[i].Visible = true;
                            }
                            this.lblsAbils[i].Y = (lastH + 5) | 0;
                            lastH = this.lblsAbils[i].Bottom;
                            if (a.condCompleted) {
                                if (Bridge.referenceEquals(a.name, "Mage")) {
                                    this.pctAttackBasicParams.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 2);
                                } else {
                                    if (Bridge.referenceEquals(a.name, "Shooter")) {
                                        this.pctAttackBasicParams.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 17);
                                    } else {
                                        if (Bridge.referenceEquals(a.name, "Arbalester")) {
                                            this.pctAttackBasicParams.spriteRef = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 18);
                                        }
                                    }
                                }
                            }
                            i = (i + 1) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                for (var j = i; j <= 5; j = (j + 1) | 0) {
                    this.lblsAbils[j].Visible = false;
                }

                this.frmHelp.H = (lastH + 5) | 0;

                if (!System.Nullable.hasValue(pnt)) {
                    pnt = new Microsoft.Xna.Framework.Point.$ctor2(((((DarkKingdomCore.MyGame.gameWidth - this.frmHelp.W) | 0) - 30) | 0), 90);
                }

                this.frmHelp.X = (System.Nullable.getValue(pnt).X + 10) | 0;
                this.frmHelp.Y = (System.Nullable.getValue(pnt).Y + 10) | 0;
                if (this.frmHelp.Right > ((DarkKingdomCore.MyGame.gameWidth - 20) | 0)) {
                    this.frmHelp.Right = (DarkKingdomCore.MyGame.gameWidth - 20) | 0;
                }
                if (this.frmHelp.Bottom > ((DarkKingdomCore.MyGame.gameHeight - 20) | 0)) {
                    this.frmHelp.Bottom = (DarkKingdomCore.MyGame.gameHeight - 20) | 0;
                }

                this.frmHelp.Visible = true;
            },
            GetEnding: function (n) {
                if (n > 4) {
                    return "";
                } else {
                    if (n === 1) {
                        return "\u043e";
                    } else {
                        return "\u0430";
                    }
                }
            },
            ShowInfo: function (pnt, lines) {
                if (lines === void 0) { lines = []; }
                this.ShowMoreInfo(new DarkKingdomCore.TimeCost.$ctor1(0, 0, 0, 0), false, pnt.$clone(), lines);
            },
            ShowMoreInfo: function (cost, cstHighlight, pnt, lines) {
                if (lines === void 0) { lines = []; }
                this.lblUnitNameHelpUnit.Text = lines[0];
                this.lblRaceHelpUnit.Text = lines[1];

                this.lblCostMoneyHelpUnit.Text = Bridge.toString(cost.Money);
                if (DarkKingdomCore.MyGame.plrs[0].res.Money < cost.Money && cstHighlight) {
                    this.lblCostMoneyHelpUnit.TextColor = Microsoft.Xna.Framework.Color.Red.$clone();
                } else {
                    this.lblCostMoneyHelpUnit.TextColor = this.moneyClr.$clone();
                }


                if (cost.Death > 0) {
                    this.lblCostDeathHelpUnit.Text = Bridge.toString(cost.Death);
                    if (DarkKingdomCore.MyGame.plrs[0].res.Death < cost.Death && cstHighlight) {
                        this.lblCostDeathHelpUnit.TextColor = Microsoft.Xna.Framework.Color.Red.$clone();
                    } else {
                        this.lblCostDeathHelpUnit.TextColor = this.deathClr.$clone();
                    }
                } else {
                    this.lblCostDeathHelpUnit.Text = "-";
                }

                this.cBattleParameters.Visible = false;

                var i = 0;
                var lastH = this.lblCostMoneyHelpUnit.Bottom;
                for (i = 2; i < lines.length; i = (i + 1) | 0) {
                    this.lblsAbils[((i - 2) | 0)].Text = lines[i];
                    this.lblsAbils[((i - 2) | 0)].TextColor = Microsoft.Xna.Framework.Color.Black.$clone();
                    this.lblsAbils[((i - 2) | 0)].Visible = true;
                    this.lblsAbils[((i - 2) | 0)].Y = (lastH + 5) | 0;
                    lastH = this.lblsAbils[((i - 2) | 0)].Bottom;
                }

                for (var j = (i - 2) | 0; j <= 5; j = (j + 1) | 0) {
                    this.lblsAbils[j].Visible = false;
                }

                this.frmHelp.H = (lastH + 5) | 0;
                if (!System.Nullable.hasValue(pnt)) {
                    pnt = new Microsoft.Xna.Framework.Point.$ctor2(((((DarkKingdomCore.MyGame.gameWidth - this.frmHelp.W) | 0) - 40) | 0), 80);
                }

                this.frmHelp.X = (System.Nullable.getValue(pnt).X + 20) | 0;
                this.frmHelp.Y = (System.Nullable.getValue(pnt).Y + 20) | 0;
                if (this.frmHelp.Right > ((DarkKingdomCore.MyGame.gameWidth - 20) | 0)) {
                    this.frmHelp.Right = (DarkKingdomCore.MyGame.gameWidth - 20) | 0;
                }
                if (this.frmHelp.Bottom > ((DarkKingdomCore.MyGame.gameHeight - 20) | 0)) {
                    this.frmHelp.Bottom = (DarkKingdomCore.MyGame.gameHeight - 20) | 0;
                }

                this.frmHelp.Visible = true;
            },
            CreateRaceList: function () {
                var $t;
                this.races1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.races2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.standartRaces = new (System.Collections.Generic.List$1(System.String)).ctor();
                $t = Bridge.getEnumerator(DarkKingdomCore.RaceManager.Instance.All.Values);
                try {
                    while ($t.moveNext()) {
                        var r = $t.Current;
                        if (!r.special) {
                            this.races1.add(r.name);
                            if (!r.noAI) {
                                this.races2.add(r.name);
                            }
                            if (!r.custom && !(Bridge.referenceEquals(r.name, "Random"))) {
                                this.standartRaces.add(r.name);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            AddCustomRace: function (name) {
                var nick, desc;
                var symb;
                var noAI;
                nick = this.localize.GetString(name);
                symb = (10 + System.Int32.parse(String.fromCharCode(name.charCodeAt(((name.length - 1) | 0))))) | 0;
                desc = "\u0421\u0434\u0435\u043b\u0430\u043d\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u0440\u0443\u043a\u0430\u043c\u0438";
                noAI = false;
                DarkKingdomCore.RaceManager.Instance.All.add(name, new DarkKingdomCore.Race(name, desc, nick, symb, noAI, true, false, false));
                this.OrderRaces();
            },
            OrderRaces: function () {
                var $t;
                var newraces = Bridge.fn.bind(this, function (_o1) {
                        _o1.add("Random", new DarkKingdomCore.Race("Random", "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440 \u0444\u0440\u0430\u043a\u0446\u0438\u0438", this.localize.GetString("Random"), 4, false, false, false, false));
                        return _o1;
                    })(new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.Race)).ctor());

                if (DarkKingdomCore.ProfileManager.Instance.All.Count > 0) {
                    for (var i = 0; i < DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxCustomRaces; i = (i + 1) | 0) {
                        if (DarkKingdomCore.RaceManager.Instance.All.containsKey(System.String.format("Custom{0}", [i]))) {
                            newraces.add(System.String.format("Custom{0}", [i]), DarkKingdomCore.RaceManager.Instance.All.getItem(System.String.format("Custom{0}", [i])));
                        }
                    }
                }


                $t = Bridge.getEnumerator(DarkKingdomCore.RaceManager.Instance.All.Values);
                try {
                    while ($t.moveNext()) {
                        var r = $t.Current;
                        if (!r.custom && !(Bridge.referenceEquals(r.name, "Random"))) {
                            newraces.add(r.name, r);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                DarkKingdomCore.RaceManager.Instance.All = newraces;
            },
            SaveCurrentEdRace: function () {
                //if (!RaceManager.Instance.All.ContainsKey(currentEdRace))
                //    AddCustomRace(currentEdRace);
                //{
                //var abil = RaceManager.Instance.All[currentEdRace];
                //if (!string.IsNullOrEmpty(currentEdRaceNick))
                //    abil.nick = currentEdRaceNick;
                //abil.units.Clear();
                //foreach (string u in edunits)
                //    abil.units.Add(u);
                //UnlockAchiviement("Openeditor");
                //}
            },
            ClearVarsAndCalcEarned: function () {
                this.selU = null;
                DarkKingdomCore.MyGame.pars.clear();
                this.ammos.clear();
                DarkKingdomCore.MyGame.units.clear();
                this.deathlist.clear();
                this.bornList.clear();

                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame || DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Win || DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Lose) {
                    this.ResetWorld(this.sunAng, this.dAng);
                }
                if (DarkKingdomCore.RaceManager.Instance.All.getItem(DarkKingdomCore.MyGame.plrs[0].race).disableRewards) {
                    this.unlockedAchivs.clear();
                    this.unlockedUnits.clear();
                } else {
                    if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.Win) {
                        this.UnlockAchiviement("Startpath");
                        if (DarkKingdomCore.MyGame.plrs[0].statDeaths === 0) {
                            this.UnlockAchiviement("Gentleleader");
                        }
                        if (Bridge.referenceEquals(this.conds.getItem(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).difficult).$clone().name, "Hard")) {
                            if (!DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs.containsKey("Alittleharder")) {
                                DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs.add("Alittleharder", "2");
                            } else {
                                if (!System.String.isNullOrEmpty(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs.getItem("Alittleharder"))) {
                                    DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs.setItem("Alittleharder", Bridge.toString((((System.Int32.parse(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs.getItem("Alittleharder")) - 1) | 0))));
                                    if (Bridge.referenceEquals(DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs.getItem("Alittleharder"), "0")) {
                                        this.unlockedAchivs.add("Alittleharder");
                                    }
                                }
                            }
                        }
                        if (DarkKingdomCore.MyGame.plrs[0].unitsList.Count === 0) {
                            this.UnlockAchiviement("Truemage");
                        }
                    }
                    if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).minvictims === -1 || DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).minvictims > DarkKingdomCore.MyGame.plrs[0].statDeaths) {
                        DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).minvictims = DarkKingdomCore.MyGame.plrs[0].statDeaths;
                    }

                    if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxkills === -1 || DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxkills < DarkKingdomCore.MyGame.plrs[1].statDeaths) {
                        DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxkills = DarkKingdomCore.MyGame.plrs[1].statDeaths;
                    }
                }


                // End If
                DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.MainMenu;
                this.Pause = false;
            },
            UnlockAchiviement: function (achiv) {
                if (!DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).achivs.containsKey(achiv) && !this.unlockedAchivs.contains(achiv)) {
                    this.unlockedAchivs.add(achiv);
                }
            },
            CheckPurchaseCost: function (prch) {
                var $t, $t1, $t2, $t3;
                if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).crystals >= this.purchases.getItem(prch).crystals) {
                    switch (this.purchases.getItem(prch).name) {
                        case "Buster1T": 
                            {
                                var avunits = new (System.Collections.Generic.List$1(System.String)).ctor();
                                var tier = 1;
                                $t = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t.moveNext()) {
                                        var u = $t.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Cost.Tier === tier && !DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u)) {
                                            avunits.add(u);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t, System.IDisposable)) {
                                        $t.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits.Count > 0) {
                                    return true;
                                }
                                break;
                            }
                        case "Buster2T": 
                            {
                                var avunits1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                var tier1 = 2;
                                $t1 = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t1.moveNext()) {
                                        var u1 = $t1.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u1).$clone().Cost.Tier === tier1 && !DarkKingdomCore.MyGame.unitPrms.getItem(u1).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u1)) {
                                            avunits1.add(u1);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits1.Count > 0) {
                                    return true;
                                }
                                break;
                            }
                        case "Buster3T": 
                            {
                                var avunits2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                var tier2 = 3;
                                $t2 = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t2.moveNext()) {
                                        var u2 = $t2.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u2).$clone().Cost.Tier === tier2 && !DarkKingdomCore.MyGame.unitPrms.getItem(u2).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u2)) {
                                            avunits2.add(u2);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits2.Count > 0) {
                                    return true;
                                }
                                break;
                            }
                        case "Herobuster": 
                            {
                                var avunits3 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                $t3 = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t3.moveNext()) {
                                        var u3 = $t3.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u3).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u3)) {
                                            avunits3.add(u3);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t3, System.IDisposable)) {
                                        $t3.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits3.Count > 0) {
                                    return true;
                                }
                                break;
                            }
                        case "AdditionSlot": 
                            {
                                if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxCustomRaces < 3) {
                                    return true;
                                }
                                break;
                            }
                    }
                }
                return false;
            },
            Buy: function (prch) {
                var $t, $t1, $t2, $t3, $t4, $t5;
                if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).crystals >= this.purchases.getItem(prch).crystals) {
                    var cancel = false;
                    switch (this.purchases.getItem(prch).name) {
                        case "Buster1T": 
                            {
                                var avunits = new (System.Collections.Generic.List$1(System.String)).ctor();
                                var bustsize = 4;
                                var tier = 1;
                                $t = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t.moveNext()) {
                                        var u = $t.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().Cost.Tier === tier && !DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u) && !this.unlockedUnits.contains(u)) {
                                            avunits.add(u);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t, System.IDisposable)) {
                                        $t.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits.Count > 0) {
                                    while (avunits.Count > 0 && bustsize > 0) {
                                        var u1 = avunits.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits.Count));
                                        this.unlockedUnits.add(u1);
                                        avunits.remove(u1);
                                        bustsize = (bustsize - 1) | 0;
                                    }
                                } else {
                                    cancel = true;
                                }
                                break;
                            }
                        case "Buster2T": 
                            {
                                var avunits1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                var bustsize1 = 2;
                                var tier1 = 2;
                                $t1 = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t1.moveNext()) {
                                        var u2 = $t1.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u2).$clone().Cost.Tier === tier1 && !DarkKingdomCore.MyGame.unitPrms.getItem(u2).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u2) && !this.unlockedUnits.contains(u2)) {
                                            avunits1.add(u2);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits1.Count > 0) {
                                    while (avunits1.Count > 0 && bustsize1 > 0) {
                                        var u3 = avunits1.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits1.Count));
                                        this.unlockedUnits.add(u3);
                                        avunits1.remove(u3);
                                        bustsize1 = (bustsize1 - 1) | 0;
                                    }
                                } else {
                                    cancel = true;
                                }
                                break;
                            }
                        case "Buster3T": 
                            {
                                var avunits2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                var tier2 = 3;
                                $t2 = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t2.moveNext()) {
                                        var u4 = $t2.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u4).$clone().Cost.Tier === tier2 && !DarkKingdomCore.MyGame.unitPrms.getItem(u4).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u4) && !this.unlockedUnits.contains(u4)) {
                                            avunits2.add(u4);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits2.Count > 0) {
                                    this.unlockedUnits.add(avunits2.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits2.Count)));
                                } else {
                                    cancel = true;
                                }
                                break;
                            }
                        case "Herobuster": 
                            {
                                var avunits3 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                $t3 = Bridge.getEnumerator(this.AllUntsList);
                                try {
                                    while ($t3.moveNext()) {
                                        var u5 = $t3.Current;
                                        if (DarkKingdomCore.MyGame.unitPrms.getItem(u5).$clone().isHeroic && !DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).units.contains(u5) && !this.unlockedUnits.contains(u5)) {
                                            avunits3.add(u5);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t3, System.IDisposable)) {
                                        $t3.System$IDisposable$Dispose();
                                    }
                                }
                                if (avunits3.Count > 0) {
                                    this.unlockedUnits.add(avunits3.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits3.Count)));
                                } else {
                                    cancel = true;
                                }
                                break;
                            }
                        case "AdditionSlot": 
                            {
                                if (DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile).maxCustomRaces < 3) {
                                    ($t4 = DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile)).maxCustomRaces = ($t4.maxCustomRaces + 1) | 0;
                                } else {
                                    cancel = true;
                                }
                                break;
                            }
                    }
                    if (!cancel) {
                        ($t5 = DarkKingdomCore.ProfileManager.Instance.All.getItem(this.curProfile)).crystals = ($t5.crystals - this.purchases.getItem(prch).crystals) | 0;
                        this.UnlockAchiviement("Firstpurchase");
                    }
                }
            },
            btnUnitPreGame_Clicked: function (btn, isTouch) {
                var uname = this.unitsPreGame.getItem(this.cUnitsPreGame.Children.indexOf(btn));
                if (!this.preGameUnits.contains(uname) && ((((this.preGameUnits.Count + this.preGameSpells.Count) | 0) + this.preGameBonus.Count) | 0) < this.preGameSlotCnt) {
                    this.preGameUnits.add(uname);
                    this.preGameUnits = this.SortUnitsLists(this.preGameUnits);
                    this.SetPreGameLists();
                }
            },
            btnSpellsPreGame_Clicked: function (btn, isTouch) {
                var sname = this.spellsPreGame.getItem(this.cSpellsPreGame.Children.indexOf(btn));
                if (!this.preGameSpells.contains(sname) && ((((this.preGameUnits.Count + this.preGameSpells.Count) | 0) + this.preGameBonus.Count) | 0) < this.preGameSlotCnt) {
                    this.preGameSpells.add(sname);
                    this.preGameSpells = this.SortSpellsLists(this.preGameSpells);
                    this.SetPreGameLists();
                }
            },
            btnBuildingPreGame_Clicked: function (btn, isTouch) {
                var bname = this.startBuildingsList.getItem(this.cBuildingsPreGame.Children.indexOf(btn));
                if (!this.preGameBonus.contains(bname) && ((((this.preGameUnits.Count + this.preGameSpells.Count) | 0) + this.preGameBonus.Count) | 0) < this.preGameSlotCnt) {
                    this.preGameBonus.add(bname);
                    this.SetPreGameLists();
                }
            },
            btnSelectedPreGame_Clicked: function (btn, isTouch) {
                var ind = this.cSelectedPreGame.Children.indexOf(btn);
                if ((ind < this.preGameUnits.Count)) {
                    var uname = this.preGameUnits.getItem(ind);
                    this.preGameUnits.remove(uname);
                    this.SetPreGameLists();
                } else if ((((ind - this.preGameUnits.Count) | 0) < this.preGameSpells.Count)) {
                    var sname = this.preGameSpells.getItem(((ind - this.preGameUnits.Count) | 0));
                    this.preGameSpells.remove(sname);
                    this.SetPreGameLists();
                } else if ((((((ind - this.preGameUnits.Count) | 0) - this.preGameSpells.Count) | 0) < this.preGameBonus.Count)) {
                    var bname = this.preGameBonus.getItem(((((ind - this.preGameUnits.Count) | 0) - this.preGameSpells.Count) | 0));
                    this.preGameBonus.remove(bname);
                    this.SetPreGameLists();
                }
            },
            btnUnitPreGame_Focused: function (btn, isTouch) {
                if ((this.cUnitsPreGame.Children.Count === this.unitsPreGame.Count)) {
                    var uname = this.unitsPreGame.getItem(this.cUnitsPreGame.Children.indexOf(btn));
                    this.ShowUnitInfo(DarkKingdomCore.MyGame.unitPrms.getItem(uname).$clone(), 0, false, new Microsoft.Xna.Framework.Point.$ctor2(Bridge.Int.clip32(btn.FinalRight / this.MainContainer.FinalChildrenScaleX), Bridge.Int.clip32(btn.FinalBottom / this.MainContainer.FinalChildrenScaleY)));
                }
            },
            btnSpellsPreGame_Focused: function (btn, isTouch) {
                if ((this.cSpellsPreGame.Children.Count === this.spellsPreGame.Count)) {
                    var sname = this.spellsPreGame.getItem(this.cSpellsPreGame.Children.indexOf(btn));
                    this.ShowMoreInfo(this.spells.getItem(sname).Cost.$clone(), false, new Microsoft.Xna.Framework.Point.$ctor2(Bridge.Int.clip32(btn.FinalRight / this.MainContainer.FinalChildrenScaleX), Bridge.Int.clip32(btn.FinalBottom / this.MainContainer.FinalChildrenScaleY)), [this.localize.GetString(this.spells.getItem(sname).Name), this.localize.GetString$1(this.spells.getItem(sname).School, [this.spells.getItem(sname).Cost.Tier]), this.spells.getItem(sname).Description]);
                }
            },
            btnBuildingPreGame_Focused: function (btn, isTouch) {
                var bname = this.startBuildingsList.getItem(this.cBuildingsPreGame.Children.indexOf(btn));
                this.ShowUnitInfo(DarkKingdomCore.MyGame.unitPrms.getItem(bname).$clone(), 0, false, new Microsoft.Xna.Framework.Point.$ctor2(Bridge.Int.clip32(btn.FinalRight / this.MainContainer.FinalChildrenScaleX), Bridge.Int.clip32(btn.FinalBottom / this.MainContainer.FinalChildrenScaleY)));
            },
            btnSelectedPreGame_Focused: function (btn, isTouch) {
                var ind = this.cSelectedPreGame.Children.indexOf(btn);
                if ((ind < this.preGameUnits.Count)) {
                    var uname = this.preGameUnits.getItem(ind);
                    this.ShowUnitInfo(DarkKingdomCore.MyGame.unitPrms.getItem(uname).$clone(), 0, false, new Microsoft.Xna.Framework.Point.$ctor2(Bridge.Int.clip32(btn.FinalRight / this.MainContainer.FinalChildrenScaleX), Bridge.Int.clip32(btn.FinalBottom / this.MainContainer.FinalChildrenScaleY)));
                } else if ((((ind - this.preGameUnits.Count) | 0) < this.preGameSpells.Count)) {
                    var sname = this.preGameSpells.getItem(((ind - this.preGameUnits.Count) | 0));
                    this.ShowMoreInfo(this.spells.getItem(sname).Cost.$clone(), true, new Microsoft.Xna.Framework.Point.$ctor2(Bridge.Int.clip32(btn.FinalRight / this.MainContainer.FinalChildrenScaleX), Bridge.Int.clip32(btn.FinalBottom / this.MainContainer.FinalChildrenScaleY)), [this.localize.GetString(this.spells.getItem(sname).Name), this.localize.GetString$1(this.spells.getItem(sname).School, [Bridge.toString(this.spells.getItem(sname).Cost.Tier)]), this.spells.getItem(sname).Description]);
                } else if ((((((ind - this.preGameUnits.Count) | 0) - this.preGameSpells.Count) | 0) < this.preGameBonus.Count)) {
                    var bname = this.preGameBonus.getItem(((((ind - this.preGameUnits.Count) | 0) - this.preGameSpells.Count) | 0));
                    this.ShowUnitInfo(DarkKingdomCore.MyGame.unitPrms.getItem(bname).$clone(), 0, false, new Microsoft.Xna.Framework.Point.$ctor2(Bridge.Int.clip32(btn.FinalRight / this.MainContainer.FinalChildrenScaleX), Bridge.Int.clip32(btn.FinalBottom / this.MainContainer.FinalChildrenScaleY)));
                }
            },
            DoUnitsSpells: function (name, trgs) {
                var $t, $t1, $t2, $t3;
                var cancel = true;
                $t = Bridge.getEnumerator(trgs);
                try {
                    while ($t.moveNext()) {
                        var trg = $t.Current;
                        if (trg.parameters.isBuilding) {
                            this.ShowInfoPar("\u041d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                            continue;
                        }
                        if (trg.AbsContains("Spellproof")) {
                            this.ShowInfoPar("\u0417\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u043c\u0430\u0433\u0438\u0438", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                            continue;
                        }
                        if (Bridge.referenceEquals(name, "Magic_armor")) {
                            if (trg.AbsContains("Invulnerable")) {
                                this.ShowInfoPar("\u0423\u0436\u0435 \u0437\u0430\u0449\u0438\u0449\u0435\u043d", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                continue;
                            }
                        }
                        if (Bridge.referenceEquals(name, "Dark_arrow")) {
                            if (trg.AbsContains("Machinery")) {
                                this.ShowInfoPar("\u041d\u0435\u043b\u044c\u0437\u044f \u0434\u043e\u0431\u0438\u0442\u044c \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                continue;
                            }
                            if (trg.AbsContains("Bodyless")) {
                                this.ShowInfoPar("\u041d\u0435\u043b\u044c\u0437\u044f \u0434\u043e\u0431\u0438\u0442\u044c \u0431\u0435\u0441\u0442\u0435\u043b\u0435\u0441\u043d\u043e\u0433\u043e", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                continue;
                            }
                            if (trg.hp > 200) {
                                this.ShowInfoPar("\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                continue;
                            }
                        }
                        if (Bridge.referenceEquals(name, "Oblivion")) {
                            if (trg.AbsContains("Purified")) {
                                this.ShowInfoPar("\u0423\u0436\u0435 \u043b\u0438\u0448\u0435\u043d", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                continue;
                            }
                            if (trg.AbsContains("Eternal")) {
                                this.ShowInfoPar("\u0417\u0430\u0449\u0438\u0449\u0435\u043d \u043e\u0442 \u043b\u0438\u0448\u0435\u043d\u0438\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                continue;
                            }
                        }

                        cancel = false;

                        switch (name) {
                            case "Heal": 
                                {
                                    this.Heal(trg, trg.parameters.maxhp);
                                    break;
                                }
                            case "Haste": 
                                {
                                    trg.parameters.Speed = "Very_fast";
                                    trg.AddAbility$2("Agility", 20, DarkKingdomCore.EffectType.Good);
                                    break;
                                }
                            case "Weakness": 
                                {
                                    trg.parameters.Speed = "Slow";
                                    trg.AddAbility$1("Clumsiness", DarkKingdomCore.EffectType.Bad);
                                    break;
                                }
                            case "Rescue": 
                                {
                                    trg.x = (DarkKingdomCore.MyGame.plrs[trg.owner].baseX + trg.moveside) | 0;
                                    break;
                                }
                            case "Ghost_mode": 
                                {
                                    trg.AddAbility$1("Undead", DarkKingdomCore.EffectType.Good);
                                    trg.AddAbility$1("Bodyless", DarkKingdomCore.EffectType.Good);
                                    trg.RemoveAbil("Poison");
                                    break;
                                }
                            case "The_Covenant": 
                                {
                                    DarkKingdomCore.MyGame.units.getItem(((1 - trg.owner) | 0)).hp -= trg.hp;
                                    this.ShowInfoPar("-" + (System.Single.format(trg.hp) || ""), DarkKingdomCore.MyGame.badAbilClr.$clone(), DarkKingdomCore.MyGame.units.getItem(((1 - trg.owner) | 0)).x, ((DarkKingdomCore.MyGame.hor + DarkKingdomCore.MyGame.units.getItem(((1 - trg.owner) | 0)).parameters.rect.Top) | 0), false);
                                    this.Kill(trg);
                                    break;
                                }
                            case "Magic_arrow": 
                                {
                                    this.Harm(trg, DarkKingdomCore.MyGame.rnd.Next$2(100, 151), true, DarkKingdomCore.EffectType.Bad);
                                    break;
                                }
                            case "Polymorph": 
                                {
                                    var allunitst = new (System.Collections.Generic.List$1(System.String)).ctor();
                                    var u;
                                    $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                                    try {
                                        while ($t1.moveNext()) {
                                            var up = $t1.Current.$clone();
                                            if (!up.special) {
                                                if (up.Cost.Tier === trg.parameters.Cost.Tier && DarkKingdomCore.MyGame.plrs[trg.owner].CheckForLimit(up.Name)) {
                                                    allunitst.add(up.Name);
                                                }
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t1, System.IDisposable)) {
                                            $t1.System$IDisposable$Dispose();
                                        }
                                    }
                                    if (allunitst.Count > 0) {
                                        u = DarkKingdomCore.MyGame.rnd.Next$2(0, allunitst.Count);
                                        trg.SetParams(DarkKingdomCore.MyGame.unitPrms.getItem(allunitst.getItem(u)).$clone(), true);
                                        trg.purified = false;
                                        trg.takedOff = false;
                                        trg.landing = false;
                                    } else {
                                        cancel = true;
                                        this.ShowInfoPar("\u041d\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u0443\u0449\u0435\u0441\u0442\u0432", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                    }

                                    break;
                                }
                            case "Dark_arrow": 
                                {
                                    this.Kill(trg);
                                    var allunitst1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                    var u1;
                                    $t2 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                                    try {
                                        while ($t2.moveNext()) {
                                            var up1 = $t2.Current.$clone();
                                            if (!up1.special) {
                                                if (up1.Cost.Tier === trg.parameters.Cost.Tier && up1.AbsContains("Undead") && DarkKingdomCore.MyGame.plrs[0].CheckForLimit(up1.Name)) {
                                                    allunitst1.add(up1.Name);
                                                }
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$Dispose();
                                        }
                                    }
                                    if (allunitst1.Count > 0) {
                                        u1 = DarkKingdomCore.MyGame.rnd.Next$2(0, allunitst1.Count);
                                        this.bornList.add(new DarkKingdomCore.Unit(this, trg.x, 1, 0, DarkKingdomCore.MyGame.unitPrms.getItem(allunitst1.getItem(u1)).$clone()));
                                    } else {
                                        this.ShowInfoPar("\u041d\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u0443\u0449\u0435\u0441\u0442\u0432", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                    }
                                    break;
                                }
                            case "Transmutation": 
                                {
                                    var allunitst2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                    var u2;
                                    $t3 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                                    try {
                                        while ($t3.moveNext()) {
                                            var up2 = $t3.Current.$clone();
                                            if (!up2.special) {
                                                if (up2.Cost.Tier === ((trg.parameters.Cost.Tier + 1) | 0) && Bridge.referenceEquals(up2.Race, trg.parameters.Race) && DarkKingdomCore.MyGame.plrs[0].CheckForLimit(up2.Name)) {
                                                    allunitst2.add(up2.Name);
                                                }
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t3, System.IDisposable)) {
                                            $t3.System$IDisposable$Dispose();
                                        }
                                    }
                                    if (allunitst2.Count > 0) {
                                        u2 = DarkKingdomCore.MyGame.rnd.Next$2(0, allunitst2.Count);
                                        trg.SetParams(DarkKingdomCore.MyGame.unitPrms.getItem(allunitst2.getItem(u2)).$clone(), false);
                                        if (trg.hp > trg.parameters.maxhp) {
                                            trg.hp = trg.parameters.maxhp;
                                        }
                                        trg.purified = false;
                                        trg.takedOff = false;
                                        trg.landing = false;
                                    } else {
                                        cancel = true;
                                        this.ShowInfoPar("\u041d\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u0443\u0449\u0435\u0441\u0442\u0432", DarkKingdomCore.MyGame.badAbilClr.$clone(), trg.x, ((DarkKingdomCore.MyGame.hor + trg.parameters.rect.Top) | 0), true);
                                    }

                                    break;
                                }
                            case "Googlehammer": 
                                {
                                    trg.AddAbility$1("Mage", DarkKingdomCore.EffectType.Good);
                                    if (trg.parameters.Attack.Range === 1) {
                                        trg.parameters.Attack.Range = 3;
                                        trg.parameters.ammoType = DarkKingdomCore.Ammo.AmmoType.Hammer;
                                        if (trg.parameters.Attack.Speed < 60) {
                                            trg.parameters.Attack.Speed = 60;
                                        }
                                    }

                                    break;
                                }
                            case "Magic_armor": 
                                {
                                    trg.AddAbility$2("Invulnerable", 400, DarkKingdomCore.EffectType.Good);
                                    break;
                                }
                            case "Oblivion": 
                                {
                                    trg.purified = true;
                                    break;
                                }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (!cancel) {
                    this.SpellComplete(name);
                    return true;
                }
                return false;
            },
            DoGlobalSpells: function (name) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                switch (name) {
                    case "Earthquake": 
                        {
                            $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                            try {
                                while ($t.moveNext()) {
                                    var u = $t.Current;
                                    if (u.parameters.isBuilding && !u.AbsContains("Spellproof")) {
                                        this.Harm(u, DarkKingdomCore.MyGame.rnd.Next$2(250, 501), true, DarkKingdomCore.EffectType.Bad);
                                    }
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }

                            break;
                        }
                    case "Mana_blast": 
                        {
                            $t1 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                            try {
                                while ($t1.moveNext()) {
                                    var u1 = $t1.Current;
                                    if (u1.AbsContains("Mage") && !u1.AbsContains("Spellproof")) {
                                        this.Explode(u1, true);
                                        if (!Bridge.referenceEquals(u1.parameters.Armor, "None")) {
                                            u1.parameters.Armor = "None";
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }

                            break;
                        }
                    case "Storm": 
                        {
                            $t2 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                            try {
                                while ($t2.moveNext()) {
                                    var u2 = $t2.Current;
                                    if (u2.owner !== 0 && !u2.parameters.isBuilding && u2.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT && !u2.AbsContains("Spellproof")) {
                                        this.Harm(u2, DarkKingdomCore.MyGame.rnd.Next$2(70, 101), false, DarkKingdomCore.EffectType.Bad);
                                        u2.landing = true;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }

                            break;
                        }
                    case "Mass_polymorph": 
                        {
                            var allunitst = new (System.Collections.Generic.List$1(System.String)).ctor();
                            var u3;
                            $t3 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                            try {
                                while ($t3.moveNext()) {
                                    var uu = $t3.Current;
                                    if (!uu.parameters.isBuilding && !uu.AbsContains("Spellproof")) {
                                        allunitst.clear();
                                        $t4 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                                        try {
                                            while ($t4.moveNext()) {
                                                var up = $t4.Current.$clone();
                                                if (!up.special) {
                                                    if (up.Cost.Tier === uu.parameters.Cost.Tier && DarkKingdomCore.MyGame.plrs[uu.owner].CheckForLimit(up.Name)) {
                                                        allunitst.add(up.Name);
                                                    }
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t4, System.IDisposable)) {
                                                $t4.System$IDisposable$Dispose();
                                            }
                                        }
                                        if (allunitst.Count > 0) {
                                            u3 = DarkKingdomCore.MyGame.rnd.Next$2(0, allunitst.Count);
                                            uu.SetParams(DarkKingdomCore.MyGame.unitPrms.getItem(allunitst.getItem(u3)).$clone(), true);
                                            uu.purified = false;
                                            uu.takedOff = false;
                                            uu.landing = false;
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t3, System.IDisposable)) {
                                    $t3.System$IDisposable$Dispose();
                                }
                            }

                            break;
                        }
                    case "Jackpot": 
                        {
                            var allspells = new (System.Collections.Generic.List$1(System.String)).ctor();
                            $t5 = Bridge.getEnumerator(this.spells.Keys);
                            try {
                                while ($t5.moveNext()) {
                                    var spl = $t5.Current;
                                    allspells.add(spl);
                                }
                            } finally {
                                if (Bridge.is($t5, System.IDisposable)) {
                                    $t5.System$IDisposable$Dispose();
                                }
                            }
                            DarkKingdomCore.MyGame.plrs[0].spllsList = this.RandomizeSpells(DarkKingdomCore.MyGame.plrs[0].spllsList.Count, allspells);
                            this.updateSpells = true;
                            break;
                        }
                    case "Arrowrain": 
                        {
                            $t6 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                            try {
                                while ($t6.moveNext()) {
                                    var uu1 = $t6.Current;
                                    if (uu1.owner === 1 && !(Bridge.referenceEquals(uu1.parameters.Name, DarkKingdomCore.MyGame.plrs[1].hero))) {
                                        this.ammos.add(new DarkKingdomCore.Ammo.ctor(0, DarkKingdomCore.Ammo.AmmoType.Arrow, ((-this.us2) | 0), DarkKingdomCore.MyGame.hor, null, uu1, Bridge.Int.mul(DarkKingdomCore.MyGame.plrs[0].uCount, DarkKingdomCore.MyGame.rnd.Next$2(5, 11)), false, false, 7200));
                                    }
                                }
                            } finally {
                                if (Bridge.is($t6, System.IDisposable)) {
                                    $t6.System$IDisposable$Dispose();
                                }
                            }

                            break;
                        }
                    case "Poison_wave": 
                        {
                            $t7 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                            try {
                                while ($t7.moveNext()) {
                                    var uu2 = $t7.Current;
                                    if (!uu2.AbsContains("Spellproof")) {
                                        if (uu2.AbsContains("Poison")) {
                                            uu2.RemoveAbil("Poison");
                                            if (uu2.owner === 0) {
                                                this.Heal(uu2, DarkKingdomCore.MyGame.rnd.Next$2(70, 101));
                                            } else {
                                                if (uu2.owner === 1) {
                                                    this.Harm(uu2, DarkKingdomCore.MyGame.rnd.Next$2(70, 101), true, DarkKingdomCore.EffectType.Poison);
                                                }
                                            }
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t7, System.IDisposable)) {
                                    $t7.System$IDisposable$Dispose();
                                }
                            }

                            break;
                        }
                }
                this.SpellComplete(name);
                return true;
            },
            SpellComplete: function (name) {
                var $t, $t1;
                DarkKingdomCore.MyGame.plrs[0].Resources = DarkKingdomCore.TimeCost.op_Subtraction(DarkKingdomCore.MyGame.plrs[0].Resources.$clone(), this.spells.getItem(name).Cost.$clone());
                DarkKingdomCore.MyGame.plrs[0].spellsRchrg.setItem(DarkKingdomCore.MyGame.plrs[0].spllsList.indexOf(name), this.spells.getItem(name).Cost.Time);
                this.ShowInfoPar(this.localize.GetString(name), DarkKingdomCore.MyGame.goodAbilClr.$clone(), ((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0), ((Bridge.Int.div(DarkKingdomCore.MyGame.gameHeight, 2)) | 0), true, true);
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var uu = $t.Current;
                        if (uu.AbsContains("Antimage")) {
                            uu.Attack = DarkKingdomCore.Attack.op_Addition$1(uu.Attack.$clone(), (uu.abils.getItem("Antimage").value) | 0);
                            this.ShowInfoPar("\u041c\u0430\u0433\u0438\u044f!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                        }
                        if (uu.AbsContains("Magic_power")) {
                            ($t1 = uu.parameters.Attack.$clone()).Range = ($t1.Range + 1) | 0;
                            this.ShowInfoPar("\u041c\u0430\u0433\u0438\u044f!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            MouseClicked: function (pos, isTouch) {
                var $t;
                if (isTouch === void 0) { isTouch = false; }
                if (this.selU != null) {
                    this.selU = null;
                }
                this.MainContainer.ClickButton$1(Bridge.Int.clip32(pos.X), Bridge.Int.clip32(pos.Y), isTouch);
                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame) {
                    var respos = new Microsoft.Xna.Framework.Vector2.$ctor2(pos.X * this.scaleX, pos.Y * this.scaleY);

                    var trgs = new (System.Collections.Generic.List$1(DarkKingdomCore.Unit)).ctor();
                    $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t.moveNext()) {
                            var u = $t.Current;
                            if (u.x + u.parameters.rect.Right > respos.X && respos.X > u.x + u.parameters.rect.Left && ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Bottom) | 0) > respos.Y && respos.Y > ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0)) {
                                if (u.owner === 1 || !u.AbsContains("Invisible")) {
                                    this.selU = u;
                                    trgs.add(u);
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (this.inSpellMode) {
                        if (this.DoUnitsSpells(this.spellName, trgs)) {
                            this.inSpellMode = false;
                        }
                    }
                }
            },
            AddToReadyUnits: function (plr, unitName) {
                var unitRes = unitName;
                if (DarkKingdomCore.MyGame.unitPrms.getItem(unitName).$clone().AbsContains("Crowd")) {
                    if (DarkKingdomCore.MyGame.unitPrms.getItem(unitName).$clone().AbsContains("Crowd2") && plr.res.Tier === 2) {
                        if (DarkKingdomCore.MyGame.rnd.NextDouble() < 0.5) {
                            unitRes = "Skeleton_archer";
                        } else {
                            if (DarkKingdomCore.MyGame.rnd.NextDouble() < 0.8) {
                                unitRes = "Skeleton_warrior";
                            } else {
                                unitRes = "Skeleton_knight";
                            }
                        }
                    } else if (DarkKingdomCore.MyGame.rnd.NextDouble() < 0.5) {
                        unitRes = "Skeleton_archer";
                    } else {
                        unitRes = "Skeleton_warrior";
                    }
                }
                plr.readyUnits.add(unitRes);
            },
            DrawInterface: function (sb) {
                this.MainContainer.Draw(sb, 1.0);
            },
            battleFrmMainMenu: function (btn, isTouch) {
                this.StartBattle();
            },
            profileFrmMainMenu: function (btn, isTouch) {
                this.StartProfile();
            },
            surrenderFrmBattleMenu_Clicked: function (btn, isTouch) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4], $step);
                            switch ($step) {
                                case 0: {
                                    this.frmBattleMenu.Hide(this.mainAnimator);

                                    $task1 = this.ShowDialogConfirmation("\u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u0434\u0430\u0442\u044c\u0441\u044f?");
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    if ($taskResult1) {
                                        $step = 2;
                                        continue;
                                    } else  {
                                        $step = 3;
                                        continue;
                                    }
                                }
                                case 2: {
                                    DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.Lose;
                                    this.EndOfBattle();
                                    $step = 4;
                                    continue;
                                }
                                case 3: {
                                    this.frmBattleMenu.Show(this.mainAnimator);
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            restartFrmBattleMenu_Clicked: function (btn, isTouch) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4], $step);
                            switch ($step) {
                                case 0: {
                                    this.frmBattleMenu.Hide(this.mainAnimator);

                                    $task1 = this.ShowDialogConfirmation("\u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u043d\u0430\u0447\u0430\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e?");
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    if ($taskResult1) {
                                        $step = 2;
                                        continue;
                                    } else  {
                                        $step = 3;
                                        continue;
                                    }
                                }
                                case 2: {
                                    this.StartAgain();
                                    $step = 4;
                                    continue;
                                }
                                case 3: {
                                    this.frmBattleMenu.Show(this.mainAnimator);
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            AIFrmBattleMenu_Clicked: function (btn, is_touch) {
                this.SetPlayerAI(!DarkKingdomCore.MyGame.plrs[0].AI);
            },
            backFrmBattleMenu_Clicked: function (btn, isTouch) {
                this.Pause = false;
            },
            exitFrmMenuExit_Clicked: function (btn, isTouch) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = this.ShowDialogConfirmation("\u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0438\u0433\u0440\u044b?");
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    if ($taskResult1) {
                                        $step = 2;
                                        continue;
                                    } 
                                    $step = 3;
                                    continue;
                                }
                                case 2: {
                                    !Bridge.staticEquals(this.OnExit, null) ? this.OnExit() : null;
                                    $step = 3;
                                    continue;
                                }
                                case 3: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            settingsFrmMenuExit_Clicked: function (btn, isTouch) {
                this.frmSettings.Show(this.mainAnimator);
            },
            okayFrmDialog_Clicked: function (btn, isTouch) {
                this.ClearVarsAndCalcEarned();
                this.HideSomeChildren([this.frmResources, this.frmUnits, this.frmProduction]);
                this.ShowSomeChildren([this.frmMainMenu, this.frmRightMenu]);
                this.frmDialog.Hide(this.mainAnimator);
                this.StartBattle();
            },
            pauseFrmResources_Clicked: function (btn, isTouch) {
                if (DarkKingdomCore.MyGame.gState === DarkKingdomCore.GameState.InGame) {
                    this.Pause = !this.Pause;
                }
            },
            tierUpFrmResources_Clicked: function (btn, isTouch) {
                var tier;
                if ((DarkKingdomCore.MyGame.plrs[0].res.Tier === 1)) {
                    tier = "Tier_2";
                } else {
                    tier = "Tier_3";
                }
                this.TryAddToQueueUnit(DarkKingdomCore.MyGame.plrs[0], tier);
            },
            tierUpFrmResources_Focused: function (btn, isTouch) {
                var tier;
                if ((DarkKingdomCore.MyGame.plrs[0].res.Tier === 1)) {
                    tier = "Tier_2";
                } else {
                    tier = "Tier_3";
                }
                this.ShowMoreInfo(DarkKingdomCore.MyGame.unitPrms.getItem(tier).$clone().Cost.$clone(), true, Bridge.getDefaultValue(Microsoft.Xna.Framework.Point), [this.localize.GetString(DarkKingdomCore.MyGame.unitPrms.getItem(tier).$clone().Name), "", DarkKingdomCore.MyGame.unitPrms.getItem(tier).$clone().Description]);
            },
            btnStartBattle: function (btn, isTouch) {
                this.StartPreGame();
                this.frmBattle.Hide(this.mainAnimator);
            },
            btnProduction_Clicked: function (btn, isTouch) {
                for (var i = 0; i < this.btnsProduction.length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(btn, this.btnsProduction[i])) {
                        if (i < DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) {
                            this.ProduceUnit(0, DarkKingdomCore.MyGame.plrs[0].readyUnits.getItem(i));
                            DarkKingdomCore.MyGame.plrs[0].readyUnits.removeAt(i);
                            this.UpdateQueue();
                            break;
                        } else if (((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0) < DarkKingdomCore.MyGame.plrs[0].prdQ.Count && isTouch) {
                            DarkKingdomCore.MyGame.plrs[0].Resources = DarkKingdomCore.TimeCost.op_Addition(DarkKingdomCore.MyGame.plrs[0].Resources.$clone(), DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].prdQ.getItem(((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0))).$clone().Cost.$clone());
                            this.RemoveFromQueue(0, ((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0));
                            break;
                        }
                    }
                }
            },
            btnProductionRemove_Clicked: function (btn, isTouch) {
                for (var i = 0; i < this.btnsProduction.length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(btn.Parent, this.btnsProduction[i])) {
                        if (((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0) < DarkKingdomCore.MyGame.plrs[0].prdQ.Count && !isTouch) {
                            DarkKingdomCore.MyGame.plrs[0].Resources = DarkKingdomCore.TimeCost.op_Addition(DarkKingdomCore.MyGame.plrs[0].Resources.$clone(), DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].prdQ.getItem(((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0))).$clone().Cost.$clone());
                            this.RemoveFromQueue(0, ((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0));
                            break;
                        }
                    }
                }
            },
            btnProduction_Focused: function (btn, isTouch) {
                for (var i = 0; i < this.btnsProduction.length; i = (i + 1) | 0) {

                    if (Bridge.referenceEquals(btn, this.btnsProduction[i])) {
                        if (i < DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) {
                            this.ShowUnitInfo(DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].readyUnits.getItem(i)).$clone(), 0, false, new Microsoft.Xna.Framework.Point.$ctor2(btn.FinalRight, btn.FinalBottom));
                        } else {
                            if (((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0) < DarkKingdomCore.MyGame.plrs[0].prdQ.Count) {
                                btn.Children.getItem(2).Visible = !isTouch;
                                this.ShowUnitInfo(DarkKingdomCore.MyGame.unitPrms.getItem(DarkKingdomCore.MyGame.plrs[0].prdQ.getItem(((i - DarkKingdomCore.MyGame.plrs[0].readyUnits.Count) | 0))).$clone(), 0, false, new Microsoft.Xna.Framework.Point.$ctor2(btn.FinalRight, btn.FinalBottom));
                            }
                        }
                    }
                }
            },
            TextureToApp: function (tex) {
                var $t;
                var colors = System.Array.init(1, function (){
                    return new Microsoft.Xna.Framework.Color();
                }, Microsoft.Xna.Framework.Color);
                tex.GetData(Microsoft.Xna.Framework.Color, colors);
                System.Console.WriteLine(colors[0].$clone());
                return new MonoInterface.Appearance.$ctor1(($t = new MonoInterface.Sprite(), $t.Texture = tex, $t.W = 1, $t.H = 1, $t), 0);
            },
            CreateInterfaceTexures: function () {
                this.defaultTheme.EmptyTexture = MonoInterface.Theme.GetEmptyApp(this.graphics.GraphicsDevice);

                //defaultTheme.FrameBackTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 173, 122, 71, 220));
                this.defaultTheme.FrameBackTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 0);

                //defaultTheme.ButtonBackTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 123, 72, 21));
                this.defaultTheme.ButtonBackTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 1);
                //defaultTheme.ButtonSelectedTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 200, 200, 200));
                this.defaultTheme.ButtonSelectedTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 2);
                //defaultTheme.ButtonFrontTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 255, 255, 51, 120));
                this.defaultTheme.ButtonFrontTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 3);
                //defaultTheme.ButtonPressedTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 220, 220, 220, 180));
                this.defaultTheme.ButtonPressedTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 4);
                //defaultTheme.ButtonDisabledTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 100, 100, 100, 200));
                this.defaultTheme.ButtonDisabledTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 5);

                this.defaultTheme.ProgressBackTexture = this.defaultTheme.EmptyTexture.$clone();
                //defaultTheme.ProgressFrontTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 140, 140, 140, 200));
                this.defaultTheme.ProgressFrontTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 6);

                this.defaultTheme.SwitcherButtonLeftTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("medium_icons"), 2);
                this.defaultTheme.SwitcherButtonRightTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("medium_icons"), 3);
                this.defaultTheme.SwitcherDescriptionFontSize = 14;
                this.defaultTheme.SwitcherDescriptionColor = Microsoft.Xna.Framework.Color.Black.$clone();
                this.defaultTheme.SwitcherMainFontSize = 20;
                this.defaultTheme.SwitcherMainColor = Microsoft.Xna.Framework.Color.Black.$clone();

                var nfts = System.Array.init(10, function (){
                    return new MonoInterface.Appearance();
                }, MonoInterface.Appearance);
                for (var i = 0; i <= 8; i = (i + 1) | 0) {
                    nfts[i] = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("nineframe"), i);
                }

                this.defaultTheme.NineFrameBoderTexture = nfts;

                this.defaultTheme.Fonts = this.Fonts;

                //backTheme.FrameBackTexture = TextureToApp(MonoInterface.Theme.SolidColorTexture(graphics.GraphicsDevice, 0, 0, 0, 150));
                this.backTheme.FrameBackTexture = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("empty"), 7);
            },
            CreateInterface: function () {
                var $t;
                this.defaultTheme = new MonoInterface.Theme();
                this.backTheme = new MonoInterface.Theme();

                this.CreateInterfaceTexures();

                this.MainContainer = ($t = new MonoInterface.Window(0, 0, DarkKingdomCore.MyGame.gameWidth, DarkKingdomCore.MyGame.gameHeight), $t.CurrentTheme = this.defaultTheme, $t);


                this.mainAnimator = new MonoInterface.Animator();

                this.frmUnits = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 300, 110, 0.0, 0.0, false), $t.LeftBorder = false, $t.TopBorder = false, $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -82, 0, 20), $t));

                this.cUnits = this.frmUnits.AddChild(MonoInterface.Container, new MonoInterface.Container(5, 5, 290, 60, 0.0, 0.0, true));
                this.cSpells = this.frmUnits.AddChild(MonoInterface.Container, new MonoInterface.Container(5, 5, 290, 60, 0.0, 0.0, true));
                this.cBuildings = this.frmUnits.AddChild(MonoInterface.Container, new MonoInterface.Container(5, 5, 290, 60, 0.0, 0.0, true));


                this.btnSelectUnits = this.frmUnits.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.bind(this, function (btn, is_touch) {
                    this.cUnits.Visible = true;
                    this.cSpells.Visible = false;
                    this.cBuildings.Visible = false;
                    this.btnSelectUnits.IsSelected = true;
                    this.btnSelectSpells.IsSelected = false;
                    this.btnSelectBuildings.IsSelected = false;

                    this.frmUnits.W = (Math.max(System.Linq.Enumerable.from(this.cUnits.Children, MonoInterface.Block).last().Right, this.btnSelectBuildings.Right) + 5) | 0;
                }), 5, -5, 100, 30, 0.0, 1.0, true));
                this.btnSelectUnits.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0430", 16, Microsoft.Xna.Framework.Color.Black.$clone()));

                this.btnSelectSpells = this.frmUnits.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.bind(this, function (btn, is_touch) {
                    this.cUnits.Visible = false;
                    this.cSpells.Visible = true;
                    this.cBuildings.Visible = false;
                    this.btnSelectUnits.IsSelected = false;
                    this.btnSelectSpells.IsSelected = true;
                    this.btnSelectBuildings.IsSelected = false;

                    this.frmUnits.W = (Math.max(System.Linq.Enumerable.from(this.cSpells.Children, MonoInterface.Block).last().Right, this.btnSelectBuildings.Right) + 5) | 0;
                }), 110, -5, 100, 30, 0.0, 1.0, true));

                this.btnSelectSpells.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0417\u0430\u043a\u043b\u0438\u043d\u0430\u043d\u0438\u044f", 16, Microsoft.Xna.Framework.Color.Black.$clone()));

                this.btnSelectBuildings = this.frmUnits.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.bind(this, function (btn, is_touch) {
                    this.cUnits.Visible = false;
                    this.cSpells.Visible = false;
                    this.cBuildings.Visible = true;
                    this.btnSelectUnits.IsSelected = false;
                    this.btnSelectSpells.IsSelected = false;
                    this.btnSelectBuildings.IsSelected = true;

                    this.frmUnits.W = (Math.max(System.Linq.Enumerable.from(this.cBuildings.Children, MonoInterface.Block).last().Right, this.btnSelectBuildings.Right) + 5) | 0;
                }), 215, -5, 100, 30, 0.0, 1.0, true));
                this.btnSelectBuildings.IsDisabled = true;
                this.btnSelectBuildings.AddChild(MonoInterface.Label, new MonoInterface.Label("\u041f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438", 16, Microsoft.Xna.Framework.Color.Black.$clone()));

                // frmUnits.HideAnimation = New MonoInterface.NumberAnimation(frmUnits, "Y", 0, -82, 50, Nothing, Nothing)


                this.frmProduction = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 130, 355, 55, 0.0, 0.0, false), $t.LeftBorder = false, $t.ShowAnimation = new MonoInterface.NumberAnimation("X", -355, 0, 50), $t.HideAnimation = new MonoInterface.NumberAnimation("X", 0, -355, -50), $t));

                for (var i = 0; i <= 6; i = (i + 1) | 0) {
                    this.btnsProduction[i] = this.frmProduction.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor2(Bridge.fn.cacheBind(this, this.btnProduction_Clicked), Bridge.fn.cacheBind(this, this.btnProduction_Focused), ((5 + Bridge.Int.mul(i, 50)) | 0), 5, 45, 45, 0.0, 0.0, true));
                    this.btnsProduction[i].AddChild(MonoInterface.Picture, new MonoInterface.Picture(this.defaultTheme.EmptyTexture.$clone(), 0, 0, 45, 45, 0.5, 0.5, true));
                    this.btnsProduction[i].AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 19), 0, 0, 20, 16, 1.0, 1.0, true));

                    this.btnsProduction[i].AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.cacheBind(this, this.btnProductionRemove_Clicked), 0, 0, 16, 16, 1.0, 0.0, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 20), 0, 0, 20, 16, 1.0, 0.0, true));

                    this.prgsProduction[i] = this.btnsProduction[i].AddChild(MonoInterface.Progress, new MonoInterface.Progress(0, 0, 0, 0, 45, 45, 0));
                }
                // ' Ð¤ÑÐµÐ¹Ð¼ Ð³Ð»Ð°Ð²Ð½Ð¾Ð³Ð¾ Ð¼ÐµÐ½Ñ

                this.frmMainMenu = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 74, 74, 0.0, 0.0, false), $t.LeftBorder = false, $t.TopBorder = false, $t));
                this.frmMainMenu.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.cacheBind(this, this.battleFrmMainMenu), 5, 0, 64, 64, 0.0, 0.5, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("big_icons"), 1)));

                // ' Ð¤ÑÐµÐ¹Ð¼ ÑÐµÑÑÑÑÐ¾Ð² 
                this.frmResources = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 250, 70, 1.0, 0.0, false), $t.RightBorder = false, $t.TopBorder = false, $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -82, 0, 20), $t));
                this.btnTierUpFrmResources = this.frmResources.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor1(Bridge.fn.cacheBind(this, this.tierUpFrmResources_Clicked), Bridge.fn.cacheBind(this, this.tierUpFrmResources_Focused), Microsoft.Xna.Framework.Input.Keys.Enter, 5, 0, 60, 60, 0.0, 0.5, true));
                this.pctTierFrmResources = this.btnTierUpFrmResources.AddChild(MonoInterface.Picture, new MonoInterface.Picture(DarkKingdomCore.MyGame.unitPrms.getItem("Tier_2").$clone().iconApp.$clone(), 0, 0, 60, 60, 0.5, 0.5, true));

                this.frmResources.AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 12), -72, -17, 40, 32, 1.0, 0.5, true));
                this.frmResources.AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 13), -72, 15, 40, 32, 1.0, 0.5, true));

                this.lblGoldFrmResources = this.frmResources.AddChild(MonoInterface.Label, new MonoInterface.Label("", 20, this.moneyClr.$clone(), -115, -10, 1.0, 0.5, true));
                this.lblDeathFrmResources = this.frmResources.AddChild(MonoInterface.Label, new MonoInterface.Label("", 20, this.deathClr.$clone(), -115, 20, 1.0, 0.5, true));


                this.pctPauseFrmResources = this.frmResources.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.pauseFrmResources_Clicked), Microsoft.Xna.Framework.Input.Keys.Escape, -5, 0, 60, 60, 1.0, 0.5, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("medium_icons"), 1), 0, 0, 60, 60, 0.5, 0.5, true));


                this.frmRightMenu = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 74, 74, 1.0, 0.0, false), $t.RightBorder = false, $t.TopBorder = false, $t));
                this.frmRightMenu.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.exitFrmMenuExit_Clicked), Microsoft.Xna.Framework.Input.Keys.Escape, 5, 0, 64, 64, 0.0, 0.5, true)).AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("medium_icons"), 0), 0, 0, 64, 64, 0.5, 0.5, true));

                // ' Ð¤ÑÐµÐ¹Ð¼ ÑÑÐ°ÑÑÐ° Ð±Ð¸ÑÐ²Ñ
                this.frmBattle = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 450, 330, 0.5, 0.5, false), $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -300, 0, 50), $t.HideAnimation = new MonoInterface.NumberAnimation("Y", 0, 300, 50), $t));
                this.frmBattle.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0411\u0438\u0442\u0432\u0430", 30, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 7, 0.5, 0.0, true));
                this.frmBattle.AddChild(MonoInterface.Label, new MonoInterface.Label("VS", 20, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 55, 0.5, 0.0, true));


                var ps1 = System.Array.init(((((this.races1.Count - 1) | 0) + 1) | 0), function (){
                    return new MonoInterface.Appearance();
                }, MonoInterface.Appearance);
                var ts1 = System.Array.init(((((this.races1.Count - 1) | 0) + 1) | 0), null, System.String);
                var ds1 = System.Array.init(((((this.races1.Count - 1) | 0) + 1) | 0), null, System.String);
                for (var i1 = 0; i1 < this.races1.Count; i1 = (i1 + 1) | 0) {
                    ps1[i1] = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("race_icons"), DarkKingdomCore.RaceManager.Instance.All.getItem(this.races1.getItem(i1)).symb);
                    ts1[i1] = DarkKingdomCore.RaceManager.Instance.All.getItem(this.races1.getItem(i1)).name;
                    ds1[i1] = DarkKingdomCore.RaceManager.Instance.All.getItem(this.races1.getItem(i1)).desc;
                }

                var ps2 = System.Array.init(((((this.races2.Count - 1) | 0) + 1) | 0), function (){
                    return new MonoInterface.Appearance();
                }, MonoInterface.Appearance);
                var ts2 = System.Array.init(((((this.races2.Count - 1) | 0) + 1) | 0), null, System.String);
                var ds2 = System.Array.init(((((this.races2.Count - 1) | 0) + 1) | 0), null, System.String);

                for (var i2 = 0; i2 < this.races2.Count; i2 = (i2 + 1) | 0) {
                    ps2[i2] = new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("race_icons"), DarkKingdomCore.RaceManager.Instance.All.getItem(this.races2.getItem(i2)).symb);
                    ts2[i2] = DarkKingdomCore.RaceManager.Instance.All.getItem(this.races2.getItem(i2)).name;
                    ds2[i2] = DarkKingdomCore.RaceManager.Instance.All.getItem(this.races2.getItem(i2)).desc;
                }

                this.races1SwitcherFrmBattle = this.frmBattle.AddChild(MonoInterface.Switcher, new MonoInterface.Switcher(ps1, ts1, ds1, 0, this.mainAnimator, -100, 60, 150, 100, 0.5, 0.0, true));
                this.races2SwitcherFrmBattle = this.frmBattle.AddChild(MonoInterface.Switcher, new MonoInterface.Switcher(ps2, ts2, ds2, 0, this.mainAnimator, 100, 60, 150, 100, 0.5, 0.0, true));

                var gameTypes = System.Array.init(["RandomGT", "StandartGT", "OffenceGT", "DefenceGT", "FirstHeroGT"], System.String);
                var gts = System.Array.init(gameTypes.length, null, System.String);
                var gdts = System.Array.init(gameTypes.length, null, System.String);
                for (var i3 = 0; i3 < gameTypes.length; i3 = (i3 + 1) | 0) {
                    gts[i3] = gameTypes[i3];
                    gdts[i3] = (gameTypes[i3] || "") + "Desc";
                }

                this.modeSwitcherFrmBattle = this.frmBattle.AddChild(MonoInterface.Switcher, new MonoInterface.Switcher(null, gts, gdts, 0, this.mainAnimator, 0, 170, 350, 100, 0.5, 0.0, true));
                this.frmBattle.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.btnStartBattle), Microsoft.Xna.Framework.Input.Keys.Enter, 0, -10, 150, 45, 0.5, 1.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u0412\u043f\u0435\u0440\u0435\u0434", 20, Microsoft.Xna.Framework.Color.Black.$clone()));


                // 'Ð¤ÑÐµÐ¹Ð¼ Ð·Ð°ÑÐµÐ¼Ð½ÐµÐ½Ð¸Ñ 
                this.frmBack = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, -1, -1, 0.5, 0.5, false), $t.ShowAnimation = new MonoInterface.NumberAnimation("Alpha", 0, 1, 0.05), $t.HideAnimation = new MonoInterface.NumberAnimation("Alpha", 1, 0, -0.05), $t));


                // ' Ð¤ÑÐµÐ¹Ð¼ Ð½Ð°ÑÑÑÐ¾ÐµÐº
                this.frmSettings = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 350, 200, 0.5, 0.5, false), $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -300, 0, 50, Bridge.fn.bind(this, function () {
                    this.frmBack.Show(this.mainAnimator);
                })), $t.HideAnimation = new MonoInterface.NumberAnimation("Y", 0, 300, 50, Bridge.fn.bind(this, function () {
                    this.frmBack.Hide(this.mainAnimator);
                })), $t));
                this.frmSettings.AddChild(MonoInterface.Label, new MonoInterface.Label("\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438", 30, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 7, 0.5, 0.0, true));


                this.CreateScreenFormats();

                var sModes = System.Array.init(this.screenFormats.Count, null, System.String);
                for (var i4 = 0; i4 < this.screenFormats.Count; i4 = (i4 + 1) | 0) {
                    sModes[i4] = System.String.format("{0} x {1} : {2}", this.screenFormats.getItem(i4).$clone().X, this.screenFormats.getItem(i4).$clone().Y, this.screenFormats.getItem(i4).$clone().Z);
                }

                this.resSwitcherFrmSettings = this.frmSettings.AddChild(MonoInterface.Switcher, new MonoInterface.Switcher(null, sModes, null, 0, this.mainAnimator, 0, 40, 300, 100, 0.5, 0.0, true));

                this.frmSettings.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.backFrmSettings), Microsoft.Xna.Framework.Input.Keys.Escape, 10, -10, 150, 45, 0.0, 1.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041d\u0430\u0437\u0430\u0434", 20, Microsoft.Xna.Framework.Color.Black.$clone()));
                this.frmSettings.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.applyFrmSettings), Microsoft.Xna.Framework.Input.Keys.Enter, -10, -10, 150, 45, 1.0, 1.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c", 20, Microsoft.Xna.Framework.Color.Black.$clone()));

                // ' Ð¤ÑÐµÐ¹Ð¼ Ð¿Ð¾Ð³Ð¾ÑÐ¾Ð²ÐºÐ¸ Ðº Ð±Ð¾Ñ
                this.frmPreGame = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 500, 400, 0.5, 0.5, false), $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -300, 0, 50, Bridge.fn.bind(this, function () {
                    this.frmBack.Show(this.mainAnimator);
                })), $t.HideAnimation = new MonoInterface.NumberAnimation("Y", 0, 300, 50, Bridge.fn.bind(this, function () {
                    this.frmBack.Hide(this.mainAnimator);
                })), $t));

                this.lblVsPreGame = this.frmPreGame.AddChild(MonoInterface.Label, new MonoInterface.Label("", 20, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 7, 0.5, 0.0, true));

                this.btnUnitsPreGame = this.frmPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.bind(this, function (btn, isTouch) {
                    this.cUnitsPreGame.Visible = true;
                    this.cSpellsPreGame.Visible = false;
                    this.cBuildingsPreGame.Visible = false;
                    this.btnUnitsPreGame.IsSelected = true;
                    this.btnSpellsPreGame.IsSelected = false;
                    this.btnBuildingsPreGame.IsSelected = false;
                }), -160, 60, 150, 45, 0.5, 0.0, true));
                this.btnUnitsPreGame.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0430", 20, Microsoft.Xna.Framework.Color.Black.$clone()));

                this.btnSpellsPreGame = this.frmPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.bind(this, function (btn, isTouch) {
                    this.cUnitsPreGame.Visible = false;


                    this.cSpellsPreGame.Visible = true;

                    this.cBuildingsPreGame.Visible = false;
                    this.btnUnitsPreGame.IsSelected = false;
                    this.btnSpellsPreGame.IsSelected = true;
                    this.btnBuildingsPreGame.IsSelected = false;
                }), 0, 60, 150, 45, 0.5, 0.0, true));
                this.btnSpellsPreGame.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0417\u0430\u043a\u043b\u0438\u043d\u0430\u043d\u0438\u044f", 20, Microsoft.Xna.Framework.Color.Black.$clone()));

                this.btnBuildingsPreGame = this.frmPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.bind(this, function (btn, isTouch) {
                    this.cUnitsPreGame.Visible = false;
                    this.cSpellsPreGame.Visible = false;
                    this.cBuildingsPreGame.Visible = true;
                    this.btnUnitsPreGame.IsSelected = false;
                    this.btnSpellsPreGame.IsSelected = false;
                    this.btnBuildingsPreGame.IsSelected = true;
                }), 160, 60, 150, 45, 0.5, 0.0, true));
                this.btnBuildingsPreGame.AddChild(MonoInterface.Label, new MonoInterface.Label("\u041f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438", 20, Microsoft.Xna.Framework.Color.Black.$clone()));


                this.cUnitsPreGame = this.frmPreGame.AddChild(MonoInterface.Grid, new MonoInterface.Grid(MonoInterface.Grid.Orientations.LeftToRight, -2, 120, 500, 100, 0.5, 0.0, false));
                this.cSpellsPreGame = this.frmPreGame.AddChild(MonoInterface.Grid, new MonoInterface.Grid(MonoInterface.Grid.Orientations.LeftToRight, -2, 120, 500, 100, 0.5, 0.0, false));
                this.cBuildingsPreGame = this.frmPreGame.AddChild(MonoInterface.Grid, new MonoInterface.Grid(MonoInterface.Grid.Orientations.LeftToRight, -2, 120, 500, 100, 0.5, 0.0, false));

                this.cSelectedPreGame = this.frmPreGame.AddChild(MonoInterface.Grid, new MonoInterface.Grid(MonoInterface.Grid.Orientations.LeftToRight, -2, -50, 500, 100, 0.5, 1.0, true));

                this.frmPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.backPreGame_Clicked), Microsoft.Xna.Framework.Input.Keys.Escape, 15, -10, 150, 45, 0.0, 1.0)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041d\u0430\u0437\u0430\u0434", 20, Microsoft.Xna.Framework.Color.Black.$clone()));
                this.frmPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.cacheBind(this, this.clearPreGame_Clicked), 0, -10, 150, 45, 0.5, 1.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u044c", 20, Microsoft.Xna.Framework.Color.Black.$clone()));
                this.btnFightPreGame = this.frmPreGame.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.fightPreGame_Clicked), Microsoft.Xna.Framework.Input.Keys.Enter, -15, -10, 150, 45, 1.0, 1.0));
                this.btnFightPreGame.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0412 \u0431\u043e\u0439!", 20, Microsoft.Xna.Framework.Color.Black.$clone()));


                // Ð¤ÑÐµÐ¹Ð¼ Ð¿Ð¾Ð´ÑÐºÐ°Ð·ÐºÐ¸
                this.frmHelp = this.MainContainer.AddChild(MonoInterface.Frame, new MonoInterface.Frame(0, 0, 250, 0, 0.0, 0.0));

                // ÐÐ°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº, Ð·Ð½Ð°ÑÐ¾Ðº Ð¸ Ð¿Ð¾Ð´Ð·Ð°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº
                this.lblUnitNameHelpUnit = this.frmHelp.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0422\u0438\u0433\u0440", 14, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 0, 0.0, 0.0, true));
                this.lblRaceHelpUnit = this.frmHelp.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0422\u0438\u0433\u0440", 12, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 23, 0.0, 0.0, true));

                // Ð¡ÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ
                this.lblCostMoneyHelpUnit = this.frmHelp.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0422\u0438\u0433\u0440", 12, Microsoft.Xna.Framework.Color.Black.$clone(), 20, 43, 0.0, 0.0, true));
                this.lblCostDeathHelpUnit = this.frmHelp.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0422\u0438\u0433\u0440", 12, Microsoft.Xna.Framework.Color.Black.$clone(), 70, 43, 0.0, 0.0, true));
                this.frmHelp.AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 12), 0, 42, 0, 0, 0.0, 0.0, true));
                this.frmHelp.AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 13), 50, 42, 0, 0, 0.0, 0.0, true));

                this.cBattleParameters = this.frmHelp.AddChild(MonoInterface.Container, new MonoInterface.Container(0, 65, 250, 60, 0.0, 0.0, true));
                this.lblAttackBasicParams = this.cBattleParameters.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0422\u0438\u0433\u0440", 12, Microsoft.Xna.Framework.Color.Black.$clone(), 20, 0, 0.0, 0.0, true));
                this.pctAttackBasicParams = this.cBattleParameters.AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), 1), 0, 0, 0, 0, 0.0, 0.0, true));
                for (var i5 = 0; i5 <= 2; i5 = (i5 + 1) | 0) {
                    this.lblsBasicParams[i5] = this.cBattleParameters.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0422\u0438\u0433\u0440", 12, Microsoft.Xna.Framework.Color.Black.$clone(), ((20 + Bridge.Int.mul(100, (i5 % 2))) | 0), ((22 + Bridge.Int.mul((((Bridge.Int.div(i5, 2)) | 0)), 22)) | 0), 0.0, 0.0, true));
                    this.cBattleParameters.AddChild(MonoInterface.Picture, new MonoInterface.Picture(new MonoInterface.Appearance.$ctor1(DarkKingdomCore.MyGame.sprites.getItem("small_icons"), ((i5 + 3) | 0)), Bridge.Int.mul(100, (i5 % 2)), ((22 + Bridge.Int.mul((((Bridge.Int.div(i5, 2)) | 0)), 22)) | 0), 0, 0, 0.0, 0.0, true));
                }

                for (var i6 = 0; i6 <= 5; i6 = (i6 + 1) | 0) {
                    this.lblsAbils[i6] = this.frmHelp.AddChild(MonoInterface.LongLabel, new MonoInterface.LongLabel("\u0422\u0438\u0433\u0440", 10, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 140, 250, 0.0, 0.0, true));
                }


                // ' Ð¤ÑÐµÐ¹Ð¼ Ð±Ð¾ÐµÐ²Ð¾Ð³Ð¾ Ð¼ÐµÐ½Ñ
                this.frmBattleMenu = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 270, 310, 0.5, 0.5, false), $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -300, 0, 50, Bridge.fn.bind(this, function () {
                    if (this.frmBack.Visible) {
                        this.mainAnimator.Animations.remove(this.frmBack.HideAnimation);
                    } else {
                        this.frmBack.Show(this.mainAnimator);
                    }
                })), $t.HideAnimation = new MonoInterface.NumberAnimation("Y", 0, 300, 50, Bridge.fn.bind(this, function () {
                    this.frmBack.Hide(this.mainAnimator);
                })), $t));
                this.frmBattleMenu.AddChild(MonoInterface.Label, new MonoInterface.Label("\u041f\u0430\u0443\u0437\u0430", 30, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 7, 0.5, 0.0, true));

                this.frmBattleMenu.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.cacheBind(this, this.surrenderFrmBattleMenu_Clicked), 0, 60, 250, 45, 0.5, 0.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u0421\u0434\u0430\u0442\u044c\u0441\u044f", 20, Microsoft.Xna.Framework.Color.Black.$clone()));
                this.frmBattleMenu.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.cacheBind(this, this.restartFrmBattleMenu_Clicked), 0, 120, 250, 45, 0.5, 0.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c", 20, Microsoft.Xna.Framework.Color.Black.$clone()));
                this.lblAIFrmBattleMenu = this.frmBattleMenu.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.cacheBind(this, this.AIFrmBattleMenu_Clicked), 0, 180, 250, 45, 0.5, 0.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043d\u0430 \u0418\u0418", 20, Microsoft.Xna.Framework.Color.Black.$clone()));
                this.frmBattleMenu.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.backFrmBattleMenu_Clicked), Microsoft.Xna.Framework.Input.Keys.Escape, 0, 250, 225, 45, 0.5, 0.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041d\u0430\u0437\u0430\u0434 \u0432 \u0438\u0433\u0440\u0443", 20, Microsoft.Xna.Framework.Color.Black.$clone()));

                // ' Ð¤ÑÐµÐ¹Ð¼ Ð´Ð¸Ð°Ð»Ð¾Ð³Ð° Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð¸Ñ Ð±Ð¾Ñ
                this.frmDialog = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 375, 180, 0.5, 0.5, false), $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -300, 0, 50, Bridge.fn.bind(this, function () {
                    if (this.frmBack.Visible) {
                        this.mainAnimator.Animations.remove(this.frmBack.HideAnimation);
                    } else {
                        this.frmBack.Show(this.mainAnimator);
                    }
                })), $t.HideAnimation = new MonoInterface.NumberAnimation("Y", 0, 300, 50, Bridge.fn.bind(this, function () {
                    this.frmBack.Hide(this.mainAnimator);
                })), $t));
                this.lblTitlefrmDialog = this.frmDialog.AddChild(MonoInterface.Label, new MonoInterface.Label("", 30, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 7, 0.5, 0.0, true));

                this.lblLine1FrmDialog = this.frmDialog.AddChild(MonoInterface.Label, new MonoInterface.Label("", 20, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 50, 0.5, 0.0, true));
                this.lblLine2FrmDialog = this.frmDialog.AddChild(MonoInterface.Label, new MonoInterface.Label("", 20, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 70, 0.5, 0.0, true));

                this.frmDialog.AddChild(MonoInterface.Button, new MonoInterface.Button.$ctor3(Bridge.fn.cacheBind(this, this.okayFrmDialog_Clicked), 0, -15, 150, 45, 0.5, 1.0, true)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u0412 \u043c\u0435\u043d\u044e", 20, Microsoft.Xna.Framework.Color.Black.$clone()));

                // ' Ð¤ÑÐµÐ¹Ð¼ Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ¶Ð´ÐµÐ½Ð¸Ñ
                this.frmConfirm = this.MainContainer.AddChild(MonoInterface.Frame, ($t = new MonoInterface.Frame(0, 0, 375, 150, 0.5, 0.5, false), $t.ShowAnimation = new MonoInterface.NumberAnimation("Y", -300, 0, 50, Bridge.fn.bind(this, function () {
                    if (this.frmBack.Visible) {
                        this.mainAnimator.Animations.remove(this.frmBack.HideAnimation);
                    } else {
                        this.frmBack.Show(this.mainAnimator);
                    }
                })), $t.HideAnimation = new MonoInterface.NumberAnimation("Y", 0, 300, 50, Bridge.fn.bind(this, function () {
                    this.frmBack.Hide(this.mainAnimator);
                })), $t));
                this.frmConfirm.AddChild(MonoInterface.Label, new MonoInterface.Label("\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b", 30, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 7, 0.5, 0.0, true));


                this.lblTextFrmConfirm = this.frmConfirm.AddChild(MonoInterface.Label, new MonoInterface.Label("", 20, Microsoft.Xna.Framework.Color.Black.$clone(), 0, 50, 0.5, 0.0, true));

                this.frmConfirm.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.bind(this, function (btn, isTouch) {
                    this.frmConfirm.Hide(this.mainAnimator);
                    this.taskConfirm != null ? this.taskConfirm.setResult(true) : null;
                }), Microsoft.Xna.Framework.Input.Keys.Enter, 15, -10, 150, 45, 0.0, 1.0)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u0414\u0430", 20, Microsoft.Xna.Framework.Color.Black.$clone()));

                this.frmConfirm.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.bind(this, function (btn, isTouch) {
                    this.frmConfirm.Hide(this.mainAnimator);
                    this.taskConfirm != null ? this.taskConfirm.setResult(false) : null;
                }), Microsoft.Xna.Framework.Input.Keys.Escape, -15, -10, 150, 45, 1.0, 1.0)).AddChild(MonoInterface.Label, new MonoInterface.Label("\u041d\u0435\u0442", 20, Microsoft.Xna.Framework.Color.Black.$clone()));

                this.MainContainer.ApplyTheme(this.defaultTheme);
                this.MainContainer.ApplyLocalization(this.localize);
                this.frmBack.ApplyTheme(this.backTheme);
            },
            backPreGame_Clicked: function (btn, isTouch) {
                DarkKingdomCore.MyGame.gState = DarkKingdomCore.GameState.MainMenu;
                this.StartBattle();
            },
            clearPreGame_Clicked: function (btn, isTouch) {
                this.preGameUnits.clear();
                this.preGameSpells.clear();
                this.preGameBonus.clear();
                this.SetPreGameLists();
            },
            fightPreGame_Clicked: function (btn, isTouch) {
                this.frmPreGame.Hide(this.mainAnimator);
                this.StartPlaying();
            },
            backFrmSettings: function (btn, isTouch) {
                this.frmSettings.Hide(this.mainAnimator);
            },
            applyFrmSettings: function (btn, isTouch) {
                this.frmSettings.Hide(this.mainAnimator);
                var uiScale = this.screenFormats.getItem(this.resSwitcherFrmSettings.Current).$clone().X / 800.0;
                if (uiScale <= 1.25) {
                    uiScale = 1.0;
                } else {
                    if (uiScale > 1.25 && uiScale <= 1.75) {
                        uiScale = 1.5;
                    } else {
                        uiScale = 2.0;
                    }
                }
                this.Resize(Bridge.Int.clip32(this.screenFormats.getItem(this.resSwitcherFrmSettings.Current).$clone().X), Bridge.Int.clip32(this.screenFormats.getItem(this.resSwitcherFrmSettings.Current).$clone().Y), this.resSwitcherFrmSettings.Current === 2, uiScale);
            },
            CreateScreenFormats: function () {
                // = {New Vector2(800, 480), New Vector2(1366, 768), New Vector2(1920, 1080)}
                this.screenFormats = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector3)).ctor();
                // For Each format In GraphicsAdapter.DefaultAdapter.SupportedDisplayModes
                // screenFormats.Add(New Vector3(format.Width, format.Height, format.RefreshRate))
                // Next
                this.screenFormats.AddRange(System.Array.init([new Microsoft.Xna.Framework.Vector3.$ctor3(800, 480, 60), new Microsoft.Xna.Framework.Vector3.$ctor3(1366, 768, 60), new Microsoft.Xna.Framework.Vector3.$ctor3(1920, 1080, 60)], Microsoft.Xna.Framework.Vector3));
            },
            GetUnitParametersFromID: function (id) {
                var $t;
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                try {
                    while ($t.moveNext()) {
                        var up = $t.Current.$clone();
                        if (up.id === id) {
                            return up.$clone();
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return null;
            },
            OnUnitsAbils: function (u) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21;
                $t = Bridge.getEnumerator(u.abils.Values);
                try {
                    while ($t.moveNext()) {
                        var abil = $t.Current;
                        if (abil.condCompleted && !abil.used) {
                            if (Bridge.referenceEquals(abil.name, "Rush")) {
                                ($t1 = DarkKingdomCore.MyGame.plrs[u.owner]).rushBonus = ($t1.rushBonus + abil.value) | 0;
                                abil.used = true;
                            } else if (Bridge.referenceEquals(abil.name, "Kill_flyer")) {
                                var uu = this.FindRandomFlyUnit(((1 - u.owner) | 0), 500);
                                if (uu != null) {
                                    this.Kill(uu);
                                    this.ShowInfoPar("\u0423\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d", DarkKingdomCore.MyGame.badAbilClr.$clone(), uu.x, ((DarkKingdomCore.MyGame.hor + uu.parameters.rect.Top) | 0), true);
                                }
                                abil.used = true;
                            } else if (Bridge.referenceEquals(abil.name, "Magic_bonus")) {
                                ($t2 = DarkKingdomCore.MyGame.plrs[u.owner]).magicIncBonus = ($t2.magicIncBonus + abil.value) | 0;
                            } else if (Bridge.referenceEquals(abil.name, "Poison_bonus")) {
                                ($t3 = DarkKingdomCore.MyGame.plrs[u.owner]).poisonBonus = ($t3.poisonBonus + abil.value) | 0;
                            } else if (Bridge.referenceEquals(abil.name, "Stealing")) {
                                ($t4 = DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)]).moneyIncBonus = ($t4.moneyIncBonus - 10) | 0;
                                ($t5 = DarkKingdomCore.MyGame.plrs[u.owner]).moneyIncBonus = ($t5.moneyIncBonus + 10) | 0;
                            } else if (Bridge.referenceEquals(abil.name, "Chaos")) {
                                if (!u.AbsContains("Chaos helper")) {
                                    var avunits = new (System.Collections.Generic.List$1(System.String)).ctor();
                                    $t6 = Bridge.getEnumerator(DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].unitsList);
                                    try {
                                        while ($t6.moveNext()) {
                                            var uu1 = $t6.Current;
                                            if (!DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].banned.contains(uu1)) {
                                                avunits.add(uu1);
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t6, System.IDisposable)) {
                                            $t6.System$IDisposable$Dispose();
                                        }
                                    }
                                    if (avunits.Count > 0) {
                                        u.AddAbility(new DarkKingdomCore.Ability("Chaos helper", DarkKingdomCore.MyGame.unitPrms.getItem(avunits.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits.Count))).$clone().id, "", 0, DarkKingdomCore.EffectType.Normal, false));
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Chaos helper")) {
                                var unit_parameters = this.GetUnitParametersFromID(abil.value);
                                if (System.Nullable.hasValue(unit_parameters)) {
                                    DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].banned.add(System.Nullable.getValue(unit_parameters).Name);
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Publican")) {
                                ($t7 = DarkKingdomCore.MyGame.plrs[u.owner]).moneyIncBonus = ($t7.moneyIncBonus + Bridge.Int.mul(5, DarkKingdomCore.MyGame.plrs[u.owner].unitCount)) | 0;
                            } else if (Bridge.referenceEquals(abil.name, "Block prod")) {
                                DarkKingdomCore.MyGame.plrs[0].prdSpd = 0;
                                DarkKingdomCore.MyGame.plrs[1].prdSpd = 0;
                            } else if (Bridge.referenceEquals(abil.name, "Ignore_units")) {
                                u.parameters.isIgnoreUnits = true;
                            } else if (Bridge.referenceEquals(abil.name, "Takeoff")) {
                                if (u.parameters.moveType === DarkKingdomCore.UnitMoveType.GroundMT) {
                                    u.takedOff = true;
                                }
                                u.abils.getItem("Takeoff").used = true;
                            } else if (Bridge.referenceEquals(abil.name, "Landing")) {
                                if (u.parameters.moveType === DarkKingdomCore.UnitMoveType.FlyingMT) {
                                    u.landing = true;
                                }
                                u.abils.getItem("Landing").used = true;
                            } else if (Bridge.referenceEquals(abil.name, "Elite_archer")) {
                                $t8 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t8.moveNext()) {
                                        var uu2 = $t8.Current;
                                        if (!Bridge.referenceEquals(u, uu2)) {
                                            if (uu2.owner === u.owner) {
                                                if (uu2.parameters.Attack.Range > 1) {
                                                    ($t9 = uu2.atkMod.$clone()).Range = ($t9.Range + 1) | 0;
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t8, System.IDisposable)) {
                                        $t8.System$IDisposable$Dispose();
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Kill all")) {
                                $t10 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t10.moveNext()) {
                                        var uu3 = $t10.Current;
                                        if (!uu3.parameters.isBuilding) {
                                            this.Kill(uu3);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t10, System.IDisposable)) {
                                        $t10.System$IDisposable$Dispose();
                                    }
                                }
                                this.globalExplode = 255;
                            } else if (Bridge.referenceEquals(abil.name, "Big_boom")) {
                                $t11 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t11.moveNext()) {
                                        var uu4 = $t11.Current;
                                        this.Harm(uu4, DarkKingdomCore.MyGame.rnd.Next$2(1000, 2000), false, DarkKingdomCore.EffectType.Normal);
                                        this.Poison(uu4);
                                    }
                                } finally {
                                    if (Bridge.is($t11, System.IDisposable)) {
                                        $t11.System$IDisposable$Dispose();
                                    }
                                }
                                this.globalExplode = 255;
                            } else if (Bridge.referenceEquals(abil.name, "Range_bonus")) {
                                ($t12 = u.atkMod.$clone()).Range = ($t12.Range + abil.value) | 0;
                            } else if (Bridge.referenceEquals(abil.name, "Prod_boost")) {
                                DarkKingdomCore.MyGame.plrs[u.owner].prdSpd *= (1 + abil.value / 100);
                            } else if (Bridge.referenceEquals(abil.name, "Time_control")) {
                                $t13 = Bridge.getEnumerator(DarkKingdomCore.MyGame.plrs);
                                try {
                                    while ($t13.moveNext()) {
                                        var p = $t13.Current;
                                        p.prdSpd /= 2;
                                    }
                                } finally {
                                    if (Bridge.is($t13, System.IDisposable)) {
                                        $t13.System$IDisposable$Dispose();
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Centaur_prod_boost")) {
                                $t14 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t14.moveNext()) {
                                        var uu5 = $t14.Current;
                                        if (uu5.owner === u.owner && ((uu5.owner === 0 && uu5.x >= ((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0)) || (uu5.owner === 1 && uu5.x <= ((Bridge.Int.div(DarkKingdomCore.MyGame.gameWidth, 2)) | 0)))) {
                                            DarkKingdomCore.MyGame.plrs[u.owner].prdSpd *= (1 + abil.value / 100);
                                            break;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t14, System.IDisposable)) {
                                        $t14.System$IDisposable$Dispose();
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Slow_production")) {
                                DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].prdSpd /= 1.5;
                            } else if (Bridge.referenceEquals(abil.name, "Recharge")) {
                                $t15 = Bridge.getEnumerator(u.abils.Values);
                                try {
                                    while ($t15.moveNext()) {
                                        var aa = $t15.Current;
                                        if (aa.used === true) {
                                            aa.used = false;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t15, System.IDisposable)) {
                                        $t15.System$IDisposable$Dispose();
                                    }
                                }
                                this.ShowInfoPar("\u041f\u0435\u0440\u0435\u0437\u0430\u0440\u044f\u0434\u043a\u0430!", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                u.abils.getItem("Recharge").used = true;
                            } else if (Bridge.referenceEquals(abil.name, "Lycanthropy")) {
                                var new_unit_parameters = this.GetUnitParametersFromID(abil.value);
                                if (System.Nullable.hasValue(new_unit_parameters)) {
                                    var oldmaxhp = u.parameters.maxhp;
                                    var oldname = u.parameters.Name;
                                    u.SetParams(System.Nullable.getValue(new_unit_parameters).$clone(), false);
                                    u.hp *= (Bridge.Int.div(u.parameters.maxhp, oldmaxhp)) | 0;
                                    this.ShowInfoPar("\u041b\u0438\u043a\u0430\u043d\u0442\u0440\u043e\u043f\u0438\u044f", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                } else {
                                    this.ShowInfoPar(System.String.format("Wrong unit id - {0}", [abil.value]), DarkKingdomCore.MyGame.badAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Invulnerable")) {
                                if (Bridge.referenceEquals(u.shownAbil, "")) {
                                    u.shownAbil = "Invulnerable";
                                    u.shownAbilMaxVal = abil.value;
                                }
                                abil.value = (abil.value - 1) | 0;
                                if (abil.value === 0) {
                                    u.abils.getItem("Invulnerable").used = true;
                                    u.shownAbil = "";
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Poison_around")) {
                                $t16 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t16.moveNext()) {
                                        var uu6 = $t16.Current;
                                        if (!Bridge.referenceEquals(uu6, u) && u.Near(uu6)) {
                                            this.Poison(uu6);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t16, System.IDisposable)) {
                                        $t16.System$IDisposable$Dispose();
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Generate")) {
                                var new_unit_parameters1 = this.GetUnitParametersFromID(abil.value);
                                if (System.Nullable.hasValue(new_unit_parameters1)) {
                                    this.bornList.add(new DarkKingdomCore.Unit(this, u.x, u.moveside, u.owner, System.Nullable.getValue(new_unit_parameters1).$clone()));
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Generate enemy")) {
                                var unit_parameters1 = this.GetUnitParametersFromID(abil.value);
                                if (System.Nullable.hasValue(unit_parameters1)) {
                                    this.bornList.add(new DarkKingdomCore.Unit(this, u.x, DarkKingdomCore.MyGame.plrs[((1 - u.owner) | 0)].moveside, ((1 - u.owner) | 0), System.Nullable.getValue(unit_parameters1).$clone()));
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Summon_ihor")) {
                                this.bornList.add(new DarkKingdomCore.Unit(this, u.x, u.moveside, u.owner, DarkKingdomCore.MyGame.unitPrms.getItem("Ihor").$clone()));
                                this.bornList.add(new DarkKingdomCore.Unit(this, u.x - Bridge.Int.mul(u.moveside, this.us2), u.moveside, u.owner, DarkKingdomCore.MyGame.unitPrms.getItem("Ihor").$clone()));
                                this.ShowInfoPar("\u0420\u0430\u0441\u043f\u0430\u0434", DarkKingdomCore.MyGame.goodAbilClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                            } else if (Bridge.referenceEquals(abil.name, "Summon_centaur")) {
                                var avunits1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                $t17 = Bridge.getEnumerator(DarkKingdomCore.MyGame.unitPrms.Values);
                                try {
                                    while ($t17.moveNext()) {
                                        var uu7 = $t17.Current.$clone();
                                        if (Bridge.referenceEquals(uu7.Subrace, "Centaur") && !(Bridge.referenceEquals(uu7.Name, u.parameters.Name))) {
                                            avunits1.add(uu7.Name);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t17, System.IDisposable)) {
                                        $t17.System$IDisposable$Dispose();
                                    }
                                }
                                this.bornList.add(new DarkKingdomCore.Unit(this, u.x + Bridge.Int.mul(2, u.moveside), u.moveside, u.owner, DarkKingdomCore.MyGame.unitPrms.getItem(avunits1.getItem(DarkKingdomCore.MyGame.rnd.Next$1(avunits1.Count))).$clone()));
                                abil.used = true;
                            } else if (Bridge.referenceEquals(abil.name, "Economy")) {
                                ($t18 = DarkKingdomCore.MyGame.plrs[u.owner].res.$clone()).Money = ($t18.Money + ((Bridge.Int.div(u.parameters.Cost.Money, 2)) | 0)) | 0;
                                this.ShowInfoPar(System.String.format("+{0}", [((Bridge.Int.div(u.parameters.Cost.Money, 2)) | 0)]), this.moneyClr.$clone(), u.x, ((DarkKingdomCore.MyGame.hor + u.parameters.rect.Top) | 0), true);
                            } else if (Bridge.referenceEquals(abil.name, "Levitation_around")) {
                                $t19 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t19.moveNext()) {
                                        var uu8 = $t19.Current;
                                        if (uu8.owner !== u.owner && u.Near(uu8) && uu8.parameters.moveType === DarkKingdomCore.UnitMoveType.GroundMT && !uu8.parameters.isBuilding) {
                                            uu8.takedOff = true;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t19, System.IDisposable)) {
                                        $t19.System$IDisposable$Dispose();
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Heal_demons")) {
                                $t20 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t20.moveNext()) {
                                        var uu9 = $t20.Current;
                                        if (!Bridge.referenceEquals(u, uu9) && u.owner === uu9.owner && Bridge.referenceEquals(uu9.parameters.Race, "Demons") && !uu9.parameters.isBuilding) {
                                            this.Heal(uu9, DarkKingdomCore.MyGame.rnd.Next$2(40, 51));
                                            uu9.Attack = DarkKingdomCore.Attack.op_Addition$1(uu9.Attack.$clone(), 3);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t20, System.IDisposable)) {
                                        $t20.System$IDisposable$Dispose();
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Explosive")) {
                                this.Explode(u, u.AbsContains("Mage"));
                            } else if (Bridge.referenceEquals(abil.name, "Invisible")) {
                                $t21 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                                try {
                                    while ($t21.moveNext()) {
                                        var uu10 = $t21.Current;
                                        if (uu10.owner !== u.owner && u.Near(uu10)) {
                                            this.Deinvisible(u);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t21, System.IDisposable)) {
                                        $t21.System$IDisposable$Dispose();
                                    }
                                }
                            } else if (Bridge.referenceEquals(abil.name, "Clear_mind")) {
                                var uu11 = this.FindRandomUnflyUnit(((1 - u.owner) | 0));
                                if (uu11 != null) {
                                    uu11.purified = true;
                                    u.abils.getItem("Clear_mind").used = true;
                                }
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("DarkKingdomCore.ParType", {
        $kind: "enum",
        statics: {
            fields: {
                Point: 0,
                Text: 1,
                Image: 2
            }
        }
    });

    Bridge.define("DarkKingdomCore.Player", {
        fields: {
            id: 0,
            moveside: 0,
            baseX: 0,
            hero: null,
            heroUnit: null,
            res: null,
            race: null,
            AI: false,
            curAIVal: 0,
            maxAIVal: 0,
            uCount: 0,
            startInco: 0,
            magicIncBonus: 0,
            moneyIncBonus: 0,
            ipt: 0,
            resDelay: 0,
            symb: 0,
            unitsList: null,
            spllsList: null,
            bonusList: null,
            readyUnits: null,
            prdQ: null,
            prdPrg: 0,
            prdSpd: 0,
            statDeaths: 0,
            castleFileName: null,
            poisonBonus: 0,
            victimcount: 0,
            banned: null,
            spellsRchrg: null,
            rushBonus: 0,
            game: null,
            aidefencestreak: 0,
            aisupportstreak: 0,
            prodsupport: false
        },
        props: {
            unitCount: {
                get: function () {
                    return this.uCount;
                },
                set: function (value) {
                    this.uCount = value;
                }
            },
            Resources: {
                get: function () {
                    return this.res.$clone();
                },
                set: function (value) {
                    this.res = value.$clone();
                }
            }
        },
        ctors: {
            init: function () {
                this.res = new DarkKingdomCore.TimeCost();
                this.race = "";
                this.resDelay = 450;
                this.unitsList = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.spllsList = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.bonusList = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.readyUnits = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.prdQ = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.statDeaths = 0;
                this.castleFileName = "hqs";
                this.banned = new (System.Collections.Generic.List$1(System.String)).ctor();
            },
            ctor: function (game, i, a, aitick) {
                this.$initialize();
                this.game = game;
                this.id = i;
                this.AI = a;
                this.res.Tier = 1;
                this.curAIVal = aitick;
                this.maxAIVal = aitick;
            }
        },
        methods: {
            Reset: function (cond) {
                if (this.id === 0) {
                    this.Resources = cond.res1.$clone();
                } else {
                    this.Resources = cond.res2.$clone();
                }
                this.res.Tier = cond.res1.Tier;
                this.startInco = cond.income;
                this.ipt = cond.ipt;
                this.unitCount = 0;
                this.prdQ.clear();
                this.readyUnits.clear();
                this.prdPrg = 0;
                this.statDeaths = 0;
                this.resDelay = 450;
                this.victimcount = 0;
                this.banned.clear();
                this.spellsRchrg = new (System.Collections.Generic.List$1(System.Single)).ctor();
                this.rushBonus = 0;
            },
            hasUnit: function (name) {
                var $t;
                $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (u.owner === this.id && Bridge.referenceEquals(u.parameters.Name, name)) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return false;
            },
            CheckForProduce: function (name) {
                return ((this.prdQ.Count + this.readyUnits.Count) | 0) < 7 && this.res.EnoughFor(DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone().Cost.$clone()) && this.CheckForLimit(name) && !this.banned.contains(name);
            },
            CheckForLimit: function (name) {
                var $t, $t1, $t2, $t3, $t4, $t5;
                if (DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone().isHeroic) {
                    var tmp = 0;
                    $t = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t.moveNext()) {
                            var u = $t.Current;
                            if (u.owner === this.id && u.parameters.isHeroic) {
                                tmp = (tmp + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    $t1 = Bridge.getEnumerator(this.prdQ);
                    try {
                        while ($t1.moveNext()) {
                            var u1 = $t1.Current;
                            if (DarkKingdomCore.MyGame.unitPrms.getItem(u1).$clone().isHeroic) {
                                tmp = (tmp + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    $t2 = Bridge.getEnumerator(this.readyUnits);
                    try {
                        while ($t2.moveNext()) {
                            var u2 = $t2.Current;
                            if (Bridge.referenceEquals(u2, name)) {
                                tmp = (tmp + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                    return tmp === 0;
                } else if (DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone().maxLimit === 0) {
                    return true;
                } else {
                    var tmp1 = 0;
                    $t3 = Bridge.getEnumerator(DarkKingdomCore.MyGame.units);
                    try {
                        while ($t3.moveNext()) {
                            var u3 = $t3.Current;
                            if (u3.owner === this.id && Bridge.referenceEquals(u3.parameters.Name, name)) {
                                tmp1 = (tmp1 + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }
                    $t4 = Bridge.getEnumerator(this.prdQ);
                    try {
                        while ($t4.moveNext()) {
                            var u4 = $t4.Current;
                            if (Bridge.referenceEquals(u4, name)) {
                                tmp1 = (tmp1 + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                    $t5 = Bridge.getEnumerator(this.readyUnits);
                    try {
                        while ($t5.moveNext()) {
                            var u5 = $t5.Current;
                            if (Bridge.referenceEquals(u5, name)) {
                                tmp1 = (tmp1 + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }
                    return tmp1 < DarkKingdomCore.MyGame.unitPrms.getItem(name).$clone().maxLimit;
                }
            },
            AITick: function (mc) {
                var $t;
                if (this.res.Death >= 15 && this.res.Tier === 1) {
                    if (this.res.Money >= 150) {
                        mc.TryAddToQueueUnit(this, "Tier_2");
                    } else {
                    }
                } else if (this.res.Death >= 15 && this.res.Tier === 2) {
                    if (this.res.Money >= 150) {
                        mc.TryAddToQueueUnit(this, "Tier_3");
                    } else {
                    }
                } else if (this.unitCount < 13) {
                    if (this.prdQ.Count < 2) {
                        var avunits = new (System.Collections.Generic.List$1(System.String)).ctor();
                        this.prodsupport = false;
                        if (this.unitCount > 0 || this.aidefencestreak > 0) {
                            if (this.aisupportstreak > 0 && this.aisupportstreak < 2 || this.aidefencestreak >= 1) {
                                this.prodsupport = true;
                            }
                        }
                        $t = Bridge.getEnumerator(this.unitsList);
                        try {
                            while ($t.moveNext()) {
                                var u = $t.Current;
                                if (DarkKingdomCore.MyGame.unitPrms.getItem(u).$clone().support === this.prodsupport && this.CheckForProduce(u)) {
                                    avunits.add(u);
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        if (avunits.Count > 0) {
                            mc.TryAddToQueueUnit(this, avunits.getItem(DarkKingdomCore.MyGame.rnd.Next$2(0, avunits.Count)));
                        } else {
                            if (this.unitsList.Count > 0) {
                                mc.TryAddToQueueUnit(this, this.unitsList.getItem(DarkKingdomCore.MyGame.rnd.Next$2(0, this.unitsList.Count)));
                            }
                        }
                    }
                }
            }
        }
    });

    Bridge.define("DarkKingdomCore.Profile", {
        fields: {
            name: null,
            avId: 0,
            units: null,
            difficult: 0,
            racesPlays: null,
            racesWins: null,
            minvictims: 0,
            maxkills: 0,
            achivs: null,
            crystals: 0,
            maxCustomRaces: 0
        },
        ctors: {
            init: function () {
                this.units = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.difficult = 1;
                this.racesPlays = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32)).ctor();
                this.racesWins = new (System.Collections.Generic.Dictionary$2(System.String,System.Int32)).ctor();
                this.achivs = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
            },
            ctor: function (nam, av, d, unts, rPls, rWns, mv, mk, achvs, crst, maxCustomRacs) {
                this.$initialize();
                this.name = nam;
                this.avId = av;
                this.units = unts;
                this.difficult = d;
                this.racesPlays = rPls;
                this.racesWins = rWns;
                this.minvictims = mv;
                this.maxkills = mk;
                this.achivs = achvs;
                this.crystals = crst;
                this.maxCustomRaces = maxCustomRacs;
            }
        }
    });

    Bridge.define("DarkKingdomCore.ProfileManager", {
        statics: {
            fields: {
                _instance: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (DarkKingdomCore.ProfileManager._instance == null) {
                            DarkKingdomCore.ProfileManager._instance = new DarkKingdomCore.ProfileManager();
                        }
                        return DarkKingdomCore.ProfileManager._instance;
                    }
                }
            }
        },
        fields: {
            All: null
        },
        ctors: {
            init: function () {
                this.All = new (System.Collections.Generic.List$1(DarkKingdomCore.Profile)).ctor();
            }
        }
    });

    Bridge.define("DarkKingdomCore.Purchase", {
        fields: {
            name: null,
            crystals: 0,
            uIcon: null
        },
        ctors: {
            init: function () {
                this.uIcon = new MonoInterface.Appearance();
            },
            ctor: function (nam, ui, crst) {
                this.$initialize();
                this.name = nam;
                this.uIcon = ui.$clone();
                this.crystals = crst;
            }
        }
    });

    Bridge.define("DarkKingdomCore.Race", {
        fields: {
            name: null,
            desc: null,
            symb: 0,
            noAI: false,
            special: false,
            disableRewards: false,
            nick: null,
            custom: false
        },
        ctors: {
            init: function () {
                this.nick = "";
            },
            ctor: function (nme, dsc, nic, sym, nai, cst, splc, dr) {
                this.$initialize();
                this.name = nme;
                this.desc = dsc;
                this.symb = sym;
                this.noAI = nai;
                this.custom = cst;
                this.special = splc;
                this.nick = nic;
                this.disableRewards = dr;
            }
        },
        methods: {
            Enable: function () {
                this.special = false;
            }
        }
    });

    Bridge.define("DarkKingdomCore.RaceManager", {
        statics: {
            fields: {
                _instance: null
            },
            props: {
                Instance: {
                    get: function () {
                        if (DarkKingdomCore.RaceManager._instance == null) {
                            DarkKingdomCore.RaceManager._instance = new DarkKingdomCore.RaceManager();
                        }
                        return DarkKingdomCore.RaceManager._instance;
                    }
                }
            }
        },
        fields: {
            All: null
        },
        ctors: {
            init: function () {
                this.All = new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.Race)).ctor();
            }
        }
    });

    Bridge.define("DarkKingdomCore.Spell", {
        fields: {
            Name: null,
            School: null,
            Description: null,
            Cost: null,
            Target: 0,
            Img: 0
        },
        ctors: {
            init: function () {
                this.Cost = new DarkKingdomCore.TimeCost();
            }
        }
    });

    Bridge.define("DarkKingdomCore.Spell.TargetType", {
        $kind: "nested enum",
        statics: {
            fields: {
                Mass: 0,
                Unit: 1,
                Ground: 2
            }
        }
    });

    Bridge.define("DarkKingdomCore.TimeCost", {
        $kind: "struct",
        statics: {
            methods: {
                op_Addition: function (r1, r2) {
                    return new DarkKingdomCore.TimeCost.$ctor1(((r1.Money + r2.Money) | 0), ((r1.Death + r2.Death) | 0), r1.Tier, r1.Time);
                },
                op_Subtraction: function (r1, r2) {
                    return new DarkKingdomCore.TimeCost.$ctor1(((r1.Money - r2.Money) | 0), ((r1.Death - r2.Death) | 0), r1.Tier, r1.Time);
                },
                getDefaultValue: function () { return new DarkKingdomCore.TimeCost(); }
            }
        },
        fields: {
            Money: 0,
            Death: 0,
            Time: 0,
            Tier: 0
        },
        ctors: {
            $ctor1: function (money, death, tier, time) {
                this.$initialize();
                this.Money = money;
                this.Death = death;
                this.Tier = tier;
                this.Time = time;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            EnoughFor: function (cst) {
                return this.Money >= cst.Money && this.Death >= cst.Death && this.Tier >= cst.Tier;
            },
            getHashCode: function () {
                var h = Bridge.addHash([3655391383, this.Money, this.Death, this.Time, this.Tier]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, DarkKingdomCore.TimeCost)) {
                    return false;
                }
                return Bridge.equals(this.Money, o.Money) && Bridge.equals(this.Death, o.Death) && Bridge.equals(this.Time, o.Time) && Bridge.equals(this.Tier, o.Tier);
            },
            $clone: function (to) {
                var s = to || new DarkKingdomCore.TimeCost();
                s.Money = this.Money;
                s.Death = this.Death;
                s.Time = this.Time;
                s.Tier = this.Tier;
                return s;
            }
        }
    });

    Bridge.define("DarkKingdomCore.Unit", {
        fields: {
            x: 0,
            owner: 0,
            moveside: 0,
            hp: 0,
            parameters: null,
            atkRecharge: 0,
            poiRecharge: 0,
            wingsWave: 0,
            isInCombat: false,
            isInRangeCombat: false,
            purified: false,
            landing: false,
            takedOff: false,
            abils: null,
            deathFromPoison: false,
            shownAbil: null,
            shownAbilMaxVal: 0,
            atkMod: null,
            game: null,
            CurrentAnimation: null,
            CurrentFrame: 0
        },
        props: {
            Attack: {
                get: function () {
                    return DarkKingdomCore.Attack.op_Addition(this.parameters.Attack.$clone(), this.atkMod.$clone());
                },
                set: function (value) {
                    this.atkMod = DarkKingdomCore.Attack.op_Subtraction(value.$clone(), this.parameters.Attack.$clone());
                }
            },
            MinDamage: {
                get: function () {
                    return this.parameters.Attack.MinDamage;
                }
            },
            MaxDamage: {
                get: function () {
                    return this.parameters.Attack.MaxDamage;
                }
            }
        },
        ctors: {
            init: function () {
                this.parameters = new DarkKingdomCore.UnitParameters();
                this.atkMod = new DarkKingdomCore.Attack();
                this.atkRecharge = 0;
                this.poiRecharge = 60;
                this.wingsWave = 0;
                this.isInCombat = false;
                this.isInRangeCombat = false;
                this.shownAbil = "";
                this.shownAbilMaxVal = 0;
            },
            ctor: function (game, xx, msid, own, prms) {
                this.$initialize();
                this.game = game;
                this.x = xx;
                this.moveside = msid;
                this.owner = own;
                this.SetParams(prms.$clone(), true);
                this.CurrentAnimation = "Idle";
            }
        },
        methods: {
            Near: function (u2) {
                return Math.abs(this.x - u2.x) <= 30 && this.parameters.Near(u2.parameters.$clone());
            },
            DrawCurrent: function (x, y, sb, effect) {
                if (effect === void 0) { effect = 0; }
                if (DarkKingdomCore.MyGame.sprites.getItem(this.parameters.spriteName).Ranges.containsKey(this.CurrentAnimation)) {
                    var curInd;
                    curInd = (DarkKingdomCore.MyGame.sprites.getItem(this.parameters.spriteName).Ranges.getItem(this.CurrentAnimation).$clone().Item1 + Bridge.Int.clip32(Math.floor(this.CurrentFrame))) | 0;
                    DarkKingdomCore.MyGame.sprites.getItem(this.parameters.spriteName).Draw$1(curInd, x, y, sb, effect);
                } else {
                    DarkKingdomCore.MyGame.sprites.getItem(this.parameters.spriteName).Draw$1(0, x, y, sb, effect);
                }
            },
            StartAnimation: function (name, animator) {
                if (DarkKingdomCore.MyGame.sprites.getItem(this.parameters.spriteName).Ranges.containsKey(name)) {
                    this.CurrentAnimation = name;
                    animator.AddChild(MonoInterface.NumberAnimation, new MonoInterface.NumberAnimation("CurrentFrame", 0, 0.9, 0.1, void 0, Bridge.fn.bind(this, function () {
                        this.CurrentAnimation = "Idle";
                        this.CurrentFrame = 0;
                    }), this)).Begin();
                }
            },
            AddAbility$3: function (nme, num, cond, cdnum, t, hidden) {
                if (hidden === void 0) { hidden = false; }
                if (!this.abils.containsKey(nme)) {
                    this.abils.add(nme, new DarkKingdomCore.Ability(nme, num, cond, cdnum, t, hidden));
                } else {
                    if (this.abils.getItem(nme).used) {
                        this.abils.setItem(nme, new DarkKingdomCore.Ability(nme, num, cond, cdnum, t, hidden));
                    }
                }
            },
            AddAbility: function (a) {
                this.AddAbility$3(a.name, a.value, a.condition, a.condnum, a.typ, a.hidden);
            },
            AddAbility$1: function (nme, t, hidden) {
                if (hidden === void 0) { hidden = false; }
                this.AddAbility$3(nme, 0, "", 0, t, hidden);
            },
            AddAbility$2: function (nme, num, t, hidden) {
                if (hidden === void 0) { hidden = false; }
                this.AddAbility$3(nme, num, "", 0, t, hidden);
            },
            RemoveAbil: function (nme) {
                if (this.abils.containsKey(nme)) {
                    this.abils.remove(nme);
                }
            },
            AbsContains: function (abil_name) {
                if (this.abils.containsKey(abil_name)) {
                    return this.abils.getItem(abil_name).condCompleted && !this.abils.getItem(abil_name).used;
                }
                return false;
            },
            AbsContains$1: function (abs) {
                var $t;
                if (abs === void 0) { abs = []; }
                $t = Bridge.getEnumerator(abs);
                try {
                    while ($t.moveNext()) {
                        var ab = $t.Current;
                        if (this.abils.containsKey(ab)) {
                            if (this.abils.getItem(ab).condCompleted && !this.abils.getItem(ab).used) {
                                return true;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return false;
            },
            SetParams: function (newprm, setHp) {
                var $t, $t1, $t2;
                this.parameters = newprm.$clone();
                this.atkMod = new DarkKingdomCore.Attack.$ctor1(0, 0, 0, 0);
                this.abils = new (System.Collections.Generic.Dictionary$2(System.String,DarkKingdomCore.Ability)).ctor();
                $t = Bridge.getEnumerator(this.parameters.abils.Values);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        this.AddAbility(a);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (this.AbsContains("Random model")) {
                    this.RemoveAbil("Random model");
                    do {
                        ($t1 = DarkKingdomCore.MyGame.rnd.NextDouble());
                        if (Bridge.is($t1, System.Object)) {
                            var _discard1 = $t1;
                            if (DarkKingdomCore.MyGame.rnd.NextDouble() < 0.33) {
                                {
                                    this.parameters.spriteName = "militia1";
                                    break;
                                }
                            }
                        }

                        if (Bridge.is($t1, System.Object)) {
                            var _discard2 = $t1;
                            if (DarkKingdomCore.MyGame.rnd.NextDouble() < 0.66) {
                                {
                                    this.parameters.spriteName = "militia2";
                                    break;
                                }
                            }
                        }
                    } while (false);
                }
                if (this.AbsContains("Universal")) {
                    this.RemoveAbil("Universal");
                    var maxrace = DarkKingdomCore.MyGame.SelectPlayingRace(DarkKingdomCore.MyGame.plrs[this.owner].unitsList);
                    switch (maxrace) {
                        case "Humans": 
                            {
                                this.AddAbility$2("Life_rollback", 2, DarkKingdomCore.EffectType.Good);
                                break;
                            }
                        case "Undeads": 
                            {
                                this.AddAbility$1("Undead", DarkKingdomCore.EffectType.Good);
                                this.AddAbility$1("Plague", DarkKingdomCore.EffectType.Good);
                                this.parameters.Speed = "Slow";
                                break;
                            }
                        case "Demons": 
                            {
                                this.AddAbility$1("Mage", DarkKingdomCore.EffectType.Good);
                                this.AddAbility$3("Explosive", 0, "On_death", 0, DarkKingdomCore.EffectType.Good);
                                this.parameters.Armor = "None";
                                this.parameters.Speed = "Fast";
                                break;
                            }
                        case "Horde": 
                            {
                                this.Attack = DarkKingdomCore.Attack.op_Addition$1(this.Attack.$clone(), 10);
                                this.AddAbility$2("Crasher", 24, DarkKingdomCore.EffectType.Good);
                                break;
                            }
                        case "Swampers": 
                            {
                                this.AddAbility$2("Poisoner", 20, DarkKingdomCore.EffectType.Good);
                                this.AddAbility$1("Poisonproof", DarkKingdomCore.EffectType.Good);
                                break;
                            }
                        case "Elves": 
                            {
                                this.AddAbility$2("Agility", 20, DarkKingdomCore.EffectType.Good);
                                this.AddAbility$3("Lycanthropy", 54, "At night", 0, DarkKingdomCore.EffectType.Good);
                                break;
                            }
                        case "Dwarfs": 
                            {
                                this.parameters.Armor = "Heavy";
                                this.AddAbility$1("Spellproof", DarkKingdomCore.EffectType.Good);
                                this.parameters.Speed = "Slow";
                                break;
                            }
                        case "Steampunk": 
                            {
                                this.Attack = DarkKingdomCore.Attack.op_Addition$1(this.Attack.$clone(), 10);
                                ($t2 = this.parameters.$clone()).maxhp = ($t2.maxhp + 100) | 0;
                                this.AddAbility$1("Machinery", DarkKingdomCore.EffectType.Good);
                                break;
                            }
                        case "Neutrals": 
                            {
                                this.Attack = DarkKingdomCore.Attack.op_Addition$1(this.Attack.$clone(), 10);
                                this.AddAbility$1("Invisible", DarkKingdomCore.EffectType.Good);
                                break;
                            }
                    }
                    if (Bridge.referenceEquals(this.parameters.Name, "Neutral_warrior") && !Bridge.referenceEquals(maxrace, "Neutrals")) {
                        this.parameters.rect.Height = 31;
                    }
                }
                if (this.AbsContains("Chance_to_fly") && DarkKingdomCore.MyGame.rnd.NextDouble() > 0.5) {
                    this.parameters.moveType = DarkKingdomCore.UnitMoveType.FlyingMT;
                }
                if (setHp) {
                    this.hp = this.parameters.maxhp;
                }
            }
        }
    });

    Bridge.define("DarkKingdomCore.UnitMoveType", {
        $kind: "enum",
        statics: {
            fields: {
                GroundMT: 0,
                FlyingMT: 1,
                HugeMT: 2
            }
        }
    });

    Bridge.define("DarkKingdomCore.UnitParameters", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new DarkKingdomCore.UnitParameters(); }
            }
        },
        fields: {
            id: 0,
            Name: null,
            Attack: null,
            maxhp: 0,
            Cost: null,
            _armor: 0,
            _speed: 0,
            armNick: null,
            spdNick: null,
            Race: null,
            Subrace: null,
            Description: null,
            animated: false,
            imgx: 0,
            imgy: 0,
            isBuilding: false,
            isIgnoreUnits: false,
            isHeroic: false,
            moveType: 0,
            maxLimit: 0,
            hpBotom: false,
            size: null,
            rect: null,
            abils: null,
            rawAbils: null,
            spriteName: null,
            iconApp: null,
            iconInd: 0,
            ammoType: 0,
            support: false,
            upgrade: false,
            special: false,
            isStartBuilding: false
        },
        props: {
            Speed: {
                get: function () {
                    return this.spdNick;
                },
                set: function (value) {
                    this.spdNick = value;
                    switch (value) {
                        case "None": 
                            this._speed = 0;
                            break;
                        case "Slow": 
                            this._speed = 0.15;
                            break;
                        case "Normal": 
                            this._speed = 0.2;
                            break;
                        case "Fast": 
                            this._speed = 0.3;
                            break;
                        case "Very_fast": 
                            this._speed = 0.6;
                            break;
                    }
                }
            },
            Armor: {
                get: function () {
                    return this.armNick;
                },
                set: function (value) {
                    this.armNick = value;
                    switch (value) {
                        case "None": 
                            this._armor = 1;
                            break;
                        case "Light": 
                            this._armor = 0.75;
                            break;
                        case "Heavy": 
                            this._armor = 0.5;
                            break;
                        case "Ethereal": 
                            this._armor = 0.25;
                            break;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.Attack = new DarkKingdomCore.Attack();
                this.Cost = new DarkKingdomCore.TimeCost();
                this.size = new DarkKingdomCore.WidthHeight();
                this.rect = new Microsoft.Xna.Framework.Rectangle();
                this.iconApp = new MonoInterface.Appearance();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            AbsContains: function (nme) {
                return this.abils.containsKey(nme);
            },
            Near: function (up2) {
                return this.moveType === up2.moveType || this.moveType === DarkKingdomCore.UnitMoveType.HugeMT || up2.moveType === DarkKingdomCore.UnitMoveType.HugeMT;
            },
            getHashCode: function () {
                var h = Bridge.addHash([5290109060, this.id, this.Name, this.Attack, this.maxhp, this.Cost, this._armor, this._speed, this.armNick, this.spdNick, this.Race, this.Subrace, this.Description, this.animated, this.imgx, this.imgy, this.isBuilding, this.isIgnoreUnits, this.isHeroic, this.moveType, this.maxLimit, this.hpBotom, this.size, this.rect, this.abils, this.rawAbils, this.spriteName, this.iconApp, this.iconInd, this.ammoType, this.support, this.upgrade, this.special, this.isStartBuilding]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, DarkKingdomCore.UnitParameters)) {
                    return false;
                }
                return Bridge.equals(this.id, o.id) && Bridge.equals(this.Name, o.Name) && Bridge.equals(this.Attack, o.Attack) && Bridge.equals(this.maxhp, o.maxhp) && Bridge.equals(this.Cost, o.Cost) && Bridge.equals(this._armor, o._armor) && Bridge.equals(this._speed, o._speed) && Bridge.equals(this.armNick, o.armNick) && Bridge.equals(this.spdNick, o.spdNick) && Bridge.equals(this.Race, o.Race) && Bridge.equals(this.Subrace, o.Subrace) && Bridge.equals(this.Description, o.Description) && Bridge.equals(this.animated, o.animated) && Bridge.equals(this.imgx, o.imgx) && Bridge.equals(this.imgy, o.imgy) && Bridge.equals(this.isBuilding, o.isBuilding) && Bridge.equals(this.isIgnoreUnits, o.isIgnoreUnits) && Bridge.equals(this.isHeroic, o.isHeroic) && Bridge.equals(this.moveType, o.moveType) && Bridge.equals(this.maxLimit, o.maxLimit) && Bridge.equals(this.hpBotom, o.hpBotom) && Bridge.equals(this.size, o.size) && Bridge.equals(this.rect, o.rect) && Bridge.equals(this.abils, o.abils) && Bridge.equals(this.rawAbils, o.rawAbils) && Bridge.equals(this.spriteName, o.spriteName) && Bridge.equals(this.iconApp, o.iconApp) && Bridge.equals(this.iconInd, o.iconInd) && Bridge.equals(this.ammoType, o.ammoType) && Bridge.equals(this.support, o.support) && Bridge.equals(this.upgrade, o.upgrade) && Bridge.equals(this.special, o.special) && Bridge.equals(this.isStartBuilding, o.isStartBuilding);
            },
            $clone: function (to) {
                var s = to || new DarkKingdomCore.UnitParameters();
                s.id = this.id;
                s.Name = this.Name;
                s.Attack = this.Attack.$clone();
                s.maxhp = this.maxhp;
                s.Cost = this.Cost.$clone();
                s._armor = this._armor;
                s._speed = this._speed;
                s.armNick = this.armNick;
                s.spdNick = this.spdNick;
                s.Race = this.Race;
                s.Subrace = this.Subrace;
                s.Description = this.Description;
                s.animated = this.animated;
                s.imgx = this.imgx;
                s.imgy = this.imgy;
                s.isBuilding = this.isBuilding;
                s.isIgnoreUnits = this.isIgnoreUnits;
                s.isHeroic = this.isHeroic;
                s.moveType = this.moveType;
                s.maxLimit = this.maxLimit;
                s.hpBotom = this.hpBotom;
                s.size = this.size.$clone();
                s.rect = this.rect.$clone();
                s.abils = this.abils;
                s.rawAbils = this.rawAbils;
                s.spriteName = this.spriteName;
                s.iconApp = this.iconApp.$clone();
                s.iconInd = this.iconInd;
                s.ammoType = this.ammoType;
                s.support = this.support;
                s.upgrade = this.upgrade;
                s.special = this.special;
                s.isStartBuilding = this.isStartBuilding;
                return s;
            }
        }
    });

    Bridge.define("DarkKingdomCore.WidthHeight", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new DarkKingdomCore.WidthHeight(); }
            }
        },
        fields: {
            w: 0,
            h: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3728611878, this.w, this.h]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, DarkKingdomCore.WidthHeight)) {
                    return false;
                }
                return Bridge.equals(this.w, o.w) && Bridge.equals(this.h, o.h);
            },
            $clone: function (to) {
                var s = to || new DarkKingdomCore.WidthHeight();
                s.w = this.w;
                s.h = this.h;
                return s;
            }
        }
    });

    Bridge.define("DarkKingdomDesktop.App", {
        main: function Main () {
            var $t;
            var canvas = ($t = document.createElement("canvas"), $t.width = 800, $t.height = 480, $t.id = "monogamecanvas", $t);
            document.body.appendChild(canvas);

            DarkKingdomDesktop.App.game = new DarkKingdomDesktop.MainClass();
            DarkKingdomDesktop.App.game.Run();
        },
        statics: {
            fields: {
                game: null
            }
        }
    });

    /** @namespace DarkKingdomDesktop */

    /**
     * This is the main type for your game
     *
     * @public
     * @class DarkKingdomDesktop.MainClass
     * @augments Microsoft.Xna.Framework.Game
     */
    Bridge.define("DarkKingdomDesktop.MainClass", {
        inherits: [Microsoft.Xna.Framework.Game],
        fields: {
            gameClass: null,
            graphics: null,
            spriteBatch: null,
            AppFolder: null,
            DataFolder: null
        },
        ctors: {
            ctor: function () {
                var $t;
                this.$initialize();
                Microsoft.Xna.Framework.Game.ctor.call(this);
                this.graphics = new Microsoft.Xna.Framework.GraphicsDeviceManager(this);
                var platform = "Windows";

                this.gameClass = ($t = new DarkKingdomCore.MyGame(platform), $t.graphics = this.graphics, $t.AppFolder = "", $t.DataFolder = "Content", $t);

                this.Content.RootDirectory = "Content";

                this.gameClass.addOnExit(Bridge.fn.cacheBind(this, this.OnExit));

            }
        },
        methods: {
            Resize: function (w, h) {

                //var scaleFactor = 1.0f;

                //int finalW = (int)(w * scaleFactor);
                //int finalH = (int)(h * scaleFactor);
                //var uiScale = 1.0f;
                //if (finalW > 1000)
                //    uiScale = 1.25f;
                //if (finalW > 1500)
                //    uiScale = 1.5f;
            },
            /**
             * Allows the game to perform any initialization it needs to before starting to run.
             This is where it can query for any required services and load any non-graphic
             related content.  Calling base.Initialize will enumerate through any components
             and initialize them as well.
             *
             * @instance
             * @protected
             * @override
             * @this DarkKingdomDesktop.MainClass
             * @memberof DarkKingdomDesktop.MainClass
             * @return  {void}
             */
            Initialize: function () {
                // TODO: Add your initialization logic here
                this.IsMouseVisible = true;
                Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures = 17;
                Microsoft.Xna.Framework.Game.prototype.Initialize.call(this);
            },
            /**
             * LoadContent will be called once per game and is the place to load
             all of your content.
             *
             * @instance
             * @protected
             * @override
             * @this DarkKingdomDesktop.MainClass
             * @memberof DarkKingdomDesktop.MainClass
             * @return  {void}
             */
            LoadContent: function () {
                // Create a new SpriteBatch, which can be used to draw textures.
                //backBuffer = new RenderTarget2D(graphics.GraphicsDevice, 800, 480);
                this.spriteBatch = new Microsoft.Xna.Framework.Graphics.SpriteBatch(this.GraphicsDevice);
                this.gameClass.spriteBatch = this.spriteBatch;

                //	ReadProfiles();
                //ReadSprites(Content);

                //int test_w = 50, test_h = 50;
                //test_text = new Texture2D(GraphicsDevice, test_w, test_h);
                //var fill_arr = new int[test_w * test_h * 4];
                //for (var i = 0; i < test_w * test_h * 4; i += 4)
                //{
                //    fill_arr[i] = 255;
                //    fill_arr[i + 1] = 0;
                //    fill_arr[i + 2] = 255;
                //    fill_arr[i + 3] = 128;
                //}
                //test_text.SetData(fill_arr);
                this.gameClass.LoadData(this.Content);
            },
            /**
             * UnloadContent will be called once per game and is the place to unload
             all content.
             *
             * @instance
             * @protected
             * @override
             * @this DarkKingdomDesktop.MainClass
             * @memberof DarkKingdomDesktop.MainClass
             * @return  {void}
             */
            UnloadContent: function () {
                // TODO: Unload any non ContentManager content here
            },
            /**
             * Allows the game to run logic such as updating the world,
             checking for collisions, gathering input, and playing audio.
             *
             * @instance
             * @protected
             * @override
             * @this DarkKingdomDesktop.MainClass
             * @memberof DarkKingdomDesktop.MainClass
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime    Provides a snapshot of timing values.
             * @return  {void}
             */
            Update: function (gameTime) {
                if (this.gameClass.isLoaded) {
                    this.gameClass.Update();
                }
                Microsoft.Xna.Framework.Game.prototype.Update.call(this, gameTime);
            },
            /**
             * This is called when the game should draw itself.
             *
             * @instance
             * @protected
             * @override
             * @this DarkKingdomDesktop.MainClass
             * @memberof DarkKingdomDesktop.MainClass
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime    Provides a snapshot of timing values.
             * @return  {void}
             */
            Draw: function (gameTime) {
                // TODO: Add your drawing code here
                if (this.gameClass.isLoaded) {
                    //graphics.GraphicsDevice.SetRenderTarget(backBuffer);
                    this.spriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred, Microsoft.Xna.Framework.Graphics.BlendState.NonPremultiplied, Microsoft.Xna.Framework.Graphics.SamplerState.PointClamp, Microsoft.Xna.Framework.Graphics.DepthStencilState.Default, Microsoft.Xna.Framework.Graphics.RasterizerState.CullNone);

                    this.gameClass.Draw();
                    //spriteBatch.End();
                    //graphics.GraphicsDevice.SetRenderTarget(null);

                    //spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.NonPremultiplied, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone);

                    //spriteBatch.Draw(backBuffer, new Rectangle(0, 0, gameClass._screenWidth, gameClass._screenHeight), Color.White);

                    this.gameClass.DrawInterface(this.spriteBatch);

                    //spriteBatch.Draw(test_text, new Vector2(100, 100), Color.White);

                    this.spriteBatch.End();
                }

                Microsoft.Xna.Framework.Game.prototype.Draw.call(this, gameTime);
            },
            OnExit: function () {
                this.Exit();
            }
        }
    });

    Bridge.define("MonoInterface.Animation", {
        fields: {
            IsRunning: false,
            IsCompleted: false,
            animationTask: null
        },
        events: {
            OnStart: null,
            OnEnd: null
        },
        ctors: {
            ctor: function (onStart, onEnd) {
                if (onStart === void 0) { onStart = null; }
                if (onEnd === void 0) { onEnd = null; }

                this.$initialize();
                this.OnStart = onStart;
                this.OnEnd = onEnd;
            }
        },
        methods: {
            Begin: function () {
                this.IsRunning = true;
                this.IsCompleted = false;
                !Bridge.staticEquals(this.OnStart, null) ? this.OnStart() : null;
                this.animationTask = new System.Threading.Tasks.TaskCompletionSource();
                return this.animationTask.task;
            },
            Complete: function () {
                this.IsRunning = false;
                this.IsCompleted = true;
            },
            End: function () {
                !Bridge.staticEquals(this.OnEnd, null) ? this.OnEnd() : null;
                this.animationTask.setResult(null);
            }
        }
    });

    Bridge.define("MonoInterface.Animator", {
        fields: {
            Animations: null,
            completed: null
        },
        ctors: {
            init: function () {
                this.completed = new (System.Collections.Generic.List$1(MonoInterface.Animation)).ctor();
            },
            ctor: function () {
                this.$initialize();
                this.Animations = new (System.Collections.Generic.List$1(MonoInterface.Animation)).ctor();
            }
        },
        methods: {
            AddChild: function (T, child) {
                this.Animations.add(child);
                return child;
            },
            Do: function () {
                var $t, $t1;
                $t = Bridge.getEnumerator(this.Animations);
                try {
                    while ($t.moveNext()) {
                        var anim = $t.Current;
                        anim.Do();
                        if (anim.IsCompleted) {
                            this.completed.add(anim);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (this.completed.Count > 0) {
                    $t1 = Bridge.getEnumerator(this.completed);
                    try {
                        while ($t1.moveNext()) {
                            var anim1 = $t1.Current;
                            anim1.End();
                            this.Animations.remove(anim1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    this.completed.clear();
                }
            }
        }
    });

    Bridge.define("MonoInterface.Appearance", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new MonoInterface.Appearance(); }
            }
        },
        fields: {
            sprite: null,
            img: 0
        },
        ctors: {
            $ctor1: function (sprite, img) {
                this.$initialize();
                this.sprite = sprite;
                this.img = img;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Draw$1: function (sb, x, y, effect, alpha) {
                if (effect === void 0) { effect = 0; }
                if (alpha === void 0) { alpha = 1.0; }
                this.sprite.Draw$1(this.img, x, y, sb, effect, alpha);
            },
            Draw: function (sb, x, y, w, h, effect, alpha) {
                if (effect === void 0) { effect = 0; }
                if (alpha === void 0) { alpha = 1.0; }
                this.sprite.Draw(this.img, x, y, w, h, sb, effect, alpha);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3553773573, this.sprite, this.img]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, MonoInterface.Appearance)) {
                    return false;
                }
                return Bridge.equals(this.sprite, o.sprite) && Bridge.equals(this.img, o.img);
            },
            $clone: function (to) {
                var s = to || new MonoInterface.Appearance();
                s.sprite = this.sprite;
                s.img = this.img;
                return s;
            }
        }
    });

    Bridge.define("MonoInterface.Block", {
        fields: {
            Parent: null,
            X: 0,
            Y: 0,
            _w: 0,
            _h: 0,
            Alignment: null,
            Alpha: 0,
            Visible: false,
            CurrentTheme: null,
            CurrentLocalization: null,
            _finalX: 0,
            _finalY: 0,
            _finalW: 0,
            _finalH: 0,
            IsNeedRecalc: false,
            _showAnimation: null,
            _hideAnimation: null
        },
        props: {
            W: {
                get: function () {
                    return (this._w === -1 && this.Parent != null) ? this.Parent.W : this._w;
                },
                set: function (value) {
                    this._w = value;
                }
            },
            H: {
                get: function () {
                    return (this._h === -1 && this.Parent != null) ? this.Parent.H : this._h;
                },
                set: function (value) {
                    this._h = value;
                }
            },
            Right: {
                get: function () {
                    return ((this.X + this.W) | 0);
                },
                set: function (value) {
                    this.X = (value - this.W) | 0;
                }
            },
            Bottom: {
                get: function () {
                    return ((this.Y + this.H) | 0);
                },
                set: function (value) {
                    this.Y = (value - this.H) | 0;
                }
            },
            FinalX: {
                get: function () {
                    return this._finalX;
                }
            },
            FinalY: {
                get: function () {
                    return this._finalY;
                }
            },
            FinalW: {
                get: function () {
                    return this._finalW;
                }
            },
            FinalH: {
                get: function () {
                    return this._finalH;
                }
            },
            FinalRight: {
                get: function () {
                    return ((this._finalX + this._finalW) | 0);
                }
            },
            FinalBottom: {
                get: function () {
                    return ((this._finalY + this._finalH) | 0);
                }
            },
            ShowAnimation: {
                get: function () {
                    return this._showAnimation;
                },
                set: function (value) {
                    this._showAnimation = value;
                    var na;
                    if (((na = Bridge.as(this._showAnimation, MonoInterface.NumberAnimation))) != null && na.target == null) {
                        na.SetTarget(this);
                    }
                }
            },
            HideAnimation: {
                get: function () {
                    return this._hideAnimation;
                },
                set: function (value) {
                    this._hideAnimation = value;
                    var na;
                    if (((na = Bridge.as(this._hideAnimation, MonoInterface.NumberAnimation))) != null && na.target == null) {
                        na.SetTarget(this);
                    }
                    this.HideAnimation.addOnEnd(Bridge.fn.bind(this, function () {
                        this.Visible = false;
                    }));
                }
            }
        },
        ctors: {
            init: function () {
                this.Alignment = new Microsoft.Xna.Framework.Vector2();
            }
        },
        methods: {
            CheckForRecalc: function () {
                if (this.IsNeedRecalc) {
                    this.Recalc();
                }
            },
            Recalc: function () {

                this._finalW = this._w === -1 ? this.Parent.FinalW : Bridge.Int.clip32(this.W * this.Parent.FinalChildrenScaleX);
                this._finalH = this._h === -1 ? this.Parent.FinalH : Bridge.Int.clip32(this.H * this.Parent.FinalChildrenScaleY);
                this._finalX = (this.Parent.FinalX + Bridge.Int.clip32((this.Parent.FinalChildrenScaleX * this.X + (((this.Parent.FinalW - this._finalW) | 0)) * this.Alignment.X))) | 0;
                this._finalY = (this.Parent.FinalY + Bridge.Int.clip32((this.Parent.FinalChildrenScaleY * this.Y + (((this.Parent.FinalH - this._finalH) | 0)) * this.Alignment.Y))) | 0;
                this.IsNeedRecalc = false;
            },
            Show: function (animator) {
                if (animator === void 0) { animator = null; }
                if (this.Visible === false) {
                    this.Visible = true;
                    if (animator != null && this.ShowAnimation != null) {
                        animator.AddChild(MonoInterface.Animation, this.ShowAnimation).Begin();
                    }
                }
            },
            Hide: function (animator) {
                if (animator === void 0) { animator = null; }

                if (this.Visible === true) {
                    if (animator != null && this.HideAnimation != null) {
                        animator.AddChild(MonoInterface.Animation, this.HideAnimation).Begin();
                    } else {
                        this.Visible = false;
                    }
                }
            },
            ApplyTheme: function (currentTheme) {
                this.CurrentTheme = currentTheme;
                this.IsNeedRecalc = true;
            },
            ApplyLocalization: function (currentLocalization) {
                this.CurrentLocalization = currentLocalization;
            }
        }
    });

    Bridge.define("MonoInterface.BlockAnimation.properties", {
        $kind: "nested enum",
        statics: {
            fields: {
                X: 0,
                Y: 1,
                Alpha: 2
            }
        }
    });

    Bridge.define("MonoInterface.Grid.Orientations", {
        $kind: "nested enum",
        statics: {
            fields: {
                LeftToRight: 0,
                TopToBottom: 1
            }
        }
    });

    Bridge.define("MonoInterface.Localization", {
        fields: {
            Name: null,
            _strings: null
        },
        ctors: {
            init: function () {
                this._strings = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
            },
            ctor: function (name, strings) {
                this.$initialize();
                this.Name = name;
                this._strings = strings;
            }
        },
        methods: {
            AddString: function (key, text) {
                this._strings.add(key, text);
            },
            GetString: function (key) {
                if (this._strings.containsKey(key)) {
                    return this._strings.getItem(key);
                }
                return key;
            },
            GetString$1: function (key, args) {
                if (args === void 0) { args = []; }
                if (this._strings.containsKey(key)) {
                    return System.String.format.apply(System.String, [this._strings.getItem(key)].concat(args));
                }
                return key;
            }
        }
    });

    Bridge.define("MonoInterface.Sprite", {
        fields: {
            Texture: null,
            Name: null,
            W: 0,
            H: 0,
            Ranges: null
        },
        ctors: {
            init: function () {
                this.Ranges = new (System.Collections.Generic.Dictionary$2(System.String,System.ValueTuple$2(System.Int32,System.Int32))).ctor();
            }
        },
        methods: {
            Draw$1: function (ind, x, y, sb, effect, alpha) {
                if (effect === void 0) { effect = 0; }
                if (alpha === void 0) { alpha = 1.0; }
                if (alpha !== 1.0) {
                    sb.Draw$7(this.Texture, new Microsoft.Xna.Framework.Vector2.$ctor2(x, y), void 0, this.RectFromIndex(ind), void 0, 0.0, void 0, new Microsoft.Xna.Framework.Color.$ctor9(1.0, 1.0, 1.0, alpha), effect, 0.0);
                } else {
                    sb.Draw$7(this.Texture, new Microsoft.Xna.Framework.Vector2.$ctor2(x, y), void 0, this.RectFromIndex(ind), void 0, 0.0, void 0, Microsoft.Xna.Framework.Color.White, effect, 0.0);
                }
            },
            Draw: function (ind, x, y, w, h, sb, effect, alpha) {
                if (effect === void 0) { effect = 0; }
                if (alpha === void 0) { alpha = 1.0; }
                if (alpha !== 1.0) {
                    sb.Draw$7(this.Texture, void 0, new Microsoft.Xna.Framework.Rectangle.$ctor2(x, y, w, h), this.RectFromIndex(ind), void 0, 0.0, void 0, new Microsoft.Xna.Framework.Color.$ctor9(1.0, 1.0, 1.0, alpha), effect, 0.0);
                } else {
                    sb.Draw$7(this.Texture, void 0, new Microsoft.Xna.Framework.Rectangle.$ctor2(x, y, w, h), this.RectFromIndex(ind), void 0, 0.0, void 0, Microsoft.Xna.Framework.Color.White, effect, 0.0);
                }
            },
            RectFromIndex: function (ind) {
                var columns = (Bridge.Int.div(this.Texture.Width, this.W)) | 0;
                return new Microsoft.Xna.Framework.Rectangle.$ctor2(Bridge.Int.mul((ind % columns), this.W), Bridge.Int.mul((((Bridge.Int.div(ind, columns)) | 0)), this.H), this.W, this.H);
            }
        }
    });

    Bridge.define("MonoInterface.Theme", {
        statics: {
            methods: {
                SolidColorTexture: function (gd, r, g, b, a) {
                    if (a === void 0) { a = 255; }
                    var tex = new Microsoft.Xna.Framework.Graphics.Texture2D.ctor(gd, 1, 1);
                    var data = System.Array.init([
                        r, 
                        g, 
                        b, 
                        a
                    ], System.Int32);
                    tex.SetData$1(System.Int32, data, 0, 1);
                    return tex;
                },
                GetEmptyApp: function (gd) {
                    var $t;
                    return new MonoInterface.Appearance.$ctor1(($t = new MonoInterface.Sprite(), $t.Texture = new Microsoft.Xna.Framework.Graphics.Texture2D.ctor(gd, 1, 1), $t.W = 1, $t.H = 1, $t), 0);
                }
            }
        },
        fields: {
            FrameBackTexture: null,
            ButtonBackTexture: null,
            ButtonFrontTexture: null,
            ButtonPressedTexture: null,
            ButtonDisabledTexture: null,
            ButtonSelectedTexture: null,
            FontColor: null,
            ProgressBackTexture: null,
            ProgressFrontTexture: null,
            SwitcherButtonLeftTexture: null,
            SwitcherButtonRightTexture: null,
            SwitcherMainFontSize: 0,
            SwitcherMainColor: null,
            SwitcherDescriptionFontSize: 0,
            SwitcherDescriptionColor: null,
            NineFrameBoderTexture: null,
            NineSliceButtonBackTexture: null,
            Fonts: null,
            EmptyTexture: null
        },
        ctors: {
            init: function () {
                this.FrameBackTexture = new MonoInterface.Appearance();
                this.ButtonBackTexture = new MonoInterface.Appearance();
                this.ButtonFrontTexture = new MonoInterface.Appearance();
                this.ButtonPressedTexture = new MonoInterface.Appearance();
                this.ButtonDisabledTexture = new MonoInterface.Appearance();
                this.ButtonSelectedTexture = new MonoInterface.Appearance();
                this.FontColor = new Microsoft.Xna.Framework.Color();
                this.ProgressBackTexture = new MonoInterface.Appearance();
                this.ProgressFrontTexture = new MonoInterface.Appearance();
                this.SwitcherButtonLeftTexture = new MonoInterface.Appearance();
                this.SwitcherButtonRightTexture = new MonoInterface.Appearance();
                this.SwitcherMainColor = new Microsoft.Xna.Framework.Color();
                this.SwitcherDescriptionColor = new Microsoft.Xna.Framework.Color();
                this.EmptyTexture = new MonoInterface.Appearance();
            },
            ctor: function () {
                this.$initialize();
                this.Fonts = new (System.Collections.Generic.List$1(System.ValueTuple$2(System.Int32,Microsoft.Xna.Framework.Graphics.SpriteFont))).ctor();
            }
        },
        methods: {
            GetFont: function (size) {
                for (var i = 0; i < this.Fonts.Count; i = (i + 1) | 0) {
                    if (this.Fonts.getItem(i).$clone().Item1 >= size) {
                        return this.Fonts.getItem(i).$clone().Item2;
                    }
                }
                return this.Fonts.getItem(((this.Fonts.Count - 1) | 0)).$clone().Item2;
            }
        }
    });

    Bridge.define("DarkKingdomCore.ImageParticle", {
        inherits: [DarkKingdomCore.Particle],
        fields: {
            spriteRef: null,
            isMirrored: false
        },
        ctors: {
            init: function () {
                this.spriteRef = new MonoInterface.Appearance();
            },
            ctor: function (spriteRef, xx, yy, dxx, dyy, lt, isMir) {
                if (isMir === void 0) { isMir = false; }

                this.$initialize();
                DarkKingdomCore.Particle.ctor.call(this);
                this.x = xx;
                this.y = yy;
                this.dx = dxx;
                this.dy = dyy;
                this.ltime = lt;
                this.spriteRef = spriteRef.$clone();
                this.pType = DarkKingdomCore.ParType.Image;
                this.isMirrored = isMir;
            }
        },
        methods: {
            XNADraw: function (sb) {
                this.spriteRef.Draw$1(sb, this.x, this.y, this.isMirrored ? Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally : Microsoft.Xna.Framework.Graphics.SpriteEffects.None);
            }
        }
    });

    Bridge.define("DarkKingdomCore.TextParticle", {
        inherits: [DarkKingdomCore.Particle],
        fields: {
            str: null,
            clr: null,
            shiftX: 0,
            font: null
        },
        ctors: {
            init: function () {
                this.clr = new Microsoft.Xna.Framework.Color();
            },
            ctor: function (fnt, c, xx, yy, dxx, dyy, ayy, lt, s) {
                this.$initialize();
                DarkKingdomCore.Particle.ctor.call(this);
                this.clr = c.$clone();
                this.x = xx;
                this.y = yy;
                this.dx = dxx;
                this.dy = dyy;
                this.ltime = lt;
                this.ay = ayy;
                this.str = s;
                this.a = 768;
                this.font = fnt;
                this.ast = (Bridge.Int.div(768, this.ltime)) | 0;
                this.pType = DarkKingdomCore.ParType.Text;
                this.shiftX = -fnt.MeasureString(this.str).X / 2;
            }
        },
        methods: {
            XNADraw: function (sb) {
                sb.DrawString(this.font, this.str, new Microsoft.Xna.Framework.Vector2.$ctor2(this.x + this.shiftX, this.y), this.clr.$clone());
            }
        }
    });

    Bridge.define("MonoInterface.BlockAnimation", {
        inherits: [MonoInterface.Animation],
        fields: {
            current: 0,
            startValue: 0,
            endValue: 0,
            step: 0,
            target: null,
            property: 0
        },
        ctors: {
            ctor: function (property, start, end, step, onStart, onEnd, target) {
                if (onStart === void 0) { onStart = null; }
                if (onEnd === void 0) { onEnd = null; }
                if (target === void 0) { target = null; }

                this.$initialize();
                MonoInterface.Animation.ctor.call(this, onStart, onEnd);
                this.property = property;
                this.startValue = start;
                this.endValue = end;
                this.step = step;

                this.target = target;

                this.IsRunning = false;
                this.IsCompleted = false;
            }
        },
        methods: {
            Do: function () {
                if (this.IsRunning) {
                    this.current += this.step;
                    if ((this.step > 0 && this.current > this.endValue) || (this.step < 0 && this.current < this.endValue)) {
                        this.current = this.endValue;
                        this.Complete();
                    }
                    switch (this.property) {
                        case MonoInterface.BlockAnimation.properties.X: 
                            this.target.X = Bridge.Int.clip32(this.current);
                            break;
                        case MonoInterface.BlockAnimation.properties.Y: 
                            this.target.Y = Bridge.Int.clip32(this.current);
                            break;
                        case MonoInterface.BlockAnimation.properties.Alpha: 
                            this.target.Alpha = this.current;
                            break;
                    }
                }
            },
            SetTarget: function (target) {
                this.target = target;
            },
            Begin: function () {
                this.current = this.startValue;
                return MonoInterface.Animation.prototype.Begin.call(this);
            }
        }
    });

    Bridge.define("MonoInterface.Container", {
        inherits: [MonoInterface.Block],
        fields: {
            ChildrenScaleX: 0,
            ChildrenScaleY: 0,
            _finalChildrenScaleX: 0,
            _finalChildrenScaleY: 0,
            Children: null
        },
        props: {
            FinalChildrenScaleX: {
                get: function () {
                    return this._finalChildrenScaleX;
                }
            },
            FinalChildrenScaleY: {
                get: function () {
                    return this._finalChildrenScaleY;
                }
            }
        },
        ctors: {
            ctor: function (x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Block.ctor.call(this);
                this.X = x;
                this.Y = y;
                this.W = w;
                this.H = h;
                this.ChildrenScaleX = 1.0;
                this.ChildrenScaleY = 1.0;
                this.Alpha = 1.0;
                this.Alignment = new Microsoft.Xna.Framework.Vector2.$ctor2(horAlign, verAlign);
                this.Visible = visible;
                this.Children = new (System.Collections.Generic.List$1(MonoInterface.Block)).ctor();
            }
        },
        methods: {
            AddChild: function (T, child) {
                child.Parent = this;
                this.Children.add(child);
                return child;
            },
            Draw: function (sb, parentAlpha) {
                var $t;
                if (this.Visible) {
                    $t = Bridge.getEnumerator(this.Children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            child.Draw(sb, parentAlpha * this.Alpha);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Click: function (x, y, isTouch) { },
            Focus: function () { },
            TapAndHold: function () { },
            CheckForRecalc: function () {
                var $t;
                if (this.IsNeedRecalc) {
                    this.Recalc();
                } else {
                    $t = Bridge.getEnumerator(this.Children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            child.CheckForRecalc();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Recalc: function () {
                var $t;
                MonoInterface.Block.prototype.Recalc.call(this);
                this._finalChildrenScaleX = this.ChildrenScaleX * this.Parent.FinalChildrenScaleX;
                this._finalChildrenScaleY = this.ChildrenScaleY * this.Parent.FinalChildrenScaleY;
                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        child.Recalc();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            GetContainerByPoint: function (x, y, finalX, finalY) {
                var $t;
                if (this.Visible === true && this.FinalX <= x && x <= ((this.FinalX + this.FinalW) | 0) && this.FinalY <= y && y <= ((this.FinalY + this.FinalH) | 0)) {
                    finalX.v = (x - this.FinalX) | 0;
                    finalY.v = (y - this.FinalY) | 0;
                    var cont = null;
                    $t = Bridge.getEnumerator(this.Children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            if (Bridge.is(child, MonoInterface.Container)) {
                                var fX = { };
                                var fY = { };
                                var c = Bridge.cast(child, MonoInterface.Container).GetContainerByPoint(x, y, fX, fY);
                                if (c != null) {
                                    finalX.v = fX.v;
                                    finalY.v = fY.v;
                                    cont = c;
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return cont || this;
                }
                finalX.v = 0;
                finalY.v = 0;
                return null;
            },
            GetButtonByHotKey: function (key) {
                var $t;
                var result = null;
                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        if (child.Visible) {
                            if (Bridge.is(child, MonoInterface.Button) && Bridge.cast(child, MonoInterface.Button).HotKey === key) {
                                result = Bridge.cast(child, MonoInterface.Button);
                            }
                            if (Bridge.is(child, MonoInterface.Container)) {
                                result = Bridge.cast(child, MonoInterface.Container).GetButtonByHotKey(key) || result;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return result;
            },
            ApplyTheme: function (currentTheme) {
                var $t;
                MonoInterface.Block.prototype.ApplyTheme.call(this, currentTheme);
                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        child.ApplyTheme(currentTheme);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

            },
            ApplyLocalization: function (currentLocalization) {
                var $t;
                MonoInterface.Block.prototype.ApplyLocalization.call(this, currentLocalization);
                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        child.ApplyLocalization(currentLocalization);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("MonoInterface.Label", {
        inherits: [MonoInterface.Block],
        fields: {
            _text: null,
            _size: 0,
            TextColor: null,
            FinalFont: null
        },
        props: {
            Text: {
                get: function () {
                    return this._text;
                },
                set: function (value) {
                    this._text = value;
                    this.IsNeedRecalc = true;
                }
            },
            Size: {
                get: function () {
                    return this._size;
                },
                set: function (value) {
                    this._size = value;
                    this.IsNeedRecalc = true;
                }
            }
        },
        ctors: {
            ctor: function (text, size, clr, x, y, horAlign, verAlign, visible) {
                if (clr === void 0) { clr = null; }
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Block.ctor.call(this);
                this.X = x;
                this.Y = y;
                this.W = 0;
                this.H = 0;
                this.Alpha = 1.0;
                this.Alignment = new Microsoft.Xna.Framework.Vector2.$ctor2(horAlign, verAlign);
                this.Size = size;
                this.Text = text;
                this.TextColor = System.Nullable.lift1("$clone", clr);
                this.Visible = visible;

            }
        },
        methods: {
            Recalc: function () {
                var $t, $t1;
                this.FinalFont = this.CurrentTheme.GetFont(Bridge.Int.clip32(this.Size * this.Parent.FinalChildrenScaleY));
                var wh = this.FinalFont.MeasureString(this.CurrentLocalization == null ? this.Text : this.CurrentLocalization.GetString(this.Text));
                this._finalW = ($t = Bridge.Int.clip32(wh.X), this.W = $t, $t);
                this._finalH = ($t1 = Bridge.Int.clip32(wh.Y), this.H = $t1, $t1);
                this._finalX = (this.Parent.FinalX + Bridge.Int.clip32((this.Parent.FinalChildrenScaleX * this.X + (((this.Parent.FinalW - this._finalW) | 0)) * this.Alignment.X))) | 0;
                this._finalY = (this.Parent.FinalY + Bridge.Int.clip32((this.Parent.FinalChildrenScaleY * this.Y + (((this.Parent.FinalH - this._finalH) | 0)) * this.Alignment.Y))) | 0;
                this.IsNeedRecalc = false;
            },
            Draw: function (sb, parentAlpha) {
                var $t, $t1, $t2, $t3;
                if (this.Visible && !this.IsNeedRecalc) {
                    var text = ($t = (($t1 = this.CurrentLocalization) != null ? $t1.GetString(this.Text) : null), $t != null ? $t : this.Text);
                    $t2 = Bridge.getEnumerator(text);
                    try {
                        while ($t2.moveNext()) {
                            var c = $t2.Current;
                            if (!this.FinalFont.Characters.contains(c)) {
                                System.Console.WriteLine(text);
                            }
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                    sb.DrawString(this.FinalFont, text, new Microsoft.Xna.Framework.Vector2.$ctor2(this.FinalX, this.FinalY), new Microsoft.Xna.Framework.Color.$ctor2(($t3 = this.TextColor, $t3 != null ? $t3 : this.CurrentTheme.FontColor), parentAlpha * this.Alpha));
                }
            }
        }
    });

    Bridge.define("MonoInterface.ListAnimation", {
        inherits: [MonoInterface.Animation],
        fields: {
            Children: null,
            _current: 0
        },
        ctors: {
            ctor: function (onStart, onEnd) {
                this.$initialize();
                MonoInterface.Animation.ctor.call(this, onStart, onEnd);
                this.Children = new (System.Collections.Generic.List$1(MonoInterface.Animation)).ctor();
            }
        },
        methods: {
            Do: function () {
                if (this.IsRunning) {
                    this.Children.getItem(this._current).Do();
                    if (this.Children.getItem(this._current).IsCompleted) {
                        if (((this._current + 1) | 0) < this.Children.Count) {
                            this._current = (this._current + 1) | 0;
                            this.Children.getItem(this._current).Begin();
                        } else {
                            this.Complete();
                        }
                    }
                }
            },
            Begin: function () {
                this._current = 0;
                this.Children.getItem(this._current).Begin();
                return MonoInterface.Animation.prototype.Begin.call(this);
            },
            AddChild: function (T, child) {
                this.Children.add(child);
                return child;
            }
        }
    });

    Bridge.define("MonoInterface.MultiAnimation", {
        inherits: [MonoInterface.Animation],
        fields: {
            Children: null
        },
        ctors: {
            ctor: function (children) {
                if (children === void 0) { children = []; }

                this.$initialize();
                MonoInterface.Animation.ctor.call(this);
                this.Children = new (System.Collections.Generic.List$1(MonoInterface.Animation)).ctor();
                this.Children.AddRange(children);
            },
            $ctor1: function (onStart, onEnd, children) {
                if (onStart === void 0) { onStart = null; }
                if (onEnd === void 0) { onEnd = null; }
                if (children === void 0) { children = []; }

                this.$initialize();
                MonoInterface.Animation.ctor.call(this, onStart, onEnd);
                this.Children = new (System.Collections.Generic.List$1(MonoInterface.Animation)).ctor();
                this.Children.AddRange(children);
            }
        },
        methods: {
            Do: function () {
                var $t, $t1;
                if (this.IsRunning) {
                    $t = Bridge.getEnumerator(this.Children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            child.Do();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    var isEnd = true;
                    $t1 = Bridge.getEnumerator(this.Children);
                    try {
                        while ($t1.moveNext()) {
                            var child1 = $t1.Current;
                            if (!child1.IsCompleted) {
                                isEnd = false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    if (isEnd) {
                        this.Complete();
                    }
                }
            },
            Begin: function () {
                var $t;
                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        child.Begin();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return MonoInterface.Animation.prototype.Begin.call(this);
            },
            AddChild: function (T, child) {
                this.Children.add(child);
                return child;
            }
        }
    });

    Bridge.define("MonoInterface.NumberAnimation", {
        inherits: [MonoInterface.Animation],
        fields: {
            current: 0,
            startValue: 0,
            endValue: 0,
            step: 0,
            target: null,
            property: null,
            propertyInfo: null
        },
        ctors: {
            ctor: function (property, start, end, step, onStart, onEnd, target) {
                if (onStart === void 0) { onStart = null; }
                if (onEnd === void 0) { onEnd = null; }
                if (target === void 0) { target = null; }

                this.$initialize();
                MonoInterface.Animation.ctor.call(this, onStart, onEnd);
                this.property = property;
                this.startValue = start;
                this.endValue = end;
                this.step = step;

                this.target = target;
                this.propertyInfo = target != null ? Bridge.Reflection.getMembers(Bridge.getType(target), 16, 284, property) : null;

                this.IsRunning = false;
                this.IsCompleted = false;
            }
        },
        methods: {
            Do: function () {
                if (this.IsRunning) {
                    this.current += this.step;
                    if ((this.step > 0 && this.current > this.endValue) || (this.step < 0 && this.current < this.endValue)) {
                        this.current = this.endValue;
                        this.Complete();
                    }
                    Bridge.Reflection.midel(this.propertyInfo.s, this.target)(System.Convert.changeType(this.current, this.propertyInfo.rt));
                }
            },
            SetTarget: function (target) {
                this.target = target;
                this.propertyInfo = Bridge.Reflection.getMembers(Bridge.getType(target), 16, 284, this.property);
            },
            Begin: function () {
                this.current = this.startValue;
                return MonoInterface.Animation.prototype.Begin.call(this);
            }
        }
    });

    Bridge.define("MonoInterface.Picture", {
        inherits: [MonoInterface.Block],
        fields: {
            spriteRef: null
        },
        ctors: {
            init: function () {
                this.spriteRef = new MonoInterface.Appearance();
            },
            ctor: function (spriteRef, x, y, w, h, horAlign, verAlign, visible) {
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                if (w === void 0) { w = 0; }
                if (h === void 0) { h = 0; }
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Block.ctor.call(this);
                this.spriteRef = spriteRef.$clone();
                this.X = x;
                this.Y = y;
                this.Alpha = 1.0;
                if (w === 0) {
                    this.W = spriteRef.sprite.W;
                } else {
                    this.W = w;
                }
                if (h === 0) {
                    this.H = spriteRef.sprite.H;
                } else {
                    this.H = h;
                }
                this.Alignment = new Microsoft.Xna.Framework.Vector2.$ctor2(horAlign, verAlign);

                this.Visible = visible;
            }
        },
        methods: {
            Draw: function (sb, parentAlpha) {
                if (this.Visible) {
                    this.spriteRef.Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH, 0, parentAlpha * this.Alpha);
                }
            },
            ApplyTheme: function (currentTheme) {
                this.CurrentTheme = currentTheme;
            }
        }
    });

    Bridge.define("MonoInterface.Progress", {
        inherits: [MonoInterface.Block],
        fields: {
            CurrentValue: 0,
            MaxValue: 0,
            Step: 0
        },
        ctors: {
            ctor: function (curValue, maxValue, x, y, w, h, step, visible) {
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Block.ctor.call(this);
                this.X = x;
                this.Y = y;
                this.W = w;
                this.H = h;
                this.MaxValue = maxValue;
                this.CurrentValue = curValue;
                this.Step = step;
                this.Visible = visible;
            }
        },
        methods: {
            Draw: function (sb, parentAlpha) {
                if (this.Visible) {
                    this.CurrentTheme.ProgressBackTexture.Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH);
                    if (this.MaxValue > 0) {
                        this.CurrentTheme.ProgressFrontTexture.Draw(sb, this.FinalX, this.FinalY, Bridge.Int.clip32(this.FinalW * (this.CurrentValue / this.MaxValue)), this.FinalH);
                    }
                }
            },
            ApplyTheme: function (currentTheme) {
                this.CurrentTheme = currentTheme;
            }
        }
    });

    Bridge.define("MonoInterface.Button", {
        inherits: [MonoInterface.Container],
        fields: {
            IsHighlighted: false,
            IsPressed: false,
            IsDisabled: false,
            IsSelected: false,
            HotKey: 0,
            BackTexture: null,
            FrontTexture: null,
            PressedTexture: null,
            DisabledTexture: null,
            SelectedTexture: null
        },
        events: {
            OnClick: null,
            OnFocus: null
        },
        ctors: {
            $ctor3: function (onClick, x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
                this.OnClick = onClick;
            },
            ctor: function (onClick, hotkey, x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
                this.OnClick = onClick;
                this.HotKey = hotkey;
            },
            $ctor2: function (onClick, onFocus, x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
                this.OnClick = onClick;
                this.OnFocus = onFocus;
            },
            $ctor1: function (onClick, onFocus, hotkey, x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
                this.OnClick = onClick;
                this.OnFocus = onFocus;
                this.HotKey = hotkey;
            }
        },
        methods: {
            Draw: function (sb, parentAlpha) {
                var $t, $t1, $t2, $t3, $t4;
                if (this.Visible) {
                    (($t = this.BackTexture, $t != null ? $t : this.CurrentTheme.ButtonBackTexture)).Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH, 0, parentAlpha * this.Alpha);

                    if (this.IsSelected) {
                        (($t1 = this.SelectedTexture, $t1 != null ? $t1 : this.CurrentTheme.ButtonSelectedTexture)).Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH, 0, parentAlpha * this.Alpha);
                    }

                    MonoInterface.Container.prototype.Draw.call(this, sb, parentAlpha);
                    if (this.IsDisabled) {
                        (($t2 = this.DisabledTexture, $t2 != null ? $t2 : this.CurrentTheme.ButtonDisabledTexture)).Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH, 0, parentAlpha * this.Alpha);
                    }

                    if (this.IsHighlighted) {
                        (($t3 = this.FrontTexture, $t3 != null ? $t3 : this.CurrentTheme.ButtonFrontTexture)).Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH, 0, parentAlpha * this.Alpha);
                        this.IsHighlighted = false;
                    }
                    if (this.IsPressed) {
                        (($t4 = this.FrontTexture, $t4 != null ? $t4 : this.CurrentTheme.ButtonFrontTexture)).Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH, 0, parentAlpha * this.Alpha);
                        this.IsPressed = false;
                    }
                }

            },
            Click: function (x, y, isTouch) {
                if (!this.IsDisabled) {
                    !Bridge.staticEquals(this.OnClick, null) ? this.OnClick(this, isTouch) : null;
                }
            },
            Focus: function () {
                !Bridge.staticEquals(this.OnFocus, null) ? this.OnFocus(this, false) : null;
            },
            TapAndHold: function () {
                !Bridge.staticEquals(this.OnFocus, null) ? this.OnFocus(this, true) : null;
            }
        }
    });

    Bridge.define("MonoInterface.Frame", {
        inherits: [MonoInterface.Container],
        fields: {
            TopBorder: false,
            LeftBorder: false,
            RightBorder: false,
            BottomBorder: false,
            BackTexture: null
        },
        ctors: {
            ctor: function (x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
                this.TopBorder = true;
                this.LeftBorder = true;
                this.RightBorder = true;
                this.BottomBorder = true;
            }
        },
        methods: {
            Draw: function (sb, parentAlpha) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
                if (this.Visible) {
                    if (this.CurrentTheme.NineFrameBoderTexture != null) {
                        var topshift = 12, bottomshift = 12, leftshift = 12, rightshift = 12;
                        if (!this.TopBorder) {
                            topshift = 0;
                        }
                        if (!this.BottomBorder) {
                            bottomshift = 0;
                        }
                        if (!this.LeftBorder) {
                            leftshift = 0;
                        }
                        if (!this.RightBorder) {
                            rightshift = 0;
                        }
                        if (this.TopBorder && this.LeftBorder) {
                            ($t = this.CurrentTheme.NineFrameBoderTexture)[0].Draw(sb, ((this.FinalX - 12) | 0), ((this.FinalY - 12) | 0), 24, 24, 0, parentAlpha * this.Alpha);
                        }
                        if (this.TopBorder) {
                            ($t1 = this.CurrentTheme.NineFrameBoderTexture)[1].Draw(sb, ((this.FinalX + leftshift) | 0), ((this.FinalY - 12) | 0), ((((this.FinalW - leftshift) | 0) - rightshift) | 0), 24, 0, parentAlpha * this.Alpha);
                        }
                        if (this.TopBorder && this.RightBorder) {
                            ($t2 = this.CurrentTheme.NineFrameBoderTexture)[2].Draw(sb, ((((this.FinalX + this.FinalW) | 0) - 12) | 0), ((this.FinalY - 12) | 0), 24, 24, 0, parentAlpha * this.Alpha);
                        }
                        if (this.LeftBorder) {
                            ($t3 = this.CurrentTheme.NineFrameBoderTexture)[3].Draw(sb, ((this.FinalX - 12) | 0), ((this.FinalY + topshift) | 0), 24, ((((this.FinalH - bottomshift) | 0) - topshift) | 0), 0, parentAlpha * this.Alpha);
                        }

                        ($t4 = this.CurrentTheme.NineFrameBoderTexture)[4].Draw(sb, ((this.FinalX + leftshift) | 0), ((this.FinalY + topshift) | 0), ((((this.FinalW - leftshift) | 0) - rightshift) | 0), ((((this.FinalH - bottomshift) | 0) - topshift) | 0), 0, parentAlpha * this.Alpha);

                        if (this.RightBorder) {
                            ($t5 = this.CurrentTheme.NineFrameBoderTexture)[5].Draw(sb, ((((this.FinalX + this.FinalW) | 0) - 12) | 0), ((this.FinalY + topshift) | 0), 24, ((((this.FinalH - bottomshift) | 0) - topshift) | 0), 0, parentAlpha * this.Alpha);
                        }
                        if (this.BottomBorder && this.LeftBorder) {
                            ($t6 = this.CurrentTheme.NineFrameBoderTexture)[6].Draw(sb, ((this.FinalX - 12) | 0), ((((this.FinalY + this.FinalH) | 0) - 12) | 0), 24, 24, 0, parentAlpha * this.Alpha);
                        }
                        if (this.BottomBorder) {
                            ($t7 = this.CurrentTheme.NineFrameBoderTexture)[7].Draw(sb, ((this.FinalX + leftshift) | 0), ((((this.FinalY + this.FinalH) | 0) - 12) | 0), ((((this.FinalW - leftshift) | 0) - rightshift) | 0), 24, 0, parentAlpha * this.Alpha);
                        }
                        if (this.BottomBorder && this.RightBorder) {
                            ($t8 = this.CurrentTheme.NineFrameBoderTexture)[8].Draw(sb, ((((this.FinalX + this.FinalW) | 0) - 12) | 0), ((((this.FinalY + this.FinalH) | 0) - 12) | 0), 24, 24, 0, parentAlpha * this.Alpha);
                        }
                    } else {
                        (($t9 = this.BackTexture, $t9 != null ? $t9 : this.CurrentTheme.FrameBackTexture)).Draw(sb, this.FinalX, this.FinalY, this.FinalW, this.FinalH, 0, parentAlpha * this.Alpha);
                    }
                    MonoInterface.Container.prototype.Draw.call(this, sb, parentAlpha);
                }
            }
        }
    });

    Bridge.define("MonoInterface.Grid", {
        inherits: [MonoInterface.Container],
        fields: {
            Orientation: 0
        },
        ctors: {
            ctor: function (orientation, x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
                this.Orientation = orientation;
            }
        },
        methods: {
            AddChild: function (T, child) {
                if (this.Children.Count > 0) {
                    var cX = child.X;
                    var cY = child.Y;
                    if (this.Orientation === MonoInterface.Grid.Orientations.LeftToRight) {
                        cX = (System.Linq.Enumerable.from(this.Children, MonoInterface.Block).last().Right + child.X) | 0;
                        cY = System.Linq.Enumerable.from(this.Children, MonoInterface.Block).last().Y;
                        if (((cX + child.W) | 0) > this.W) {
                            cX = child.X;
                            cY = (System.Linq.Enumerable.from(this.Children, MonoInterface.Block).last().Bottom + child.Y) | 0;
                        }
                    } else if (this.Orientation === MonoInterface.Grid.Orientations.TopToBottom) {
                        cX = child.X;
                        cY = (System.Linq.Enumerable.from(this.Children, MonoInterface.Block).last().Bottom + child.Y) | 0;
                        if (((cY + child.H) | 0) > this.H) {
                            cX = (System.Linq.Enumerable.from(this.Children, MonoInterface.Block).last().Right + child.X) | 0;
                            cY = System.Linq.Enumerable.from(this.Children, MonoInterface.Block).last().Y;
                        }
                    }
                    child.X = cX;
                    child.Y = cY;
                }
                return MonoInterface.Container.prototype.AddChild.call(this, T, child);
            }
        }
    });

    Bridge.define("MonoInterface.LongLabel", {
        inherits: [MonoInterface.Container],
        fields: {
            _text: null,
            TextColor: null,
            FinalFont: null,
            _size: 0
        },
        props: {
            Text: {
                get: function () {
                    return this._text;
                },
                set: function (value) {
                    this._text = value;
                    this.IsNeedRecalc = true;
                }
            },
            Size: {
                get: function () {
                    return this._size;
                },
                set: function (value) {
                    this._size = value;
                    this.IsNeedRecalc = true;
                }
            }
        },
        ctors: {
            ctor: function (text, size, clr, x, y, w, horAlign, verAlign, visible) {
                if (clr === void 0) { clr = null; }
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                if (w === void 0) { w = 0; }
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, 0, horAlign, verAlign, visible);
                this._size = size;
                this._text = text;
                this.TextColor = System.Nullable.lift1("$clone", clr);

            }
        },
        methods: {
            Recalc: function () {
                this.FinalFont = this.CurrentTheme.GetFont(this._size);
                this.Children.clear();
                var localizedText = this.CurrentLocalization != null ? this.CurrentLocalization.GetString(this._text) : this._text;
                var texts = System.String.split(localizedText, [32].map(function (i) {{ return String.fromCharCode(i); }}));
                var curtext = "";
                var lineH = Bridge.Int.clip32(this.FinalFont.MeasureString(localizedText).Y);
                var totalLines = 0;
                for (var i = 0; i < texts.length; i = (i + 1) | 0) {
                    if (this.FinalFont.MeasureString((curtext || "") + String.fromCharCode(32) + (texts[i] || "")).X > this.W && i > 0) {
                        this.AddChild(MonoInterface.Label, new MonoInterface.Label(curtext, this.Size, System.Nullable.lift1("$clone", this.TextColor), 0, Bridge.Int.mul(totalLines, lineH), this.Alignment.X, 0.0, true));
                        totalLines = (totalLines + 1) | 0;
                        curtext = (texts[i] || "") + String.fromCharCode(32);
                    } else {
                        curtext = (curtext || "") + (((texts[i] || "") + String.fromCharCode(32)) || "");
                    }
                }
                this.AddChild(MonoInterface.Label, new MonoInterface.Label(curtext.trim(), this.Size, System.Nullable.lift1("$clone", this.TextColor), 0, Bridge.Int.mul(totalLines, lineH), this.Alignment.X, 0.0, true));
                totalLines = (totalLines + 1) | 0;
                this.H = (Bridge.Int.mul(totalLines, lineH));
                MonoInterface.Container.prototype.ApplyTheme.call(this, this.CurrentTheme);
                MonoInterface.Container.prototype.Recalc.call(this);
            },
            ApplyTheme: function (currentTheme) {
                this.CurrentTheme = currentTheme;
                this.Size = this._size;
                this.Text = this._text;
            }
        }
    });

    Bridge.define("MonoInterface.Switcher", {
        inherits: [MonoInterface.Container],
        fields: {
            _current: 0,
            ItemsCount: 0,
            Pictures: null,
            Titles: null,
            Descriptions: null,
            pctMain: null,
            lblMain: null,
            lblDesc: null,
            pctMainOld: null,
            lblMainOld: null,
            Animator: null
        },
        props: {
            Current: {
                get: function () {
                    return this._current;
                },
                set: function (value) {
                    var $t, $t1, $t2, $t3, $t4;
                    if (this.pctMainOld != null) {
                        this.pctMainOld.spriteRef = ($t = this.Pictures)[this._current].$clone();
                    }
                    if (this.lblMainOld != null) {
                        this.lblMainOld.Text = ($t1 = this.Titles)[this._current];
                    }
                    this._current = value;
                    if (this._current >= this.ItemsCount) {
                        this._current = 0;
                    }
                    if (this._current < 0) {
                        this._current = (this.ItemsCount - 1) | 0;
                    }
                    if (this.pctMain != null) {
                        this.pctMain.spriteRef = ($t2 = this.Pictures)[this._current].$clone();
                    }
                    if (this.lblMain != null) {
                        this.lblMain.Text = ($t3 = this.Titles)[this._current];
                    }
                    if (this.lblDesc != null) {
                        this.lblDesc.Text = ($t4 = this.Descriptions)[this._current];
                    }
                }
            }
        },
        ctors: {
            ctor: function (pictures, titles, descriptions, current, animator, x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }
                var $t, $t1;

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
                this.Pictures = pictures;
                this.Titles = titles;
                this.Descriptions = descriptions;
                this.Animator = animator;

                var pCnt = ($t = (pictures != null ? pictures.length : null), $t != null ? $t : 0);
                var tCnt = ($t1 = (titles != null ? titles.length : null), $t1 != null ? $t1 : 0);

                var maxCnt = pCnt > tCnt ? pCnt : tCnt;

                this.ItemsCount = maxCnt;
                this.Current = current;

            }
        },
        methods: {
            btnLeftClicked: function (btn, isTouch) {
                this.Current = (this.Current - 1) | 0;
                if (this.Animator != null) {
                    if (this.pctMain != null) {
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.$ctor1(Bridge.fn.bind(this, function () {
                            this.pctMainOld.Show();
                        }), Bridge.fn.bind(this, function () {
                            this.pctMainOld.Hide();
                        }), [new MonoInterface.NumberAnimation("X", 0, -50, -5, void 0, void 0, this.pctMainOld), new MonoInterface.NumberAnimation("Alpha", 1.0, 0, -0.1, void 0, void 0, this.pctMainOld)])).Begin();
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.ctor([new MonoInterface.NumberAnimation("X", 50, 0, -5, void 0, void 0, this.pctMain), new MonoInterface.NumberAnimation("Alpha", 0, 1.0, 0.1, void 0, void 0, this.pctMain)])).Begin();
                    } else if (this.lblMain != null) {
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.$ctor1(Bridge.fn.bind(this, function () {
                            this.lblMainOld.Show();
                        }), Bridge.fn.bind(this, function () {
                            this.lblMainOld.Hide();
                        }), [new MonoInterface.NumberAnimation("X", 0, -50, -5, void 0, void 0, this.lblMainOld), new MonoInterface.NumberAnimation("Alpha", 1.0, 0, -0.1, void 0, void 0, this.lblMainOld)])).Begin();
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.ctor([new MonoInterface.NumberAnimation("X", 50, 0, -5, void 0, void 0, this.lblMain), new MonoInterface.NumberAnimation("Alpha", 0, 1.0, 0.1, void 0, void 0, this.lblMain)])).Begin();
                    }
                }
            },
            btnRightClicked: function (btn, isTouch) {
                this.Current = (this.Current + 1) | 0;
                if (this.Animator != null) {
                    if (this.pctMain != null) {
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.$ctor1(Bridge.fn.bind(this, function () {
                            this.pctMainOld.Show();
                        }), Bridge.fn.bind(this, function () {
                            this.pctMainOld.Hide();
                        }), [new MonoInterface.NumberAnimation("X", 0, 50, 5, void 0, void 0, this.pctMainOld), new MonoInterface.NumberAnimation("Alpha", 1.0, 0, -0.1, void 0, void 0, this.pctMainOld)])).Begin();
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.ctor([new MonoInterface.NumberAnimation("X", -50, 0, 5, void 0, void 0, this.pctMain), new MonoInterface.NumberAnimation("Alpha", 0, 1.0, 0.1, void 0, void 0, this.pctMain)])).Begin();
                    } else if (this.lblMain != null) {
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.$ctor1(Bridge.fn.bind(this, function () {
                            this.lblMainOld.Show();
                        }), Bridge.fn.bind(this, function () {
                            this.lblMainOld.Hide();
                        }), [new MonoInterface.NumberAnimation("X", 0, 50, 5, void 0, void 0, this.lblMainOld), new MonoInterface.NumberAnimation("Alpha", 1.0, 0, -0.1, void 0, void 0, this.lblMainOld)])).Begin();
                        this.Animator.AddChild(MonoInterface.MultiAnimation, new MonoInterface.MultiAnimation.ctor([new MonoInterface.NumberAnimation("X", -50, 0, 5, void 0, void 0, this.lblMain), new MonoInterface.NumberAnimation("Alpha", 0, 1.0, 0.1, void 0, void 0, this.lblMain)])).Begin();
                    }
                }
            },
            ApplyTheme: function (currentTheme) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                this.CurrentTheme = currentTheme;
                var btnLeft = this.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.btnLeftClicked), Microsoft.Xna.Framework.Input.Keys.Left, 0, 0, 45, 30, 0.0, 0.5, true));
                btnLeft.AddChild(MonoInterface.Picture, new MonoInterface.Picture(this.CurrentTheme.SwitcherButtonLeftTexture.$clone(), 0, 0, 45, 45, 0.5, 0.5, true));
                btnLeft.BackTexture = currentTheme.EmptyTexture.$clone();
                var btnRight = this.AddChild(MonoInterface.Button, new MonoInterface.Button.ctor(Bridge.fn.cacheBind(this, this.btnRightClicked), Microsoft.Xna.Framework.Input.Keys.Right, 0, 0, 45, 30, 1.0, 0.5, true));
                btnRight.AddChild(MonoInterface.Picture, new MonoInterface.Picture(this.CurrentTheme.SwitcherButtonRightTexture.$clone(), 0, 0, 45, 45, 0.5, 0.5, true));
                btnRight.BackTexture = currentTheme.EmptyTexture.$clone();
                if (this.Pictures != null) {
                    this.pctMain = this.AddChild(MonoInterface.Picture, new MonoInterface.Picture(($t = this.Pictures)[this.Current].$clone()));
                    this.pctMainOld = this.AddChild(MonoInterface.Picture, new MonoInterface.Picture(($t1 = this.Pictures)[this.Current].$clone(), 0, 0, 0, 0, 0.5, 0.5, false));
                    if (this.Titles != null) {
                        this.lblMain = this.AddChild(MonoInterface.Label, new MonoInterface.Label(($t2 = this.Titles)[this.Current], this.CurrentTheme.SwitcherMainFontSize, this.CurrentTheme.SwitcherMainColor.$clone(), 0, ((((Bridge.Int.div(((-this.H) | 0), 2)) | 0) - 20) | 0), 0.5, 1.0, true));
                        this.lblMainOld = this.AddChild(MonoInterface.Label, new MonoInterface.Label(($t3 = this.Titles)[this.Current], this.CurrentTheme.SwitcherMainFontSize, this.CurrentTheme.SwitcherMainColor.$clone(), 0, ((((Bridge.Int.div(((-this.H) | 0), 2)) | 0) - 20) | 0), 0.5, 1.0, false));
                    }
                    if (this.Descriptions != null) {
                        this.lblDesc = this.AddChild(MonoInterface.LongLabel, new MonoInterface.LongLabel(($t4 = this.Descriptions)[this.Current], this.CurrentTheme.SwitcherDescriptionFontSize, this.CurrentTheme.SwitcherDescriptionColor.$clone(), 0, ((((Bridge.Int.div(this.H, 2)) | 0) + 25) | 0), this.W, 0.5, 0.0, true));
                    }
                } else {
                    this.lblMain = this.AddChild(MonoInterface.Label, new MonoInterface.Label(($t5 = this.Titles)[this.Current], this.CurrentTheme.SwitcherMainFontSize, this.CurrentTheme.SwitcherMainColor.$clone()));
                    this.lblMainOld = this.AddChild(MonoInterface.Label, new MonoInterface.Label(($t6 = this.Titles)[this.Current], this.CurrentTheme.SwitcherMainFontSize, this.CurrentTheme.SwitcherMainColor.$clone(), 0, 0, 0.5, 0.5, false));
                    if (this.Descriptions != null) {
                        this.lblDesc = this.AddChild(MonoInterface.LongLabel, new MonoInterface.LongLabel(($t7 = this.Descriptions)[this.Current], this.CurrentTheme.SwitcherDescriptionFontSize, this.CurrentTheme.SwitcherDescriptionColor.$clone(), 0, ((((Bridge.Int.div(this.H, 2)) | 0) + 20) | 0), this.W, 0.5, 0.0, true));
                    }

                }
                MonoInterface.Container.prototype.ApplyTheme.call(this, currentTheme);
            }
        }
    });

    Bridge.define("MonoInterface.Window", {
        inherits: [MonoInterface.Container],
        ctors: {
            ctor: function (x, y, w, h, horAlign, verAlign, visible) {
                if (horAlign === void 0) { horAlign = 0.5; }
                if (verAlign === void 0) { verAlign = 0.5; }
                if (visible === void 0) { visible = true; }

                this.$initialize();
                MonoInterface.Container.ctor.call(this, x, y, w, h, horAlign, verAlign, visible);
            }
        },
        methods: {
            ClickButton: function (key) {
                var btn = this.GetButtonByHotKey(key);
                if (btn != null) {
                    btn.Click(0, 0, false);
                }
            },
            ClickButton$1: function (x, y, isTouch) {
                var fX = { };
                var fY = { };
                var cont = this.GetContainerByPoint(x, y, fX, fY);
                if (cont != null) {
                    cont.Click(fX.v, fY.v, isTouch);
                }
            },
            HighlightButton: function (x, y, mPressed) {
                var fX = { };
                var fY = { };
                var cont = this.GetContainerByPoint(x, y, fX, fY);
                var btn;
                if (((btn = Bridge.as(cont, MonoInterface.Button))) != null) {
                    btn.Focus();
                    if (!btn.IsDisabled) {
                        btn.IsHighlighted = true;

                        if (mPressed) {
                            btn.IsPressed = true;
                        }
                    }
                }
            },
            TapAndHoldButton: function (x, y) {
                var fX = { }, fY = { };
                var cont = this.GetContainerByPoint(x, y, fX, fY);
                var btn;
                if (((btn = Bridge.as(cont, MonoInterface.Button))) != null) {
                    btn.TapAndHold();
                    if (!btn.IsDisabled) {
                        btn.IsPressed = true;
                    }
                }

            },
            Recalc: function () {
                var $t;
                this._finalX = this.X;
                this._finalY = this.Y;
                this._finalW = this.W;
                this._finalH = this.H;
                this._finalChildrenScaleX = this.ChildrenScaleX;
                this._finalChildrenScaleY = this.ChildrenScaleY;
                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        child.Recalc();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.IsNeedRecalc = false;
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
